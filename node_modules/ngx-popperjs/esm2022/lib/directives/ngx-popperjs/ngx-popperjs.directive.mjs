// tslint:disable:no-input-rename
import { Directive, EventEmitter, Inject, Input, Output } from "@angular/core";
import { NgxPopperjsContentComponent } from "../../components/ngx-popperjs-content/ngx-popperjs-content.component";
import { NgxPopperjsTriggers } from "../../models/ngx-popperjs-triggers.model";
import { NGX_POPPERJS_DEFAULTS } from "../../models/ngx-popperjs-defaults.model";
import { NgxPopperjsUtils } from "../../models/ngx-popperjs-utils.class";
//
import { fromEvent, Subject, takeUntil, timer } from "rxjs";
import * as i0 from "@angular/core";
export class NgxPopperjsDirective {
    _changeDetectorRef;
    _elementRef;
    _vcr;
    _popperDefaults;
    static baseOptions = {
        showDelay: 0,
        hideOnClickOutside: true,
        hideOnMouseLeave: false,
        hideOnScroll: false,
        appendTo: undefined,
        ariaRole: "popper",
        ariaDescribe: "",
        styles: {},
        trigger: NgxPopperjsTriggers.click
    };
    set applyClass(newValue) {
        if (newValue === this._applyClass) {
            return;
        }
        this._applyClass = newValue;
        this._checkExisting("applyClass", newValue);
    }
    get applyClass() {
        return this._applyClass;
    }
    set hideOnClickOutside(newValue) {
        this._hideOnClickOutside = NgxPopperjsUtils.coerceBooleanProperty(newValue);
    }
    get hideOnClickOutside() {
        return this._hideOnClickOutside;
    }
    set content(newValue) {
        if (newValue === this._content) {
            return;
        }
        this._content = newValue;
        if (this._popperContent) {
            if (typeof newValue === "string") {
                this._popperContent.text = newValue;
            }
            else {
                this._popperContent = newValue;
            }
        }
    }
    get content() {
        return this._content;
    }
    set flip(newValue) {
        this._flip = NgxPopperjsUtils.coerceBooleanProperty(newValue);
        this._checkExisting("preventOverflow", this._preventOverflow);
    }
    get flip() {
        return this._flip;
    }
    set placement(newValue) {
        this._placement = newValue;
        this._checkExisting("placement", newValue);
    }
    get placement() {
        return this._placement;
    }
    set preventOverflow(newValue) {
        this._preventOverflow = NgxPopperjsUtils.coerceBooleanProperty(newValue);
        this._checkExisting("preventOverflow", this._preventOverflow);
    }
    get preventOverflow() {
        return this._preventOverflow;
    }
    set popperApplyArrowClass(newValue) {
        if (newValue === this._applyArrowClass) {
            return;
        }
        this._applyArrowClass = newValue;
        if (this._popperContent) {
            this._popperContent.popperOptions.applyArrowClass = newValue;
            if (!this._shown) {
                return;
            }
            this._popperContent.update();
        }
    }
    get popperApplyArrowClass() {
        return this._applyArrowClass;
    }
    set disabled(newValue) {
        if (newValue === this._disabled) {
            return;
        }
        this._disabled = !!newValue;
        if (this._shown) {
            this.hide();
        }
    }
    get disabled() {
        return this._disabled;
    }
    ariaDescribe;
    ariaRole;
    boundariesElement;
    disableAnimation;
    disableStyle;
    hideOnMouseLeave;
    hideOnScroll;
    hideTimeout = 0;
    popperAppendTo;
    popperOnHidden = new EventEmitter();
    popperOnShown = new EventEmitter();
    popperOnUpdate = new EventEmitter();
    positionFixed;
    showDelay;
    showOnStart;
    showTrigger;
    styles;
    targetElement;
    timeoutAfterShow = 0;
    _applyArrowClass;
    _applyClass;
    _content;
    _destroy$ = new Subject();
    _disabled;
    _flip = !0;
    _globalEventListenersCtrl$ = new Subject();
    _hideOnClickOutside = true;
    _placement;
    _popperContent;
    _popperContentClass = NgxPopperjsContentComponent;
    _popperContentRef;
    _preventOverflow = !0;
    _scheduledHideTimeoutCtrl$ = new Subject();
    _scheduledShowTimeoutCtrl$ = new Subject();
    _shown = false;
    constructor(_changeDetectorRef, _elementRef, _vcr, _popperDefaults = {}) {
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        this._vcr = _vcr;
        this._popperDefaults = _popperDefaults;
        NgxPopperjsDirective.baseOptions = { ...NgxPopperjsDirective.baseOptions, ...this._popperDefaults };
    }
    static assignDefined(target, ...sources) {
        for (const source of sources) {
            for (const key of Object.keys(source)) {
                const val = source[key];
                if (val !== undefined) {
                    target[key] = val;
                }
            }
        }
        return target;
    }
    applyTriggerListeners() {
        switch (this.showTrigger) {
            case NgxPopperjsTriggers.click:
                this._addListener("click", this.toggle.bind(this));
                break;
            case NgxPopperjsTriggers.mousedown:
                this._addListener("mousedown", this.toggle.bind(this));
                break;
            case NgxPopperjsTriggers.hover:
                this._addListener("mouseenter", this.scheduledShow.bind(this, this.showDelay));
                ["touchend", "touchcancel", "mouseleave"].forEach((eventName) => {
                    this._addListener(eventName, this.scheduledHide.bind(this, null, this.hideTimeout));
                });
                break;
        }
        if (this.showTrigger !== NgxPopperjsTriggers.hover && this.hideOnMouseLeave) {
            ["touchend", "touchcancel", "mouseleave"].forEach((eventName) => {
                this._addListener(eventName, this.scheduledHide.bind(this, null, this.hideTimeout));
            });
        }
    }
    getRefElement() {
        return this.targetElement || this._elementRef.nativeElement;
    }
    hide() {
        if (this.disabled) {
            return;
        }
        if (!this._shown) {
            this._scheduledShowTimeoutCtrl$.next();
            return;
        }
        this._shown = false;
        if (this._popperContentRef) {
            this._popperContentRef.instance.hide();
        }
        else {
            this._popperContent.hide();
        }
        this.popperOnHidden.emit(this);
        this._globalEventListenersCtrl$.next();
    }
    hideOnClickOutsideHandler($event) {
        if (this.disabled || !this.hideOnClickOutside || $event.target === this._popperContent.elRef.nativeElement ||
            this._popperContent.elRef.nativeElement.contains($event.target)) {
            return;
        }
        this.scheduledHide($event, this.hideTimeout);
    }
    hideOnScrollHandler($event) {
        if (this.disabled || !this.hideOnScroll) {
            return;
        }
        this.scheduledHide($event, this.hideTimeout);
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
        this._popperContent && this._popperContent.clean();
    }
    ngOnInit() {
        if (typeof this.content === "string") {
            this._popperContent = this._constructContent();
            this._popperContent.text = this.content;
        }
        else if (typeof this.content === typeof void 0) {
            this._popperContent = this._constructContent();
            this._popperContent.text = "";
        }
        else {
            this._popperContent = this.content;
        }
        const popperRef = this._popperContent;
        popperRef.referenceObject = this.getRefElement();
        this._setContentProperties(popperRef);
        this._setDefaults();
        this.applyTriggerListeners();
        if (this.showOnStart) {
            this.scheduledShow();
        }
    }
    scheduledHide($event = null, delay = this.hideTimeout) {
        if (this.disabled) {
            return;
        }
        this._scheduledShowTimeoutCtrl$.next();
        timer(delay)
            .pipe(takeUntil(this._scheduledHideTimeoutCtrl$), takeUntil(this._destroy$))
            .subscribe({
            next: () => {
                // TODO: check
                const toElement = $event ? $event.toElement : null;
                const popperContentView = this._popperContent.popperViewRef ? this._popperContent.popperViewRef.nativeElement : false;
                if (!popperContentView ||
                    popperContentView === toElement ||
                    popperContentView.contains(toElement) ||
                    (this.content && this.content.isMouseOver)) {
                    return;
                }
                this.hide();
                this._applyChanges();
            }
        });
    }
    scheduledShow(delay = this.showDelay) {
        if (this.disabled) {
            return;
        }
        this._scheduledHideTimeoutCtrl$.next();
        timer(delay)
            .pipe(takeUntil(this._scheduledShowTimeoutCtrl$), takeUntil(this._destroy$))
            .subscribe({
            next: () => {
                this.show();
                this._applyChanges();
            }
        });
    }
    show() {
        if (this._shown) {
            this._scheduledHideTimeoutCtrl$.next();
            return;
        }
        this._shown = true;
        const popperRef = this._popperContent;
        const element = this.getRefElement();
        if (popperRef.referenceObject !== element) {
            popperRef.referenceObject = element;
        }
        this._setContentProperties(popperRef);
        popperRef.show();
        this.popperOnShown.emit(this);
        if (this.timeoutAfterShow > 0) {
            this.scheduledHide(null, this.timeoutAfterShow);
        }
        fromEvent(document, "click")
            .pipe(takeUntil(this._globalEventListenersCtrl$), takeUntil(this._destroy$))
            .subscribe({
            next: (e) => this.hideOnClickOutsideHandler(e)
        });
        fromEvent(this._getScrollParent(this.getRefElement()), "scroll")
            .pipe(takeUntil(this._globalEventListenersCtrl$), takeUntil(this._destroy$))
            .subscribe({
            next: (e) => {
                this.hideOnScrollHandler(e);
            }
        });
    }
    toggle() {
        if (this.disabled) {
            return;
        }
        this._shown ? this.scheduledHide(null, this.hideTimeout) : this.scheduledShow();
    }
    _addListener(eventName, cb) {
        fromEvent(this._elementRef.nativeElement, eventName)
            .pipe(takeUntil(this._destroy$))
            .subscribe({
            next: cb
        });
    }
    _applyChanges() {
        this._changeDetectorRef.markForCheck();
        this._changeDetectorRef.detectChanges();
    }
    _checkExisting(key, newValue) {
        if (this._popperContent) {
            this._popperContent.popperOptions[key] = newValue;
            if (!this._shown) {
                return;
            }
            this._popperContent.update();
        }
    }
    _constructContent() {
        this._popperContentRef = this._vcr.createComponent(this._popperContentClass);
        return this._popperContentRef.instance;
    }
    _getScrollParent(node) {
        const isElement = node instanceof HTMLElement;
        const overflowY = isElement && window.getComputedStyle(node).overflowY;
        const isScrollable = overflowY !== "visible" && overflowY !== "hidden";
        if (!node) {
            return null;
        }
        else if (isScrollable && node.scrollHeight > node.clientHeight) {
            return node;
        }
        return this._getScrollParent(node.parentNode) || document;
    }
    _onPopperUpdate(event) {
        this.popperOnUpdate.emit(event);
    }
    _setContentProperties(popperRef) {
        popperRef.popperOptions = NgxPopperjsDirective.assignDefined(popperRef.popperOptions, NgxPopperjsDirective.baseOptions, {
            showDelay: this.showDelay,
            disableAnimation: this.disableAnimation,
            disableDefaultStyling: this.disableStyle,
            placement: this.placement,
            boundariesElement: this.boundariesElement,
            trigger: this.showTrigger,
            positionFixed: this.positionFixed,
            ariaDescribe: this.ariaDescribe,
            ariaRole: this.ariaRole,
            applyClass: this.applyClass,
            applyArrowClass: this.popperApplyArrowClass,
            hideOnMouseLeave: this.hideOnMouseLeave,
            styles: this.styles,
            appendTo: this.popperAppendTo,
            preventOverflow: this.preventOverflow,
        });
        popperRef.onUpdate = this._onPopperUpdate.bind(this);
        popperRef.onHidden
            .pipe(takeUntil(this._destroy$))
            .subscribe(this.hide.bind(this));
    }
    _setDefaults() {
        ["showDelay", "hideOnScroll", "hideOnMouseLeave", "hideOnClickOutside", "ariaRole", "ariaDescribe"].forEach((key) => {
            this[key] = this[key] === void 0 ? NgxPopperjsDirective.baseOptions[key] : this[key];
        });
        this.showTrigger = this.showTrigger || NgxPopperjsDirective.baseOptions.trigger;
        this.styles = this.styles === void 0 ? { ...NgxPopperjsDirective.baseOptions.styles } : this.styles;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: NgxPopperjsDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: NGX_POPPERJS_DEFAULTS }], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.0", type: NgxPopperjsDirective, isStandalone: true, selector: "[popper]", inputs: { applyClass: ["popperApplyClass", "applyClass"], hideOnClickOutside: ["popperHideOnClickOutside", "hideOnClickOutside"], content: ["popper", "content"], flip: ["popperFlip", "flip"], placement: ["popperPlacement", "placement"], preventOverflow: ["popperPreventOverflow", "preventOverflow"], popperApplyArrowClass: "popperApplyArrowClass", disabled: ["popperDisabled", "disabled"], ariaDescribe: ["popperAriaDescribeBy", "ariaDescribe"], ariaRole: ["popperAriaRole", "ariaRole"], boundariesElement: ["popperBoundaries", "boundariesElement"], disableAnimation: ["popperDisableAnimation", "disableAnimation"], disableStyle: ["popperDisableStyle", "disableStyle"], hideOnMouseLeave: ["popperHideOnMouseLeave", "hideOnMouseLeave"], hideOnScroll: ["popperHideOnScroll", "hideOnScroll"], hideTimeout: ["popperTimeout", "hideTimeout"], popperAppendTo: "popperAppendTo", positionFixed: ["popperPositionFixed", "positionFixed"], showDelay: ["popperDelay", "showDelay"], showOnStart: ["popperShowOnStart", "showOnStart"], showTrigger: ["popperTrigger", "showTrigger"], styles: ["popperStyles", "styles"], targetElement: ["popperTarget", "targetElement"], timeoutAfterShow: ["popperTimeoutAfterShow", "timeoutAfterShow"] }, outputs: { popperOnHidden: "popperOnHidden", popperOnShown: "popperOnShown", popperOnUpdate: "popperOnUpdate" }, exportAs: ["popper"], ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: NgxPopperjsDirective, decorators: [{
            type: Directive,
            args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: "[popper]",
                    exportAs: "popper",
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_POPPERJS_DEFAULTS]
                }] }], propDecorators: { applyClass: [{
                type: Input,
                args: ["popperApplyClass"]
            }], hideOnClickOutside: [{
                type: Input,
                args: ["popperHideOnClickOutside"]
            }], content: [{
                type: Input,
                args: ["popper"]
            }], flip: [{
                type: Input,
                args: ["popperFlip"]
            }], placement: [{
                type: Input,
                args: ["popperPlacement"]
            }], preventOverflow: [{
                type: Input,
                args: ["popperPreventOverflow"]
            }], popperApplyArrowClass: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: ["popperDisabled"]
            }], ariaDescribe: [{
                type: Input,
                args: ["popperAriaDescribeBy"]
            }], ariaRole: [{
                type: Input,
                args: ["popperAriaRole"]
            }], boundariesElement: [{
                type: Input,
                args: ["popperBoundaries"]
            }], disableAnimation: [{
                type: Input,
                args: ["popperDisableAnimation"]
            }], disableStyle: [{
                type: Input,
                args: ["popperDisableStyle"]
            }], hideOnMouseLeave: [{
                type: Input,
                args: ["popperHideOnMouseLeave"]
            }], hideOnScroll: [{
                type: Input,
                args: ["popperHideOnScroll"]
            }], hideTimeout: [{
                type: Input,
                args: ["popperTimeout"]
            }], popperAppendTo: [{
                type: Input
            }], popperOnHidden: [{
                type: Output
            }], popperOnShown: [{
                type: Output
            }], popperOnUpdate: [{
                type: Output
            }], positionFixed: [{
                type: Input,
                args: ["popperPositionFixed"]
            }], showDelay: [{
                type: Input,
                args: ["popperDelay"]
            }], showOnStart: [{
                type: Input,
                args: ["popperShowOnStart"]
            }], showTrigger: [{
                type: Input,
                args: ["popperTrigger"]
            }], styles: [{
                type: Input,
                args: ["popperStyles"]
            }], targetElement: [{
                type: Input,
                args: ["popperTarget"]
            }], timeoutAfterShow: [{
                type: Input,
                args: ["popperTimeoutAfterShow"]
            }] } });
//# sourceMappingURL=data:application/json;base64,