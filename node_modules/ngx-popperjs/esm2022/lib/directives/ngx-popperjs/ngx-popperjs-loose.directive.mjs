// tslint:disable:no-input-rename
import { Directive, Inject, Input } from "@angular/core";
import { NGX_POPPERJS_DEFAULTS } from "../../models/ngx-popperjs-defaults.model";
import { NgxPopperjsDirective } from "./ngx-popperjs.directive";
import * as i0 from "@angular/core";
export class NgxPopperjsLooseDirective extends NgxPopperjsDirective {
    set popperLoose(newValue) {
        this.content = newValue;
    }
    set popperLoosePlacement(newValue) {
        this.placement = newValue;
    }
    set popperLooseTrigger(newValue) {
        this.showTrigger = newValue;
    }
    constructor(changeDetectorRef, elementRef, vcr, popperDefaults = {}) {
        super(changeDetectorRef, elementRef, vcr, popperDefaults);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: NgxPopperjsLooseDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: NGX_POPPERJS_DEFAULTS }], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.0", type: NgxPopperjsLooseDirective, isStandalone: true, selector: "[popperLoose]", inputs: { popperLoose: "popperLoose", popperLoosePlacement: "popperLoosePlacement", popperLooseTrigger: "popperLooseTrigger" }, exportAs: ["popperLoose"], usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: NgxPopperjsLooseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[popperLoose]",
                    exportAs: "popperLoose",
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_POPPERJS_DEFAULTS]
                }] }], propDecorators: { popperLoose: [{
                type: Input
            }], popperLoosePlacement: [{
                type: Input
            }], popperLooseTrigger: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBvcHBlcmpzLWxvb3NlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wb3BwZXJqcy9zcmMvbGliL2RpcmVjdGl2ZXMvbmd4LXBvcHBlcmpzL25neC1wb3BwZXJqcy1sb29zZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUNBQWlDO0FBQ2pDLE9BQU8sRUFFSCxTQUFTLEVBRVQsTUFBTSxFQUNOLEtBQUssRUFFUixNQUFNLGVBQWUsQ0FBQztBQUl2QixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUMvRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQzs7QUFTOUQsTUFBTSxPQUFPLHlCQUEwQixTQUFRLG9CQUFvQjtJQUUvRCxJQUNJLFdBQVcsQ0FBQyxRQUE4QztRQUMxRCxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFDSSxvQkFBb0IsQ0FBQyxRQUFvQztRQUN6RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQWlDLENBQUM7SUFDdkQsQ0FBQztJQUVELElBQ0ksa0JBQWtCLENBQUMsUUFBa0M7UUFDckQsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUErQixDQUFDO0lBQ3ZELENBQUM7SUFFRCxZQUFZLGlCQUFvQyxFQUNwQyxVQUFzQixFQUN0QixHQUFxQixFQUNVLGlCQUFxQyxFQUFFO1FBQzlFLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzlELENBQUM7MEhBdEJRLHlCQUF5Qiw2R0FvQmQscUJBQXFCOzhHQXBCaEMseUJBQXlCOzsyRkFBekIseUJBQXlCO2tCQUxyQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsYUFBYTtvQkFDdkIsVUFBVSxFQUFFLElBQUk7aUJBQ25COzswQkFxQmdCLE1BQU07MkJBQUMscUJBQXFCO3lDQWpCckMsV0FBVztzQkFEZCxLQUFLO2dCQU1GLG9CQUFvQjtzQkFEdkIsS0FBSztnQkFNRixrQkFBa0I7c0JBRHJCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTpuby1pbnB1dC1yZW5hbWVcclxuaW1wb3J0IHtcclxuICAgIENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgRGlyZWN0aXZlLFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIEluamVjdCxcclxuICAgIElucHV0LFxyXG4gICAgVmlld0NvbnRhaW5lclJlZlxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbi8vXHJcbmltcG9ydCB7Tmd4UG9wcGVyanNPcHRpb25zfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1wb3BwZXJqcy1vcHRpb25zLm1vZGVsXCI7XHJcbmltcG9ydCB7Tmd4UG9wcGVyanNQbGFjZW1lbnRzfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1wb3BwZXJqcy1wbGFjZW1lbnRzLm1vZGVsXCI7XHJcbmltcG9ydCB7TkdYX1BPUFBFUkpTX0RFRkFVTFRTfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1wb3BwZXJqcy1kZWZhdWx0cy5tb2RlbFwiO1xyXG5pbXBvcnQge05neFBvcHBlcmpzRGlyZWN0aXZlfSBmcm9tIFwiLi9uZ3gtcG9wcGVyanMuZGlyZWN0aXZlXCI7XHJcbmltcG9ydCB7Tmd4UG9wcGVyanNDb250ZW50Q29tcG9uZW50fSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9uZ3gtcG9wcGVyanMtY29udGVudC9uZ3gtcG9wcGVyanMtY29udGVudC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtOZ3hQb3BwZXJqc1RyaWdnZXJzfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1wb3BwZXJqcy10cmlnZ2Vycy5tb2RlbFwiO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogXCJbcG9wcGVyTG9vc2VdXCIsXHJcbiAgICBleHBvcnRBczogXCJwb3BwZXJMb29zZVwiLFxyXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UG9wcGVyanNMb29zZURpcmVjdGl2ZSBleHRlbmRzIE5neFBvcHBlcmpzRGlyZWN0aXZlIHtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IHBvcHBlckxvb3NlKG5ld1ZhbHVlOiBzdHJpbmcgfCBOZ3hQb3BwZXJqc0NvbnRlbnRDb21wb25lbnQpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBuZXdWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IHBvcHBlckxvb3NlUGxhY2VtZW50KG5ld1ZhbHVlOiBgJHtOZ3hQb3BwZXJqc1BsYWNlbWVudHN9YCkge1xyXG4gICAgICAgIHRoaXMucGxhY2VtZW50ID0gbmV3VmFsdWUgYXMgTmd4UG9wcGVyanNQbGFjZW1lbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgcG9wcGVyTG9vc2VUcmlnZ2VyKG5ld1ZhbHVlOiBgJHtOZ3hQb3BwZXJqc1RyaWdnZXJzfWApIHtcclxuICAgICAgICB0aGlzLnNob3dUcmlnZ2VyID0gbmV3VmFsdWUgYXMgTmd4UG9wcGVyanNUcmlnZ2VycztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgICAgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgICAgICAgICAgQEluamVjdChOR1hfUE9QUEVSSlNfREVGQVVMVFMpIHBvcHBlckRlZmF1bHRzOiBOZ3hQb3BwZXJqc09wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKGNoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50UmVmLCB2Y3IsIHBvcHBlckRlZmF1bHRzKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19