import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ReactionResponse, UserResponse } from 'stream-chat';
import { ChannelService } from '../channel.service';
import { MessageReactionType, DefaultStreamChatGenerics } from '../types';
import { NgxPopperjsTriggers, NgxPopperjsPlacements } from 'ngx-popperjs';
import { MessageReactionsService } from '../message-reactions.service';
import { CustomTemplatesService } from '../custom-templates.service';
import { ThemeService } from '../theme.service';
import * as i0 from "@angular/core";
/**
 * The `MessageReactions` component displays the reactions of a message, the current user can add and remove reactions. You can read more about [message reactions](https://getstream.io/chat/docs/javascript/send_reaction/?language=javascript) in the platform documentation.
 */
export declare class MessageReactionsComponent implements AfterViewChecked, OnChanges, OnInit, AfterViewInit, OnDestroy {
    private cdRef;
    private channelService;
    private messageReactionsService;
    customTemplatesService: CustomTemplatesService;
    private themeService;
    /**
     * The id of the message the reactions belong to
     */
    messageId: string | undefined;
    /**
     * The number of reactions grouped by [reaction types](https://github.com/GetStream/stream-chat-angular/tree/master/projects/stream-chat-angular/src/lib/message-reactions/message-reactions.component.ts)
     */
    messageReactionCounts: {
        [key in MessageReactionType]?: number;
    };
    /**
     * Indicates if the selector should be opened or closed. Adding a UI element to open and close the selector is the parent's component responsibility.
     */
    isSelectorOpen: boolean;
    /**
     * List of reactions of a [message](../types/stream-message.mdx), used to display the users of a reaction type.
     */
    latestReactions: ReactionResponse<DefaultStreamChatGenerics>[];
    /**
     * List of the user's own reactions of a [message](../types/stream-message.mdx), used to display the users of a reaction type.
     */
    ownReactions: ReactionResponse<DefaultStreamChatGenerics>[];
    /**
     * Indicates if the selector should be opened or closed. Adding a UI element to open and close the selector is the parent's component responsibility.
     */
    readonly isSelectorOpenChange: EventEmitter<boolean>;
    tooltipPositions: {
        arrow: number;
        tooltip: number;
    } | undefined;
    tooltipText: string | undefined;
    private selectorContainer;
    private selectorTooltip;
    currentTooltipTarget: HTMLElement | undefined;
    popperTriggerHover: NgxPopperjsTriggers;
    popperPlacementAuto: NgxPopperjsPlacements;
    selectedReactionType: string | undefined;
    isLoading: boolean;
    reactions: ReactionResponse[];
    shouldHandleReactionClick: boolean;
    existingReactions: string[];
    reactionsCount: number;
    reactionOptions: string[];
    private subscriptions;
    private isViewInited;
    constructor(cdRef: ChangeDetectorRef, channelService: ChannelService, messageReactionsService: MessageReactionsService, customTemplatesService: CustomTemplatesService, themeService: ThemeService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    getLatestUserByReaction(reactionType: MessageReactionType): UserResponse<DefaultStreamChatGenerics> | null | undefined;
    getEmojiByReaction(reactionType: MessageReactionType): string;
    reactionSelected(reactionType: string): void;
    getUsersByReaction(reactionType: MessageReactionType): string;
    getAllUsersByReaction(reactionType?: MessageReactionType): UserResponse<DefaultStreamChatGenerics>[];
    showTooltip(event: Event, reactionType: MessageReactionType): void;
    hideTooltip(): void;
    trackByMessageReaction(index: number, item: MessageReactionType): string;
    trackByUserId(index: number, item: UserResponse): string;
    react(type: MessageReactionType): Promise<void>;
    isOwnReaction(reactionType: MessageReactionType): boolean;
    isOpenChange: (isOpen: boolean) => void;
    private eventHandler;
    private watchForOutsideClicks;
    private stopWatchForOutsideClicks;
    private setTooltipPosition;
    private fetchAllReactions;
    private setExistingReactions;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessageReactionsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MessageReactionsComponent, "stream-message-reactions", never, { "messageId": "messageId"; "messageReactionCounts": "messageReactionCounts"; "isSelectorOpen": "isSelectorOpen"; "latestReactions": "latestReactions"; "ownReactions": "ownReactions"; }, { "isSelectorOpenChange": "isSelectorOpenChange"; }, never, never>;
}
