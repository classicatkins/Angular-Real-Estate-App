import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { CustomTemplatesService } from '../custom-templates.service';
import { CustomMessageActionItem, MessageActionBoxItemContext, MessageActionItem, MessageInputContext, StreamMessage } from '../types';
import { MessageActionsService } from '../message-actions.service';
import * as i0 from "@angular/core";
/**
 * The `MessageActionsBox` component displays a list of message actions (i.e edit), that can be opened or closed. You can find the [list of the supported actions](../concepts/message-interactions.mdx) in the message interaction guide.
 */
export declare class MessageActionsBoxComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {
    readonly customTemplatesService: CustomTemplatesService;
    private messageActionsService;
    private cdRef;
    /**
     * Indicates if the list should be opened or closed. Adding a UI element to open and close the list is the parent's component responsibility.
     * @deprecated No need for this since [theme-v2](../theming/introduction.mdx)
     */
    isOpen: boolean;
    /**
     * Indicates if the message actions are belonging to a message that was sent by the current user or not.
     */
    isMine: boolean;
    /**
     * The message the actions will be executed on
     */
    message: StreamMessage | undefined;
    /**
     * The list of [channel capabilities](https://getstream.io/chat/docs/javascript/channel_capabilities/?language=javascript) that are enabled for the current user, the list of [supported interactions](../concepts/message-interactions.mdx) can be found in our message interaction guide. Unathorized actions won't be displayed on the UI.
     */
    enabledActions: string[];
    /**
     * A list of custom message actions to be displayed in the action box
     *
     * In the next major release this will be released with `messageReactionsService.customActions$`
     *
     * More information: https://getstream.io/chat/docs/sdk/angular/services/MessageActionsService
     */
    customActions: CustomMessageActionItem[];
    /**
     * The number of authorized actions (it can be less or equal than the number of enabled actions)
     *
     * @deprecated components should use `messageReactionsService.getAuthorizedMessageActionsCount` method
     *
     * More information: https://getstream.io/chat/docs/sdk/angular/services/MessageActionsService
     */
    readonly displayedActionsCount: EventEmitter<number>;
    /**
     * An event which emits `true` if the edit message modal is open, and `false` when it is closed.
     *
     * @deprecated components should use `messageReactionsService.messageToEdit$` Observable
     *
     * More information: https://getstream.io/chat/docs/sdk/angular/services/MessageActionsService
     */
    readonly isEditing: EventEmitter<boolean>;
    messageInputTemplate: TemplateRef<MessageInputContext> | undefined;
    messageActionItemTemplate: TemplateRef<MessageActionBoxItemContext> | undefined;
    visibleMessageActionItems: (MessageActionItem | CustomMessageActionItem)[];
    isEditModalOpen: boolean;
    private readonly messageActionItems;
    private subscriptions;
    private isViewInited;
    constructor(customTemplatesService: CustomTemplatesService, messageActionsService: MessageActionsService, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    getActionLabel(actionLabelOrTranslationKey: ((message: StreamMessage) => string) | string): string;
    getMessageActionTemplateContext(item: MessageActionItem | CustomMessageActionItem): MessageActionBoxItemContext<any>;
    trackByActionName(_: number, item: MessageActionItem | CustomMessageActionItem): string;
    private setVisibleActions;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessageActionsBoxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MessageActionsBoxComponent, "stream-message-actions-box", never, { "isOpen": "isOpen"; "isMine": "isMine"; "message": "message"; "enabledActions": "enabledActions"; "customActions": "customActions"; }, { "displayedActionsCount": "displayedActionsCount"; "isEditing": "isEditing"; }, never, never>;
}
