import { OnChanges, SimpleChanges, OnDestroy, OnInit, ChangeDetectorRef, NgZone, AfterViewInit } from '@angular/core';
import { UserResponse } from 'stream-chat';
import { ChannelService } from '../channel.service';
import { ChatClientService } from '../chat-client.service';
import { AttachmentListContext, MentionTemplateContext, MessageActionsBoxContext, MessageReactionsContext, DefaultStreamChatGenerics, StreamMessage, DeliveredStatusContext, SendingStatusContext, ReadStatusContext, CustomMessageActionItem, SystemMessageContext, CustomMetadataContext } from '../types';
import { CustomTemplatesService } from '../custom-templates.service';
import { ThemeService } from '../theme.service';
import { NgxPopperjsTriggers, NgxPopperjsPlacements, NgxPopperjsContentComponent } from 'ngx-popperjs';
import { DateParserService } from '../date-parser.service';
import { MessageService } from '../message.service';
import { MessageActionsService } from '../message-actions.service';
import * as i0 from "@angular/core";
declare type MessagePart = {
    content: string;
    type: 'text' | 'mention';
    user?: UserResponse;
};
/**
 * The `Message` component displays a message with additional information such as sender and date, and enables [interaction with the message (i.e. edit or react)](../concepts/message-interactions.mdx).
 */
export declare class MessageComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {
    private chatClientService;
    private channelService;
    customTemplatesService: CustomTemplatesService;
    private cdRef;
    private dateParser;
    private ngZone;
    private messageService;
    private messageActionsService;
    /**
     * The message to be displayed
     */
    message: StreamMessage | undefined;
    /**
     * The list of [channel capabilities](https://getstream.io/chat/docs/javascript/channel_capabilities/?language=javascript) that are enabled for the current user, the list of [supported interactions](../concepts/message-interactions.mdx) can be found in our message interaction guide. Unathorized actions won't be displayed on the UI. The [`MessageList`](./MessageListComponent.mdx) component automatically sets this based on [channel capabilities](https://getstream.io/chat/docs/javascript/channel_capabilities/?language=javascript).
     */
    enabledMessageActions: string[];
    /**
     * If `true`, the message status (sending, sent, who read the message) is displayed.
     */
    isLastSentMessage: boolean | undefined;
    /**
     * Determines if the message is being dispalyed in a channel or in a [thread](https://getstream.io/chat/docs/javascript/threads/?language=javascript).
     */
    mode: 'thread' | 'main';
    /**
     * Highlighting is used to add visual emphasize to a message when jumping to the message
     */
    isHighlighted: boolean;
    /**
     * A list of custom message actions to be displayed in the action box
     *
     * @deprecated please use the [`MessageActionsService`](https://getstream.io/chat/docs/sdk/angular/services/MessageActionsService) to set this property.
     */
    customActions: CustomMessageActionItem[];
    readonly themeVersion: '1' | '2';
    canReceiveReadEvents: boolean | undefined;
    canReactToMessage: boolean | undefined;
    isActionBoxOpen: boolean;
    isEditedFlagOpened: boolean;
    isReactionSelectorOpen: boolean;
    visibleMessageActionsCount: number;
    messageTextParts: MessagePart[] | undefined;
    messageText?: string;
    popperTriggerClick: NgxPopperjsTriggers;
    popperTriggerHover: NgxPopperjsTriggers;
    popperPlacementAuto: NgxPopperjsPlacements;
    popperPlacementTop: NgxPopperjsPlacements;
    shouldDisplayTranslationNotice: boolean;
    displayedMessageTextContent: 'original' | 'translation';
    imageAttachmentModalState: 'opened' | 'closed';
    shouldDisplayThreadLink: boolean;
    isSentByCurrentUser: boolean;
    readByText: string;
    displayAs: 'text' | 'html';
    lastReadUser: UserResponse<DefaultStreamChatGenerics> | undefined;
    isOnlyReadByMe: boolean;
    isReadByMultipleUsers: boolean;
    isMessageDeliveredAndRead: boolean;
    parsedDate: string;
    pasedEditedDate: string;
    areOptionsVisible: boolean;
    hasAttachment: boolean;
    hasReactions: boolean;
    replyCountParam: {
        replyCount: number | undefined;
    };
    canDisplayReadStatus: boolean;
    private quotedMessageAttachments;
    private subscriptions;
    private isViewInited;
    private userId?;
    private container;
    private readonly urlRegexp;
    private emojiRegexp;
    constructor(chatClientService: ChatClientService, channelService: ChannelService, customTemplatesService: CustomTemplatesService, cdRef: ChangeDetectorRef, themeService: ThemeService, dateParser: DateParserService, ngZone: NgZone, messageService: MessageService, messageActionsService: MessageActionsService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    messageActionsClicked(): void;
    messageActionsBoxClicked(popperContent: NgxPopperjsContentComponent): void;
    getAttachmentListContext(): AttachmentListContext;
    getMessageContext(): SystemMessageContext;
    getQuotedMessageAttachmentListContext(): AttachmentListContext;
    getMessageReactionsContext(): MessageReactionsContext;
    messageClicked(): void;
    resendMessage(): void;
    setAsActiveParentMessage(): void;
    getMentionContext(messagePart: MessagePart): MentionTemplateContext;
    getMessageActionsBoxContext(): MessageActionsBoxContext;
    getDeliveredStatusContext(): DeliveredStatusContext;
    getSendingStatusContext(): SendingStatusContext;
    getReadStatusContext(): ReadStatusContext;
    getMessageMetadataContext(): CustomMetadataContext;
    jumpToMessage(messageId: string, parentMessageId?: string): void;
    displayTranslatedMessage(): void;
    displayOriginalMessage(): void;
    openMessageBouncePrompt(): void;
    private createMessageParts;
    private getMessageContent;
    private fixEmojiDisplay;
    private wrapLinksWithAnchorTag;
    private setIsSentByCurrentUser;
    private setLastReadUser;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessageComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MessageComponent, "stream-message", never, { "message": "message"; "enabledMessageActions": "enabledMessageActions"; "isLastSentMessage": "isLastSentMessage"; "mode": "mode"; "isHighlighted": "isHighlighted"; "customActions": "customActions"; }, {}, never, never>;
}
export {};
