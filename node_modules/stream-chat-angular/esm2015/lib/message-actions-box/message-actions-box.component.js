import { Component, EventEmitter, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../custom-templates.service";
import * as i2 from "../message-actions.service";
import * as i3 from "@angular/common";
import * as i4 from "@ngx-translate/core";
/**
 * The `MessageActionsBox` component displays a list of message actions (i.e edit), that can be opened or closed. You can find the [list of the supported actions](../concepts/message-interactions.mdx) in the message interaction guide.
 */
export class MessageActionsBoxComponent {
    constructor(customTemplatesService, messageActionsService, cdRef) {
        this.customTemplatesService = customTemplatesService;
        this.messageActionsService = messageActionsService;
        this.cdRef = cdRef;
        /**
         * Indicates if the list should be opened or closed. Adding a UI element to open and close the list is the parent's component responsibility.
         * @deprecated No need for this since [theme-v2](../theming/introduction.mdx)
         */
        this.isOpen = false;
        /**
         * Indicates if the message actions are belonging to a message that was sent by the current user or not.
         */
        this.isMine = false;
        /**
         * The list of [channel capabilities](https://getstream.io/chat/docs/javascript/channel_capabilities/?language=javascript) that are enabled for the current user, the list of [supported interactions](../concepts/message-interactions.mdx) can be found in our message interaction guide. Unathorized actions won't be displayed on the UI.
         */
        this.enabledActions = [];
        /**
         * A list of custom message actions to be displayed in the action box
         *
         * In the next major release this will be released with `messageReactionsService.customActions$`
         *
         * More information: https://getstream.io/chat/docs/sdk/angular/services/MessageActionsService
         */
        this.customActions = [];
        /**
         * The number of authorized actions (it can be less or equal than the number of enabled actions)
         *
         * @deprecated components should use `messageReactionsService.getAuthorizedMessageActionsCount` method
         *
         * More information: https://getstream.io/chat/docs/sdk/angular/services/MessageActionsService
         */
        this.displayedActionsCount = new EventEmitter();
        /**
         * An event which emits `true` if the edit message modal is open, and `false` when it is closed.
         *
         * @deprecated components should use `messageReactionsService.messageToEdit$` Observable
         *
         * More information: https://getstream.io/chat/docs/sdk/angular/services/MessageActionsService
         */
        this.isEditing = new EventEmitter();
        this.visibleMessageActionItems = [];
        this.isEditModalOpen = false;
        this.subscriptions = [];
        this.isViewInited = false;
        this.messageActionItems = this.messageActionsService.defaultActions;
    }
    ngOnInit() {
        this.subscriptions.push(this.messageActionsService.messageToEdit$.subscribe((m) => {
            var _a;
            let isEditModalOpen = false;
            if (m && m.id === ((_a = this.message) === null || _a === void 0 ? void 0 : _a.id)) {
                isEditModalOpen = true;
            }
            if (isEditModalOpen !== this.isEditModalOpen) {
                this.isEditModalOpen = isEditModalOpen;
                this.isEditing.emit(this.isEditModalOpen);
                if (this.isViewInited) {
                    this.cdRef.detectChanges();
                }
            }
        }));
    }
    ngOnChanges(changes) {
        if (changes.isMine ||
            changes.enabledActions ||
            changes.message ||
            changes.customActions) {
            this.setVisibleActions();
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    getActionLabel(actionLabelOrTranslationKey) {
        return typeof actionLabelOrTranslationKey === 'string'
            ? actionLabelOrTranslationKey
            : actionLabelOrTranslationKey(this.message);
    }
    getMessageActionTemplateContext(item) {
        return {
            actionHandler: item.actionHandler,
            isMine: this.isMine,
            actionName: item.actionName,
            message: this.message,
            actionLabelOrTranslationKey: item.actionLabelOrTranslationKey,
        };
    }
    trackByActionName(_, item) {
        return item.actionName;
    }
    setVisibleActions() {
        this.visibleMessageActionItems = [
            ...this.messageActionItems,
            ...this.customActions,
        ].filter((item) => item.isVisible(this.enabledActions, this.isMine, this.message));
        this.displayedActionsCount.emit(this.visibleMessageActionItems.length);
    }
}
MessageActionsBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageActionsBoxComponent, deps: [{ token: i1.CustomTemplatesService }, { token: i2.MessageActionsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MessageActionsBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: MessageActionsBoxComponent, selector: "stream-message-actions-box", inputs: { isOpen: "isOpen", isMine: "isMine", message: "message", enabledActions: "enabledActions", customActions: "customActions" }, outputs: { displayedActionsCount: "displayedActionsCount", isEditing: "isEditing" }, usesOnChanges: true, ngImport: i0, template: "<div\n  #actionBox\n  data-testid=\"action-box\"\n  class=\"str-chat__message-actions-box str-chat__message-actions-box-angular\"\n  [class.str-chat__message-actions-box--open]=\"true\"\n>\n  <ul class=\"str-chat__message-actions-list\">\n    <ng-container\n      *ngFor=\"let item of visibleMessageActionItems; trackBy: trackByActionName\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"\n          (customTemplatesService.messageActionsBoxItemTemplate$ | async) ||\n            defaultMessageActionItem;\n          context: getMessageActionTemplateContext(item)\n        \"\n      ></ng-container>\n    </ng-container>\n  </ul>\n</div>\n\n<ng-template\n  #defaultMessageActionItem\n  let-actionName=\"actionName\"\n  let-actionHandler=\"actionHandler\"\n  let-actionLabelOrTranslationKey=\"actionLabelOrTranslationKey\"\n>\n  <button\n    class=\"str-chat__message-actions-list-item-button\"\n    [attr.data-testid]=\"actionName + '-action'\"\n    (click)=\"actionHandler(message, isMine)\"\n  >\n    <li class=\"str-chat__message-actions-list-item\">\n      {{ getActionLabel(actionLabelOrTranslationKey) | translate }}\n    </li>\n  </button>\n</ng-template>\n", directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i3.AsyncPipe, "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageActionsBoxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-message-actions-box',
                    templateUrl: './message-actions-box.component.html',
                    styles: [],
                }]
        }], ctorParameters: function () { return [{ type: i1.CustomTemplatesService }, { type: i2.MessageActionsService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { isOpen: [{
                type: Input
            }], isMine: [{
                type: Input
            }], message: [{
                type: Input
            }], enabledActions: [{
                type: Input
            }], customActions: [{
                type: Input
            }], displayedActionsCount: [{
                type: Output
            }], isEditing: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,