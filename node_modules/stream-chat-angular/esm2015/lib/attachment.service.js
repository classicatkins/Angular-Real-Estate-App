import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { isImageFile } from './is-image-file';
import { BehaviorSubject } from 'rxjs';
import { isImageAttachment } from './is-image-attachment';
import * as i0 from "@angular/core";
import * as i1 from "./channel.service";
import * as i2 from "./notification.service";
/**
 * The `AttachmentService` manages the uploads of a message input.
 */
export class AttachmentService {
    constructor(channelService, notificationService) {
        this.channelService = channelService;
        this.notificationService = notificationService;
        this.attachmentUploadInProgressCounterSubject = new BehaviorSubject(0);
        this.attachmentUploadsSubject = new BehaviorSubject([]);
        this.attachmentUploadInProgressCounter$ =
            this.attachmentUploadInProgressCounterSubject.asObservable();
        this.attachmentUploads$ = this.attachmentUploadsSubject.asObservable();
    }
    /**
     * Resets the attachments uploads (for example after the message with the attachments sent successfully)
     */
    resetAttachmentUploads() {
        this.attachmentUploadsSubject.next([]);
    }
    /**
     * Uploads the selected files, and creates preview for image files. The result is propagated throught the `attachmentUploads$` stream.
     * @param fileList The files selected by the user
     * @returns A promise with the result
     */
    filesSelected(fileList) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!fileList) {
                return;
            }
            const imageFiles = [];
            const dataFiles = [];
            const videoFiles = [];
            Array.from(fileList).forEach((file) => {
                if (isImageFile(file)) {
                    imageFiles.push(file);
                }
                else if (file.type.startsWith('video/')) {
                    videoFiles.push(file);
                }
                else {
                    dataFiles.push(file);
                }
            });
            imageFiles.forEach((f) => this.createPreview(f));
            const newUploads = [
                ...imageFiles.map((file) => ({
                    file,
                    state: 'uploading',
                    type: 'image',
                })),
                ...videoFiles.map((file) => ({
                    file,
                    state: 'uploading',
                    type: 'video',
                })),
                ...dataFiles.map((file) => ({
                    file,
                    state: 'uploading',
                    type: 'file',
                })),
            ];
            this.attachmentUploadsSubject.next([
                ...this.attachmentUploadsSubject.getValue(),
                ...newUploads,
            ]);
            yield this.uploadAttachments(newUploads);
        });
    }
    /**
     * You can add custom `image`, `video` and `file` attachments using this method.
     *
     * Note: If you just want to use your own CDN for file uploads, you don't necessary need this method, you can just specify you own upload function in the [`ChannelService`](./ChannelService.mdx)
     *
     * @param attachment
     */
    addAttachment(attachment) {
        attachment.isCustomAttachment = true;
        this.createFromAttachments([attachment]);
    }
    /**
     * Retries to upload an attachment.
     * @param file
     * @returns A promise with the result
     */
    retryAttachmentUpload(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const attachmentUploads = this.attachmentUploadsSubject.getValue();
            const upload = attachmentUploads.find((u) => u.file === file);
            if (!upload) {
                return;
            }
            upload.state = 'uploading';
            this.attachmentUploadsSubject.next([...attachmentUploads]);
            yield this.uploadAttachments([upload]);
        });
    }
    /**
     * Deletes an attachment, the attachment can have any state (`error`, `uploading` or `success`).
     * @param upload
     */
    deleteAttachment(upload) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const attachmentUploads = this.attachmentUploadsSubject.getValue();
            let result;
            if (upload.state === 'success' &&
                !((_a = upload.fromAttachment) === null || _a === void 0 ? void 0 : _a.isCustomAttachment)) {
                try {
                    yield this.channelService.deleteAttachment(upload);
                    result = [...attachmentUploads];
                    const index = attachmentUploads.indexOf(upload);
                    result.splice(index, 1);
                }
                catch (error) {
                    result = attachmentUploads;
                    this.notificationService.addTemporaryNotification('streamChat.Error deleting attachment');
                }
            }
            else {
                result = [...attachmentUploads];
                const index = attachmentUploads.indexOf(upload);
                result.splice(index, 1);
            }
            this.attachmentUploadsSubject.next([...result]);
        });
    }
    /**
     * Maps the current uploads to a format that can be sent along with the message to the Stream API.
     * @returns the attachments
     */
    mapToAttachments() {
        const attachmentUploads = this.attachmentUploadsSubject.getValue();
        return attachmentUploads
            .filter((r) => r.state === 'success')
            .map((r) => {
            var _a, _b, _c, _d;
            const attachment = {
                type: r.type,
            };
            if (r.fromAttachment) {
                return r.fromAttachment;
            }
            else {
                attachment.mime_type = (_a = r.file) === null || _a === void 0 ? void 0 : _a.type;
                if (r.type === 'image') {
                    attachment.fallback = (_b = r.file) === null || _b === void 0 ? void 0 : _b.name;
                    attachment.image_url = r.url;
                }
                else {
                    attachment.asset_url = r.url;
                    attachment.title = (_c = r.file) === null || _c === void 0 ? void 0 : _c.name;
                    attachment.file_size = (_d = r.file) === null || _d === void 0 ? void 0 : _d.size;
                    attachment.thumb_url = r.thumb_url;
                }
            }
            return attachment;
        });
    }
    /**
     * Maps attachments received from the Stream API to uploads. This is useful when editing a message.
     * @param attachments Attachemnts received with the message
     */
    createFromAttachments(attachments) {
        const attachmentUploads = [];
        attachments.forEach((attachment) => {
            if (isImageAttachment(attachment)) {
                attachmentUploads.push({
                    url: (attachment.img_url ||
                        attachment.thumb_url ||
                        attachment.image_url),
                    state: 'success',
                    type: 'image',
                    file: {
                        name: attachment.fallback,
                        type: attachment.mime_type,
                    },
                    fromAttachment: attachment,
                });
            }
            else if (attachment.type === 'file' || attachment.type === 'video') {
                attachmentUploads.push({
                    url: attachment.asset_url,
                    state: 'success',
                    file: {
                        name: attachment.title,
                        size: attachment.file_size,
                        type: attachment.mime_type,
                    },
                    type: attachment.type,
                    thumb_url: attachment.thumb_url,
                    fromAttachment: attachment,
                });
            }
        });
        if (attachmentUploads.length > 0) {
            this.attachmentUploadsSubject.next([
                ...this.attachmentUploadsSubject.getValue(),
                ...attachmentUploads,
            ]);
        }
    }
    createPreview(file) {
        const reader = new FileReader();
        reader.onload = (event) => {
            var _a;
            const attachmentUploads = this.attachmentUploadsSubject.getValue();
            const upload = attachmentUploads.find((upload) => upload.file === file);
            if (!upload) {
                return;
            }
            upload.previewUri = ((_a = event.target) === null || _a === void 0 ? void 0 : _a.result) || undefined;
            this.attachmentUploadsSubject.next([...attachmentUploads]);
        };
        reader.readAsDataURL(file);
    }
    uploadAttachments(uploads) {
        return __awaiter(this, void 0, void 0, function* () {
            this.attachmentUploadInProgressCounterSubject.next(this.attachmentUploadInProgressCounterSubject.getValue() + 1);
            const result = yield this.channelService.uploadAttachments(uploads);
            const attachmentUploads = this.attachmentUploadsSubject.getValue();
            result.forEach((r) => {
                var _a, _b, _c, _d;
                const upload = attachmentUploads.find((upload) => upload.file === r.file);
                if (!upload) {
                    if (r.url) {
                        void this.channelService.deleteAttachment(r);
                    }
                    return;
                }
                upload.state = r.state;
                upload.url = r.url;
                upload.thumb_url = r.thumb_url;
                if (upload.state === 'error') {
                    upload.errorReason = r.errorReason;
                    upload.errorExtraInfo = r.errorExtraInfo;
                    let errorKey;
                    const translateParams = { name: upload.file.name };
                    switch (upload.errorReason) {
                        case 'file-extension':
                            errorKey =
                                'streamChat.Error uploading file, extension not supported';
                            translateParams.ext = (_b = (_a = upload.errorExtraInfo) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.param;
                            break;
                        case 'file-size':
                            errorKey =
                                'streamChat.Error uploading file, maximum file size exceeded';
                            translateParams.limit = (_d = (_c = upload.errorExtraInfo) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.param;
                            break;
                        default:
                            errorKey = 'streamChat.Error uploading file';
                    }
                    this.notificationService.addTemporaryNotification(errorKey, 'error', undefined, translateParams);
                }
            });
            this.attachmentUploadInProgressCounterSubject.next(this.attachmentUploadInProgressCounterSubject.getValue() - 1);
            this.attachmentUploadsSubject.next([...attachmentUploads]);
        });
    }
}
AttachmentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AttachmentService, deps: [{ token: i1.ChannelService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
AttachmentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AttachmentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AttachmentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,