import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * The `MessageReactionsService` provides customization options to message [reactions](https://getstream.io/chat/docs/javascript/send_reaction/?language=javascript).
 *
 */
export class MessageReactionsService {
    constructor() {
        /**
         * The enabled [reactions](https://getstream.io/chat/docs/javascript/send_reaction/?language=javascript) and the associated emoji
         *
         * You can provide any string as a reaction. The emoji can be provided as a string, if you want to use custom images for reactions you have to provide a [custom reactions UI](../../services/CustomTemplatesService/#messagereactionstemplate)
         */
        this.reactions$ = new BehaviorSubject({
            like: 'üëç',
            angry: 'üò†',
            love: '‚ù§Ô∏è',
            haha: 'üòÇ',
            wow: 'üòÆ',
            sad: 'üòû',
        });
    }
    /**
     * Sets the enabled reactions
     */
    set reactions(reactions) {
        this.reactions$.next(reactions);
    }
    /**
     * Get the currently enabled reactions
     */
    get reactions() {
        return this.reactions$.getValue();
    }
}
MessageReactionsService.…µfac = i0.…µ…µngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageReactionsService, deps: [], target: i0.…µ…µFactoryTarget.Injectable });
MessageReactionsService.…µprov = i0.…µ…µngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageReactionsService, providedIn: 'root' });
i0.…µ…µngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageReactionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1yZWFjdGlvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9tZXNzYWdlLXJlYWN0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFFdkM7OztHQUdHO0FBSUgsTUFBTSxPQUFPLHVCQUF1QjtJQXFCbEM7UUFwQkE7Ozs7V0FJRztRQUNILGVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBMkM7WUFDekUsSUFBSSxFQUFFLElBQUk7WUFDVixLQUFLLEVBQUUsSUFBSTtZQUNYLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7WUFDVixHQUFHLEVBQUUsSUFBSTtZQUNULEdBQUcsRUFBRSxJQUFJO1NBQ1YsQ0FBQyxDQUFDO0lBUVksQ0FBQztJQUVoQjs7T0FFRztJQUNILElBQUksU0FBUyxDQUFDLFNBQW1EO1FBQy9ELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQyxDQUFDOztvSEFuQ1UsdUJBQXVCO3dIQUF2Qix1QkFBdUIsY0FGdEIsTUFBTTsyRkFFUCx1QkFBdUI7a0JBSG5DLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWVzc2FnZVJlYWN0aW9uQ2xpY2tEZXRhaWxzLCBNZXNzYWdlUmVhY3Rpb25UeXBlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBUaGUgYE1lc3NhZ2VSZWFjdGlvbnNTZXJ2aWNlYCBwcm92aWRlcyBjdXN0b21pemF0aW9uIG9wdGlvbnMgdG8gbWVzc2FnZSBbcmVhY3Rpb25zXShodHRwczovL2dldHN0cmVhbS5pby9jaGF0L2RvY3MvamF2YXNjcmlwdC9zZW5kX3JlYWN0aW9uLz9sYW5ndWFnZT1qYXZhc2NyaXB0KS5cbiAqXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBNZXNzYWdlUmVhY3Rpb25zU2VydmljZSB7XG4gIC8qKlxuICAgKiBUaGUgZW5hYmxlZCBbcmVhY3Rpb25zXShodHRwczovL2dldHN0cmVhbS5pby9jaGF0L2RvY3MvamF2YXNjcmlwdC9zZW5kX3JlYWN0aW9uLz9sYW5ndWFnZT1qYXZhc2NyaXB0KSBhbmQgdGhlIGFzc29jaWF0ZWQgZW1vamlcbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGFueSBzdHJpbmcgYXMgYSByZWFjdGlvbi4gVGhlIGVtb2ppIGNhbiBiZSBwcm92aWRlZCBhcyBhIHN0cmluZywgaWYgeW91IHdhbnQgdG8gdXNlIGN1c3RvbSBpbWFnZXMgZm9yIHJlYWN0aW9ucyB5b3UgaGF2ZSB0byBwcm92aWRlIGEgW2N1c3RvbSByZWFjdGlvbnMgVUldKC4uLy4uL3NlcnZpY2VzL0N1c3RvbVRlbXBsYXRlc1NlcnZpY2UvI21lc3NhZ2VyZWFjdGlvbnN0ZW1wbGF0ZSlcbiAgICovXG4gIHJlYWN0aW9ucyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHsgW2tleSBpbiBNZXNzYWdlUmVhY3Rpb25UeXBlXTogc3RyaW5nIH0+KHtcbiAgICBsaWtlOiAn8J+RjScsXG4gICAgYW5ncnk6ICfwn5igJyxcbiAgICBsb3ZlOiAn4p2k77iPJyxcbiAgICBoYWhhOiAn8J+YgicsXG4gICAgd293OiAn8J+YricsXG4gICAgc2FkOiAn8J+YnicsXG4gIH0pO1xuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgW2BNZXNzYWdlUmVhY3Rpb25zQ29tcG9uZW50YF0oLi4vLi4vY29tcG9uZW50cy9NZXNzYWdlUmVhY3Rpb25zQ29tcG9uZW50KSB3aWxsIGRpc3BsYXkgdGhlIHJlYWN0aW5nIHVzZXJzIHdoZW4gYSByZWFjdGlvbiBpcyBjbGlja2VkLiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgd2l0aCB5b3VyIG93biBVSSBieSBwcm92aWRpbmcgYSBjdXN0b20gZXZlbnQgaGFuZGxlci5cbiAgICpcbiAgICogVGhlIGV2ZW50IGhhbmRsZXIgY2FuIHJldHJpZXZlIGFsbCByZWFjdGlvbnMgb2YgYSBtZXNzYWdlIGluc2lkZSB0aGUgYWN0aXZlIGNoYW5uZWwgdXNpbmcgdGhlIFtgY2hhbm5lbFNlcnZpY2UuZ2V0TWVzc2FnZVJlYWN0aW9uc2AgbWV0aG9kXSguLi8uLi9zZXJ2aWNlcy9DaGFubmVsU2VydmljZS8jZ2V0bWVzc2FnZXJlYWN0aW9ucylcbiAgICovXG4gIGN1c3RvbVJlYWN0aW9uQ2xpY2tIYW5kbGVyPzogKGRldGFpbHM6IE1lc3NhZ2VSZWFjdGlvbkNsaWNrRGV0YWlscykgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGVuYWJsZWQgcmVhY3Rpb25zXG4gICAqL1xuICBzZXQgcmVhY3Rpb25zKHJlYWN0aW9uczogeyBba2V5IGluIE1lc3NhZ2VSZWFjdGlvblR5cGVdOiBzdHJpbmcgfSkge1xuICAgIHRoaXMucmVhY3Rpb25zJC5uZXh0KHJlYWN0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50bHkgZW5hYmxlZCByZWFjdGlvbnNcbiAgICovXG4gIGdldCByZWFjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhY3Rpb25zJC5nZXRWYWx1ZSgpO1xuICB9XG59XG4iXX0=