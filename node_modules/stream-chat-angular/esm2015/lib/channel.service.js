import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, ReplaySubject, } from 'rxjs';
import { filter, first, map, shareReplay, take } from 'rxjs/operators';
import { getMessageTranslation } from './get-message-translation';
import { createMessagePreview } from './message-preview';
import { getReadBy } from './read-by';
import * as i0 from "@angular/core";
import * as i1 from "./chat-client.service";
import * as i2 from "./notification.service";
/**
 * The `ChannelService` provides data and interaction for the channel list and message list.
 */
export class ChannelService {
    constructor(chatClientService, ngZone, notificationService) {
        this.chatClientService = chatClientService;
        this.ngZone = ngZone;
        this.notificationService = notificationService;
        this.channelsSubject = new BehaviorSubject(undefined);
        this.activeChannelSubject = new BehaviorSubject(undefined);
        this.activeChannelMessagesSubject = new BehaviorSubject([]);
        this.activeChannelPinnedMessagesSubject = new BehaviorSubject([]);
        this.hasMoreChannelsSubject = new ReplaySubject(1);
        this.activeChannelSubscriptions = [];
        this.channelSubscriptions = {};
        this.activeParentMessageIdSubject = new BehaviorSubject(undefined);
        this.activeThreadMessagesSubject = new BehaviorSubject([]);
        this.jumpToMessageSubject = new BehaviorSubject({ id: undefined, parentId: undefined });
        this.latestMessageDateByUserByChannelsSubject = new BehaviorSubject({});
        this.messagePageSize = 25;
        this.messageToQuoteSubject = new BehaviorSubject(undefined);
        this.usersTypingInChannelSubject = new BehaviorSubject([]);
        this.usersTypingInThreadSubject = new BehaviorSubject([]);
        this._shouldMarkActiveChannelAsRead = true;
        this.isStateRecoveryInProgress = false;
        this.channelQueryStateSubject = new BehaviorSubject(undefined);
        this.channelListSetter = (channels, shouldStopWatchingRemovedChannels = true) => {
            const currentChannels = this.channelsSubject.getValue() || [];
            const newChannels = channels.filter((c) => !currentChannels.find((channel) => channel.cid === c.cid));
            const deletedChannels = currentChannels.filter((c) => !(channels === null || channels === void 0 ? void 0 : channels.find((channel) => channel.cid === c.cid)));
            void this.addChannelsFromNotification(newChannels);
            this.removeChannelsFromChannelList(deletedChannels.map((c) => c.cid), shouldStopWatchingRemovedChannels);
        };
        this.messageListSetter = (messages) => {
            this.activeChannelMessagesSubject.next(messages);
        };
        this.threadListSetter = (messages) => {
            this.activeThreadMessagesSubject.next(messages);
        };
        this.parentMessageSetter = (message) => {
            this.activeParentMessageIdSubject.next(message === null || message === void 0 ? void 0 : message.id);
        };
        this.areReadEventsPaused = false;
        this.channels$ = this.channelsSubject.asObservable().pipe(shareReplay(1));
        this.activeChannel$ = this.activeChannelSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.activeChannelMessages$ = this.activeChannelMessagesSubject.pipe(map((messages) => {
            const channel = this.activeChannelSubject.getValue();
            return messages.map((message) => this.transformToStreamMessage(message, channel));
        }), shareReplay(1));
        this.bouncedMessage$ = new BehaviorSubject(undefined);
        this.hasMoreChannels$ = this.hasMoreChannelsSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.activeParentMessageId$ = this.activeParentMessageIdSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.activeThreadMessages$ = this.activeThreadMessagesSubject.pipe(map((messages) => {
            const channel = this.activeChannelSubject.getValue();
            return messages.map((message) => this.transformToStreamMessage(message, channel));
        }), shareReplay(1));
        this.activeParentMessage$ = combineLatest([
            this.activeChannelMessages$,
            this.activeParentMessageId$,
        ]).pipe(map(([messages, parentMessageId]) => {
            if (!parentMessageId) {
                return undefined;
            }
            else {
                const message = messages.find((m) => m.id === parentMessageId);
                if (!message) {
                    void this.setAsActiveParentMessage(undefined);
                    return undefined;
                }
                else {
                    return message;
                }
            }
        }), shareReplay(1));
        this.messageToQuote$ = this.messageToQuoteSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.jumpToMessage$ = this.jumpToMessageSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.usersTypingInChannel$ = this.usersTypingInChannelSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.usersTypingInThread$ = this.usersTypingInThreadSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.latestMessageDateByUserByChannels$ =
            this.latestMessageDateByUserByChannelsSubject
                .asObservable()
                .pipe(shareReplay(1));
        this.activeChannelPinnedMessages$ = this.activeChannelPinnedMessagesSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.channelQueryState$ = this.channelQueryStateSubject
            .asObservable()
            .pipe(shareReplay(1));
    }
    /**
     * If set to false, read events won't be sent as new messages are received. If set to true active channel (if any) will immediately be marked as read.
     */
    get shouldMarkActiveChannelAsRead() {
        return this._shouldMarkActiveChannelAsRead;
    }
    /**
     * If set to false, read events won't be sent as new messages are received. If set to true active channel (if any) will immediately be marked as read.
     */
    set shouldMarkActiveChannelAsRead(shouldMarkActiveChannelAsRead) {
        if (!this._shouldMarkActiveChannelAsRead && shouldMarkActiveChannelAsRead) {
            const activeChannel = this.activeChannelSubject.getValue();
            if (activeChannel && this.canSendReadEvents) {
                void activeChannel.markRead();
            }
        }
        this._shouldMarkActiveChannelAsRead = shouldMarkActiveChannelAsRead;
    }
    /**
     * Sets the given `channel` as active and marks it as read.
     * If the channel wasn't previously part of the channel, it will be added to the beginning of the list.
     *
     * @param channel
     */
    setAsActiveChannel(channel) {
        var _a, _b;
        const prevActiveChannel = this.activeChannelSubject.getValue();
        if ((prevActiveChannel === null || prevActiveChannel === void 0 ? void 0 : prevActiveChannel.cid) === channel.cid) {
            return;
        }
        this.stopWatchForActiveChannelEvents(prevActiveChannel);
        this.areReadEventsPaused = false;
        const readState = channel.state.read[((_a = this.chatClientService.chatClient.user) === null || _a === void 0 ? void 0 : _a.id) || ''];
        this.activeChannelLastReadMessageId = readState === null || readState === void 0 ? void 0 : readState.last_read_message_id;
        if (((_b = channel.state.latestMessages[channel.state.latestMessages.length - 1]) === null || _b === void 0 ? void 0 : _b.id) === this.activeChannelLastReadMessageId) {
            this.activeChannelLastReadMessageId = undefined;
        }
        this.activeChannelUnreadCount = (readState === null || readState === void 0 ? void 0 : readState.unread_messages) || 0;
        this.watchForActiveChannelEvents(channel);
        this.addChannel(channel);
        this.activeChannelSubject.next(channel);
        const channelStateLength = channel.state.latestMessages.length;
        if (channelStateLength > 2 * this.messagePageSize) {
            channel.state.latestMessages = channel.state.latestMessages.slice(channelStateLength - 2 * this.messagePageSize);
        }
        this.setChannelState(channel);
    }
    /**
     * Deselects the currently active (if any) channel
     */
    deselectActiveChannel() {
        const activeChannel = this.activeChannelSubject.getValue();
        if (!activeChannel) {
            return;
        }
        this.stopWatchForActiveChannelEvents(activeChannel);
        this.activeChannelMessagesSubject.next([]);
        this.activeChannelSubject.next(undefined);
        this.activeParentMessageIdSubject.next(undefined);
        this.activeThreadMessagesSubject.next([]);
        this.latestMessageDateByUserByChannelsSubject.next({});
        this.selectMessageToQuote(undefined);
        this.jumpToMessageSubject.next({ id: undefined, parentId: undefined });
        this.activeChannelPinnedMessagesSubject.next([]);
        this.usersTypingInChannelSubject.next([]);
        this.usersTypingInThreadSubject.next([]);
        this.activeChannelLastReadMessageId = undefined;
        this.activeChannelUnreadCount = undefined;
        this.areReadEventsPaused = false;
    }
    /**
     * Sets the given `message` as an active parent message. If `undefined` is provided, it will deleselect the current parent message.
     * @param message
     * @param loadMessagesForm
     */
    setAsActiveParentMessage(message, loadMessagesForm = 'request') {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const messageToQuote = this.messageToQuoteSubject.getValue();
            if (messageToQuote && !!messageToQuote.parent_id) {
                this.messageToQuoteSubject.next(undefined);
            }
            if (!message) {
                this.activeParentMessageIdSubject.next(undefined);
                this.activeThreadMessagesSubject.next([]);
                const messageToJumpTo = this.jumpToMessageSubject.getValue();
                if (messageToJumpTo && !!messageToJumpTo.parentId) {
                    this.jumpToMessageSubject.next({ id: undefined, parentId: undefined });
                }
            }
            else {
                this.activeParentMessageIdSubject.next(message.id);
                const activeChannel = this.activeChannelSubject.getValue();
                if (loadMessagesForm === 'request') {
                    const result = yield (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.getReplies(message.id, {
                        limit: (_a = this.options) === null || _a === void 0 ? void 0 : _a.message_limit,
                    }));
                    this.activeThreadMessagesSubject.next((result === null || result === void 0 ? void 0 : result.messages) || []);
                }
                else {
                    this.activeThreadMessagesSubject.next((activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.state.threads[message.id]) || []);
                }
            }
        });
    }
    /**
     * Loads the next page of messages of the active channel. The page size can be set in the [query option](https://getstream.io/chat/docs/javascript/query_channels/?language=javascript#query-options) object.
     * @param direction
     */
    loadMoreMessages(direction = 'older') {
        var _a, _b, _c, _d;
        const activeChnannel = this.activeChannelSubject.getValue();
        const messages = this.activeChannelMessagesSubject.getValue();
        const lastMessageId = (_a = messages[direction === 'older' ? 0 : messages.length - 1]) === null || _a === void 0 ? void 0 : _a.id;
        if (direction === 'newer' &&
            ((_b = activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.state) === null || _b === void 0 ? void 0 : _b.latestMessages) === ((_c = activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.state) === null || _c === void 0 ? void 0 : _c.messages)) {
            // If we are on latest message set, activeChannelMessages$ will be refreshed by WS events, no need for a request
            return false;
        }
        return activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.query({
            messages: {
                limit: (_d = this.options) === null || _d === void 0 ? void 0 : _d.message_limit,
                [direction === 'older' ? 'id_lt' : 'id_gt']: lastMessageId,
            },
            members: { limit: 0 },
            watchers: { limit: 0 },
        }).then((res) => {
            var _a, _b, _c;
            if (((_a = activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.data) === null || _a === void 0 ? void 0 : _a.id) ===
                ((_c = (_b = this.activeChannelSubject.getValue()) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.id)) {
                this.activeChannelMessagesSubject.next([
                    ...activeChnannel.state.messages,
                ]);
            }
            return res;
        });
    }
    /**
     * Loads the next page of messages of the active thread. The page size can be set in the [query option](https://getstream.io/chat/docs/javascript/query_channels/?language=javascript#query-options) object.
     * @param direction
     */
    loadMoreThreadReplies(direction = 'older') {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (direction === 'newer') {
                // Thread replies aren't broke into different message sets, activeThreadMessages$ will be refreshed by WS events, no need for a request
                return;
            }
            const activeChnannel = this.activeChannelSubject.getValue();
            const parentMessageId = this.activeParentMessageIdSubject.getValue();
            if (!parentMessageId) {
                return;
            }
            const threadMessages = this.activeThreadMessagesSubject.getValue();
            const lastMessageId = (_a = threadMessages[direction === 'older' ? 0 : threadMessages.length - 1]) === null || _a === void 0 ? void 0 : _a.id;
            yield (activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.getReplies(parentMessageId, {
                limit: (_b = this.options) === null || _b === void 0 ? void 0 : _b.message_limit,
                [direction === 'older' ? 'id_lt' : 'id_gt']: lastMessageId,
            }));
            this.activeThreadMessagesSubject.next((activeChnannel === null || activeChnannel === void 0 ? void 0 : activeChnannel.state.threads[parentMessageId]) || []);
        });
    }
    /**
     * Queries the channels with the given filters, sorts and options. More info about [channel querying](https://getstream.io/chat/docs/javascript/query_channels/?language=javascript) can be found in the platform documentation. By default the first channel in the list will be set as active channel and will be marked as read.
     * @param filters
     * @param sort
     * @param options
     * @param shouldSetActiveChannel Decides if the first channel in the result should be made as an active channel, or no channel should be marked as active
     * @returns the list of channels found by the query
     */
    init(filters, sort, options, shouldSetActiveChannel = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this.filters = filters;
            this.options = Object.assign({ limit: 25, state: true, presence: true, watch: true, message_limit: this.messagePageSize }, options);
            this.sort = sort || { last_message_at: -1 };
            this.shouldSetActiveChannel = shouldSetActiveChannel;
            this.clientEventsSubscription = this.chatClientService.events$.subscribe((notification) => void this.handleNotification(notification));
            try {
                const result = yield this.queryChannels(this.shouldSetActiveChannel);
                return result;
            }
            catch (error) {
                this.dismissErrorNotification =
                    this.notificationService.addPermanentNotification('streamChat.Error loading channels', 'error');
                throw error;
            }
        });
    }
    /**
     * Resets the `activeChannel$`, `channels$` and `activeChannelMessages$` Observables. Useful when disconnecting a chat user, use in combination with [`disconnectUser`](./ChatClientService.mdx/#disconnectuser).
     */
    reset() {
        var _a, _b;
        this.deselectActiveChannel();
        this.channelsSubject.next(undefined);
        this.channelQueryStateSubject.next(undefined);
        (_a = this.clientEventsSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this.dismissErrorNotification) === null || _b === void 0 ? void 0 : _b.call(this);
        this.dismissErrorNotification = undefined;
        Object.keys(this.channelSubscriptions).forEach((cid) => {
            this.channelSubscriptions[cid]();
        });
        this.channelSubscriptions = {};
        this.nextPageConfiguration = undefined;
    }
    /**
     * Loads the next page of channels. The page size can be set in the [query option](https://getstream.io/chat/docs/javascript/query_channels/?language=javascript#query-options) object.
     */
    loadMoreChannels() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.queryChannels(false);
        });
    }
    /**
     * Adds a reaction to a message.
     * @param messageId The id of the message to add the reaction to
     * @param reactionType The type of the reaction
     * @param customData
     */
    addReaction(messageId, reactionType, customData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.activeChannelSubject.getValue()) === null || _a === void 0 ? void 0 : _a.sendReaction(messageId, Object.assign({ type: reactionType }, customData)));
        });
    }
    /**
     * Removes a reaction from a message.
     * @param messageId The id of the message to remove the reaction from
     * @param reactionType Thr type of reaction to remove
     */
    removeReaction(messageId, reactionType) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.activeChannelSubject
                .getValue()) === null || _a === void 0 ? void 0 : _a.deleteReaction(messageId, reactionType));
        });
    }
    /**
     * Sends a message to the active channel. The message is immediately added to the message list, if an error occurs and the message can't be sent, the error is indicated in `state` of the message.
     * @param text The text of the message
     * @param attachments The attachments
     * @param mentionedUsers Mentioned users
     * @param parentId Id of the parent message (if sending a thread reply)
     * @param quotedMessageId Id of the message to quote (if sending a quote reply)
     * @param customData
     */
    sendMessage(text, attachments = [], mentionedUsers = [], parentId = undefined, quotedMessageId = undefined, customData = undefined) {
        return __awaiter(this, void 0, void 0, function* () {
            let input = {
                text,
                attachments,
                mentionedUsers,
                parentId,
                quotedMessageId,
                customData,
            };
            if (this.beforeSendMessage) {
                input = yield this.beforeSendMessage(input);
            }
            const preview = createMessagePreview(this.chatClientService.chatClient.user, input.text, input.attachments, input.mentionedUsers, input.parentId, input.quotedMessageId, input.customData);
            const channel = this.activeChannelSubject.getValue();
            preview.readBy = [];
            channel.state.addMessageSorted(preview, true);
            const response = yield this.sendMessageRequest(preview, input.customData);
            return response;
        });
    }
    /**
     * Resends the given message to the active channel
     * @param message The message to resend
     */
    resendMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const channel = this.activeChannelSubject.getValue();
            channel.state.addMessageSorted(Object.assign(Object.assign({}, message), { errorStatusCode: undefined, status: 'sending' }), true);
            return this.sendMessageRequest(message, undefined, true);
        });
    }
    /**
     * Updates the message in the active channel
     * @param message Mesage to be updated
     */
    updateMessage(message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let messageToUpdate = Object.assign({}, message);
            delete messageToUpdate.i18n;
            if (this.beforeUpdateMessage) {
                messageToUpdate = yield this.beforeUpdateMessage(messageToUpdate);
            }
            if (message.moderation_details) {
                return this.resendMessage(message);
            }
            const response = yield this.chatClientService.chatClient.updateMessage(messageToUpdate);
            const channel = (_a = this.channelsSubject
                .getValue()) === null || _a === void 0 ? void 0 : _a.find((c) => c.cid === message.cid);
            if (response.message.type === 'error' &&
                response.message.moderation_details) {
                this.notificationService.addTemporaryNotification('streamChat.This message did not meet our content guidelines');
                return message;
            }
            return this.transformToStreamMessage(response.message, channel);
        });
    }
    /**
     * Deletes the message from the active channel
     * @param message Message to be deleted
     * @param isLocalDelete set this `true` if you want to delete a message that's only part of the local state, not yet saved on the backend
     */
    deleteMessage(message, isLocalDelete = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isLocalDelete && this.activeChannel) {
                const result = this.activeChannel.state.removeMessage({
                    id: message.id,
                    parent_id: message.parent_id,
                });
                if (result) {
                    message.parent_id
                        ? this.activeThreadMessagesSubject.next(this.activeChannel.state.threads[message.parent_id])
                        : this.activeChannelMessagesSubject.next(this.activeChannel.state.messages);
                }
                return;
            }
            if (this.messageDeleteConfirmationHandler) {
                const result = yield this.messageDeleteConfirmationHandler(message);
                if (result) {
                    yield this.chatClientService.chatClient.deleteMessage(message.id);
                }
            }
            else {
                yield this.chatClientService.chatClient.deleteMessage(message.id);
            }
        });
    }
    /**
     * Uploads files to the channel. If you want to know more about [file uploads](https://getstream.io/chat/docs/javascript/file_uploads/?language=javascript) check out the platform documentation.
     * @param uploads the attachments to upload (output of the [`AttachmentService`](./AttachmentService.mdx))
     * @returns the result of file upload requests
     */
    uploadAttachments(uploads) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            const channel = this.activeChannelSubject.getValue();
            const uploadResults = yield Promise.allSettled(uploads.map((upload) => upload.type === 'image'
                ? this.customImageUploadRequest
                    ? this.customImageUploadRequest(upload.file, channel)
                    : channel.sendImage(upload.file, upload.file.name, upload.file.type)
                : this.customFileUploadRequest
                    ? this.customFileUploadRequest(upload.file, channel)
                    : channel.sendFile(upload.file, upload.file.name, upload.file.type)));
            uploadResults.forEach((uploadResult, i) => {
                var _a, _b, _c, _d, _e, _f, _g;
                const file = uploads[i].file;
                const type = uploads[i].type;
                if (uploadResult.status === 'fulfilled') {
                    result.push({
                        file,
                        type,
                        state: 'success',
                        url: uploadResult.value.file,
                        /* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */
                        thumb_url: uploadResult.value.thumb_url,
                    });
                }
                else {
                    let reason = 'unknown';
                    let extraData;
                    /* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment */
                    const message = 
                    /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
                    (_b = (_a = uploadResult.reason.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message;
                    /* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment */
                    const code = 
                    /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
                    (_d = (_c = uploadResult.reason.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.code;
                    if (code === 22) {
                        reason = 'file-size';
                        extraData = { param: ((_e = /\d+MB/.exec(message || '')) === null || _e === void 0 ? void 0 : _e[0]) || '100MB' };
                    }
                    else if (code === 4 &&
                        ((_f = message === null || message === void 0 ? void 0 : message.toLowerCase()) === null || _f === void 0 ? void 0 : _f.includes('file extension'))) {
                        reason = 'file-extension';
                        extraData = { param: ((_g = /\.\w+/.exec(message)) === null || _g === void 0 ? void 0 : _g[0]) || '' };
                    }
                    result.push({
                        file,
                        type,
                        state: 'error',
                        errorReason: reason,
                        errorExtraInfo: extraData ? [extraData] : undefined,
                    });
                }
            });
            return result;
        });
    }
    /**
     * Deletes an uploaded file by URL. If you want to know more about [file uploads](https://getstream.io/chat/docs/javascript/file_uploads/?language=javascript) check out the platform documentation
     * @param attachmentUpload Attachment to be deleted (output of the [`AttachmentService`](./AttachmentService.mdx))
     */
    deleteAttachment(attachmentUpload) {
        return __awaiter(this, void 0, void 0, function* () {
            const channel = this.activeChannelSubject.getValue();
            yield (attachmentUpload.type === 'image'
                ? this.customImageDeleteRequest
                    ? this.customImageDeleteRequest(attachmentUpload.url, channel)
                    : channel.deleteImage(attachmentUpload.url)
                : this.customFileDeleteRequest
                    ? this.customFileDeleteRequest(attachmentUpload.url, channel)
                    : channel.deleteFile(attachmentUpload.url));
        });
    }
    /**
     * Returns the autocomplete options for current channel members. If the channel has less than 100 members, it returns the channel members, otherwise sends a [search request](https://getstream.io/chat/docs/javascript/query_members/?language=javascript#pagination-and-ordering) with the given search term.
     * @param searchTerm Text to search for in the names of members
     * @returns The list of members matching the search filter
     */
    autocompleteMembers(searchTerm) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeChannel = this.activeChannelSubject.getValue();
            if (!activeChannel) {
                return [];
            }
            if (Object.keys(activeChannel.state.members).length < 100) {
                return Object.values(activeChannel.state.members).filter((m) => { var _a; return ((_a = m.user) === null || _a === void 0 ? void 0 : _a.id) !== this.chatClientService.chatClient.userID; });
            }
            else {
                if (!searchTerm) {
                    return [];
                }
                const result = yield activeChannel.queryMembers({
                    name: { $autocomplete: searchTerm },
                    id: { $ne: this.chatClientService.chatClient.userID },
                }); // TODO: find out why we need typecast here
                return Object.values(result.members);
            }
        });
    }
    /**
     * [Runs a message action](https://getstream.io/chat/docs/rest/#messages-runmessageaction) in the current channel. Updates the message list based on the action result (if no message is returned, the message will be removed from the message list).
     * @param messageId
     * @param formData
     * @param parentMessageId
     */
    sendAction(messageId, formData, parentMessageId) {
        return __awaiter(this, void 0, void 0, function* () {
            const channel = this.activeChannelSubject.getValue();
            const response = yield channel.sendAction(messageId, formData);
            if (response === null || response === void 0 ? void 0 : response.message) {
                channel.state.addMessageSorted(Object.assign(Object.assign({}, response.message), { status: 'received' }));
                const isThreadReply = !!response.message.parent_id;
                isThreadReply
                    ? this.activeThreadMessagesSubject.next([
                        ...channel.state.threads[response.message.parent_id],
                    ])
                    : this.activeChannelMessagesSubject.next([...channel.state.messages]);
            }
            else {
                channel.state.removeMessage({
                    id: messageId,
                    parent_id: parentMessageId,
                });
                if (parentMessageId) {
                    this.activeThreadMessagesSubject.next(channel.state.threads[this.activeParentMessageIdSubject.getValue()]);
                }
                else {
                    this.activeChannelMessagesSubject.next([...channel.state.messages]);
                }
            }
        });
    }
    /**
     * Selects or deselects the current message to quote reply to
     * @param message The message to select, if called with `undefined`, it deselects the message
     */
    selectMessageToQuote(message) {
        this.messageToQuoteSubject.next(message);
    }
    /**
     * Add a new channel to the channel list
     * The channel will be added to the beginning of the channel list
     * @param channel
     */
    addChannel(channel) {
        if (!this.channels.find((c) => c.cid === channel.cid)) {
            this.channelsSubject.next([channel, ...this.channels]);
            this.watchForChannelEvents(channel);
        }
    }
    sendMessageRequest(preview, customData, isResend = false) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const channel = this.activeChannelSubject.getValue();
            const isThreadReply = !!preview.parent_id;
            isThreadReply
                ? this.activeThreadMessagesSubject.next([
                    ...channel.state.threads[preview.parent_id],
                ])
                : this.activeChannelMessagesSubject.next([...channel.state.messages]);
            try {
                const response = yield channel.sendMessage(Object.assign({ id: preview.id, text: preview.text, attachments: preview.attachments, mentioned_users: (_a = preview.mentioned_users) === null || _a === void 0 ? void 0 : _a.map((u) => u.id), parent_id: preview.parent_id, quoted_message_id: preview.quoted_message_id }, customData)); // TODO: find out why we need typecast here
                channel.state.addMessageSorted(Object.assign(Object.assign({}, response.message), { status: 'received' }), true);
                isThreadReply
                    ? this.activeThreadMessagesSubject.next([
                        ...channel.state.threads[preview.parent_id],
                    ])
                    : this.activeChannelMessagesSubject.next([...channel.state.messages]);
                let messages;
                (isThreadReply ? this.activeThreadMessages$ : this.activeChannelMessages$)
                    .pipe(take(1))
                    .subscribe((m) => (messages = m));
                const newMessage = messages[messages.length - 1];
                return newMessage;
            }
            catch (error) {
                const stringError = JSON.stringify(error);
                const parsedError = stringError ? JSON.parse(stringError) : {};
                let isAlreadyExists = false;
                if (isResend) {
                    if (parsedError.status === 400 &&
                        parsedError.code === 4 &&
                        ((_d = (_c = (_b = parsedError === null || parsedError === void 0 ? void 0 : parsedError.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.includes('already exists'))) {
                        isAlreadyExists = true;
                    }
                }
                channel.state.addMessageSorted(Object.assign(Object.assign({}, preview), { errorStatusCode: isAlreadyExists
                        ? undefined
                        : parsedError.status || undefined, status: isAlreadyExists ? 'received' : 'failed' }), true);
                isThreadReply
                    ? this.activeThreadMessagesSubject.next([
                        ...channel.state.threads[preview.parent_id],
                    ])
                    : this.activeChannelMessagesSubject.next([...channel.state.messages]);
                let messages;
                (isThreadReply ? this.activeThreadMessages$ : this.activeChannelMessages$)
                    .pipe(take(1))
                    .subscribe((m) => (messages = m));
                const newMessage = messages[messages.length - 1];
                return newMessage;
            }
        });
    }
    /**
     * Jumps to the selected message inside the message list, if the message is not yet loaded, it'll load the message (and it's surroundings) from the API.
     * @param messageId The ID of the message to be loaded, 'latest' means jump to the latest messages
     * @param parentMessageId The ID of the parent message if we want to load a thread message
     */
    jumpToMessage(messageId, parentMessageId) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeChannel = this.activeChannelSubject.getValue();
            try {
                yield (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.state.loadMessageIntoState(messageId, parentMessageId));
                const messages = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.state.messages) || [];
                this.activeChannelMessagesSubject.next([...messages]);
                if (parentMessageId) {
                    const parentMessage = messages.find((m) => m.id === parentMessageId);
                    void this.setAsActiveParentMessage(parentMessage, 'state');
                }
                this.jumpToMessageSubject.next({
                    id: messageId,
                    parentId: parentMessageId,
                });
            }
            catch (error) {
                this.notificationService.addTemporaryNotification('streamChat.Message not found');
                throw error;
            }
        });
    }
    /**
     * Pins the given message in the channel
     * @param message
     */
    pinMessage(message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield ((_a = this.chatClientService.chatClient) === null || _a === void 0 ? void 0 : _a.pinMessage(message));
                this.notificationService.addTemporaryNotification('streamChat.Message pinned', 'success');
            }
            catch (error) {
                this.notificationService.addTemporaryNotification('streamChat.Error pinning message');
                throw error;
            }
        });
    }
    /**
     * Removes the given message from pinned messages
     * @param message
     */
    unpinMessage(message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield ((_a = this.chatClientService.chatClient) === null || _a === void 0 ? void 0 : _a.unpinMessage(message));
                this.notificationService.addTemporaryNotification('streamChat.Message unpinned', 'success');
            }
            catch (error) {
                this.notificationService.addTemporaryNotification('streamChat.Error removing message pin');
                throw error;
            }
        });
    }
    handleNotification(clientEvent) {
        switch (clientEvent.eventType) {
            case 'connection.recovered': {
                void this.ngZone.run(() => __awaiter(this, void 0, void 0, function* () {
                    if (this.isStateRecoveryInProgress) {
                        return;
                    }
                    this.isStateRecoveryInProgress = true;
                    try {
                        this.nextPageConfiguration = undefined;
                        // If channel list is not inited, we set the active channel
                        const shoulSetActiveChannel = this.shouldSetActiveChannel &&
                            !this.activeChannelSubject.getValue();
                        yield this.queryChannels(shoulSetActiveChannel || false, true);
                        if (this.activeChannelSubject.getValue()) {
                            // Thread messages are not refetched so active thread gets deselected to avoid displaying stale messages
                            void this.setAsActiveParentMessage(undefined);
                            // Update and reselect message to quote
                            const messageToQuote = this.messageToQuoteSubject.getValue();
                            this.setChannelState(this.activeChannelSubject.getValue());
                            let messages;
                            this.activeChannelMessages$
                                .pipe(take(1))
                                .subscribe((m) => (messages = m));
                            const updatedMessageToQuote = messages.find((m) => m.id === (messageToQuote === null || messageToQuote === void 0 ? void 0 : messageToQuote.id));
                            if (updatedMessageToQuote) {
                                this.selectMessageToQuote(updatedMessageToQuote);
                            }
                        }
                        this.isStateRecoveryInProgress = false;
                    }
                    catch (_a) {
                        this.isStateRecoveryInProgress = false;
                    }
                }));
                break;
            }
            case 'notification.message_new': {
                this.ngZone.run(() => {
                    if (this.customNewMessageNotificationHandler) {
                        this.customNewMessageNotificationHandler(clientEvent, this.channelListSetter);
                    }
                    else {
                        this.handleNewMessageNotification(clientEvent);
                    }
                });
                break;
            }
            case 'notification.added_to_channel': {
                this.ngZone.run(() => {
                    if (this.customAddedToChannelNotificationHandler) {
                        this.customAddedToChannelNotificationHandler(clientEvent, this.channelListSetter);
                    }
                    else {
                        this.handleAddedToChannelNotification(clientEvent);
                    }
                });
                break;
            }
            case 'notification.removed_from_channel': {
                this.ngZone.run(() => {
                    if (this.customRemovedFromChannelNotificationHandler) {
                        this.customRemovedFromChannelNotificationHandler(clientEvent, this.channelListSetter);
                    }
                    else {
                        this.handleRemovedFromChannelNotification(clientEvent);
                    }
                });
                break;
            }
            case 'user.updated': {
                this.ngZone.run(() => {
                    var _a;
                    const updatedChannels = (_a = this.channelsSubject.getValue()) === null || _a === void 0 ? void 0 : _a.map((c) => {
                        if (this.chatClientService.chatClient.activeChannels[c.cid]) {
                            return this.chatClientService.chatClient.activeChannels[c.cid];
                        }
                        else {
                            return c;
                        }
                    });
                    this.channelsSubject.next(updatedChannels);
                    const activeChannel = this.activeChannelSubject.getValue();
                    if (activeChannel) {
                        this.activeChannelSubject.next(this.chatClientService.chatClient.activeChannels[activeChannel.cid] || activeChannel);
                        this.activeChannelMessagesSubject.next(activeChannel.state.messages.map((m) => {
                            m.readBy = getReadBy(m, activeChannel);
                            return Object.assign({}, m);
                        }));
                        const activeParentMessage = this.activeParentMessageIdSubject.getValue();
                        if (activeParentMessage) {
                            const messages = activeChannel.state.threads[activeParentMessage];
                            this.activeThreadMessagesSubject.next([...messages]);
                        }
                        this.activeChannelPinnedMessagesSubject.next([
                            ...activeChannel.state.pinnedMessages,
                        ]);
                    }
                });
                break;
            }
        }
    }
    handleRemovedFromChannelNotification(clientEvent) {
        const channelIdToBeRemoved = clientEvent.event.channel.cid;
        this.removeChannelsFromChannelList([channelIdToBeRemoved], true);
    }
    handleNewMessageNotification(clientEvent) {
        if (clientEvent.event.channel) {
            void this.addChannelsFromNotification([clientEvent.event.channel]);
        }
    }
    handleAddedToChannelNotification(clientEvent) {
        if (clientEvent.event.channel) {
            void this.addChannelsFromNotification([clientEvent.event.channel]);
        }
    }
    addChannelsFromNotification(channelResponses) {
        return __awaiter(this, void 0, void 0, function* () {
            let newChannels = [];
            const watchRequests = [];
            channelResponses.forEach((channelResponse) => {
                const channel = this.chatClientService.chatClient.channel(channelResponse.type, channelResponse.id);
                watchRequests.push(channel.watch());
                newChannels.push(channel);
            });
            yield Promise.all(watchRequests);
            const currentChannels = this.channelsSubject.getValue() || [];
            newChannels = newChannels.filter((newChannel) => !currentChannels.find((c) => c.cid === newChannel.cid));
            if (newChannels.length > 0) {
                newChannels.forEach((c) => this.watchForChannelEvents(c));
                this.channelsSubject.next([...newChannels, ...currentChannels]);
            }
        });
    }
    removeChannelsFromChannelList(cids, shouldStopWatching) {
        var _a;
        const channels = this.channels.filter((c) => !cids.includes(c.cid || ''));
        if (shouldStopWatching) {
            cids.forEach((cid) => {
                var _a;
                if (this.channelSubscriptions[cid]) {
                    this.channelSubscriptions[cid]();
                    delete this.channelSubscriptions.cid;
                }
                void ((_a = this.chatClientService.chatClient.activeChannels[cid]) === null || _a === void 0 ? void 0 : _a.stopWatching());
            });
        }
        if (channels.length < this.channels.length) {
            this.channelsSubject.next(channels);
            if (cids.includes(((_a = this.activeChannelSubject.getValue()) === null || _a === void 0 ? void 0 : _a.cid) || '')) {
                if (channels.length > 0) {
                    this.setAsActiveChannel(channels[0]);
                }
                else {
                    this.activeChannelSubject.next(undefined);
                }
            }
        }
    }
    watchForActiveChannelEvents(channel) {
        this.activeChannelSubscriptions.push(channel.on('message.new', (event) => {
            this.ngZone.run(() => {
                event.message && event.message.parent_id
                    ? event.message.parent_id ===
                        this.activeParentMessageIdSubject.getValue()
                        ? this.activeThreadMessagesSubject.next([
                            ...channel.state.threads[event.message.parent_id],
                        ])
                        : null
                    : this.activeChannelMessagesSubject.next([
                        ...channel.state.messages,
                    ]);
                this.activeChannel$.pipe(first()).subscribe((c) => {
                    if (c) {
                        this.markRead(c);
                    }
                });
                this.updateLatestMessages(event);
            });
        }));
        this.activeChannelSubscriptions.push(channel.on('message.updated', (event) => this.messageUpdated(event)));
        this.activeChannelSubscriptions.push(channel.on('message.deleted', (event) => this.messageUpdated(event)));
        this.activeChannelSubscriptions.push(channel.on('reaction.new', (e) => this.messageReactionEventReceived(e)));
        this.activeChannelSubscriptions.push(channel.on('reaction.deleted', (e) => this.messageReactionEventReceived(e)));
        this.activeChannelSubscriptions.push(channel.on('reaction.updated', (e) => this.messageReactionEventReceived(e)));
        this.activeChannelSubscriptions.push(channel.on('message.read', (e) => {
            this.ngZone.run(() => {
                let latestMessage;
                let messages;
                this.activeChannelMessages$.pipe(first()).subscribe((m) => {
                    messages = m;
                    latestMessage = messages[messages.length - 1];
                });
                if (!latestMessage || !e.user) {
                    return;
                }
                if (latestMessage.readBy) {
                    latestMessage.readBy.splice(0, latestMessage.readBy.length);
                }
                else {
                    latestMessage.readBy = [];
                }
                latestMessage.readBy.push(...getReadBy(latestMessage, channel));
                messages[messages.length - 1] = Object.assign({}, latestMessage);
                this.activeChannelMessagesSubject.next([...messages]);
            });
        }));
        this.activeChannelSubscriptions.push(this.chatClientService.events$
            .pipe(filter((e) => e.eventType === 'notification.mark_unread' &&
            e.event.channel_id === channel.id), map((e) => e.event))
            .subscribe((e) => {
            this.ngZone.run(() => {
                this.activeChannelLastReadMessageId = e.last_read_message_id;
                this.activeChannelUnreadCount = e.unread_messages;
                this.activeChannelSubject.next(this.activeChannel);
            });
        }));
        this.activeChannelSubscriptions.push(channel.on('typing.start', (e) => this.ngZone.run(() => this.handleTypingStartEvent(e))));
        this.activeChannelSubscriptions.push(channel.on('typing.stop', (e) => this.ngZone.run(() => this.handleTypingStopEvent(e))));
    }
    /**
     * Call this method if user started typing in the active channel
     * @param parentId The id of the parent message, if user is typing in a thread
     */
    typingStarted(parentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeChannel = this.activeChannelSubject.getValue();
            yield (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.keystroke(parentId));
        });
    }
    /**
     * Call this method if user stopped typing in the active channel
     * @param parentId The id of the parent message, if user were typing in a thread
     */
    typingStopped(parentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeChannel = this.activeChannelSubject.getValue();
            yield (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.stopTyping(parentId));
        });
    }
    /**
     * The current list of channels
     */
    get channels() {
        return this.channelsSubject.getValue() || [];
    }
    /**
     * The current active channel
     */
    get activeChannel() {
        return this.activeChannelSubject.getValue() || undefined;
    }
    /**
     * The current active channel messages
     */
    get activeChannelMessages() {
        return this.activeChannelMessagesSubject.getValue() || [];
    }
    /**
     * Get the last 1200 reactions of a message in the current active channel. If you need to fetch more reactions please use the [following endpoint](https://getstream.io/chat/docs/javascript/send_reaction/?language=javascript#paginating-reactions).
     * @param messageId
     * @returns all reactions of a message
     */
    getMessageReactions(messageId) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const reactions = [];
            const limit = 300;
            let offset = 0;
            const reactionsLimit = ChannelService.MAX_MESSAGE_REACTIONS_TO_FETCH;
            let lastPageSize = limit;
            while (lastPageSize === limit && reactions.length < reactionsLimit) {
                try {
                    const response = yield ((_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.getReactions(messageId, {
                        offset,
                        limit,
                    }));
                    lastPageSize = ((_b = response === null || response === void 0 ? void 0 : response.reactions) === null || _b === void 0 ? void 0 : _b.length) || 0;
                    if (lastPageSize > 0) {
                        reactions.push(...response.reactions);
                    }
                    offset += lastPageSize;
                }
                catch (e) {
                    this.notificationService.addTemporaryNotification('streamChat.Error loading reactions');
                    throw e;
                }
            }
            return reactions;
        });
    }
    /**
     * Marks the channel from the given message as unread
     * @param messageId
     * @returns the result of the request
     */
    markMessageUnread(messageId) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.activeChannel) {
                return;
            }
            try {
                const response = yield this.activeChannel.markUnread({
                    message_id: messageId,
                });
                this.areReadEventsPaused = true;
                return response;
            }
            catch (e) {
                const error = JSON.parse(JSON.stringify(e));
                const data = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data;
                if (data &&
                    data.code === 4 &&
                    data.StatusCode === 400 &&
                    ((_b = data.message) === null || _b === void 0 ? void 0 : _b.includes('it is older than last'))) {
                    const count = (_d = (_c = /\d+ channel messages/
                        .exec(data.message)) === null || _c === void 0 ? void 0 : _c[0].match(/\d+/)) === null || _d === void 0 ? void 0 : _d[0];
                    if (count) {
                        this.notificationService.addTemporaryNotification('streamChat.Error, only the first {{count}} message can be marked as unread', undefined, undefined, { count });
                        throw e;
                    }
                }
                this.notificationService.addTemporaryNotification('streamChat.Error marking message as unread');
                throw e;
            }
        });
    }
    messageUpdated(event) {
        this.ngZone.run(() => {
            var _a;
            const isThreadReply = event.message && event.message.parent_id;
            const channel = this.activeChannelSubject.getValue();
            if (!channel) {
                return;
            }
            // Get messages from state as message order could change, and message could've been deleted
            const messages = isThreadReply
                ? channel.state.threads[((_a = event === null || event === void 0 ? void 0 : event.message) === null || _a === void 0 ? void 0 : _a.parent_id) || '']
                : channel.state.messages;
            if (!messages) {
                return;
            }
            const messageIndex = messages.findIndex((m) => { var _a; return m.id === ((_a = event === null || event === void 0 ? void 0 : event.message) === null || _a === void 0 ? void 0 : _a.id); });
            if (messageIndex !== -1) {
                isThreadReply
                    ? this.activeThreadMessagesSubject.next([...messages])
                    : this.activeChannelMessagesSubject.next([...messages]);
                this.activeChannelPinnedMessagesSubject.next([
                    ...channel.state.pinnedMessages,
                ]);
            }
        });
    }
    messageReactionEventReceived(e) {
        this.ngZone.run(() => {
            var _a, _b, _c, _d;
            const isThreadMessage = e.message && e.message.parent_id;
            let messages;
            (isThreadMessage
                ? this.activeThreadMessages$
                : this.activeChannelMessages$)
                .pipe(first())
                .subscribe((m) => (messages = m));
            const messageIndex = messages.findIndex((m) => { var _a; return m.id === ((_a = e === null || e === void 0 ? void 0 : e.message) === null || _a === void 0 ? void 0 : _a.id); });
            if (messageIndex === -1) {
                return;
            }
            const message = messages[messageIndex];
            message.reaction_counts = Object.assign({}, (_a = e.message) === null || _a === void 0 ? void 0 : _a.reaction_counts);
            message.reaction_scores = Object.assign({}, (_b = e.message) === null || _b === void 0 ? void 0 : _b.reaction_scores);
            message.latest_reactions = [...(((_c = e.message) === null || _c === void 0 ? void 0 : _c.latest_reactions) || [])];
            message.own_reactions = [...(((_d = e.message) === null || _d === void 0 ? void 0 : _d.own_reactions) || [])];
            messages[messageIndex] = Object.assign({}, message);
            isThreadMessage
                ? this.activeThreadMessagesSubject.next([...messages])
                : this.activeChannelMessagesSubject.next([...messages]);
        });
    }
    formatMessage(message) {
        const m = message;
        m.pinned_at = message.pinned_at ? new Date(message.pinned_at) : null;
        m.created_at = message.created_at
            ? new Date(message.created_at)
            : new Date();
        m.updated_at = message.updated_at
            ? new Date(message.updated_at)
            : new Date();
        message.status = message.status || 'received';
        return m;
    }
    isStreamMessage(message) {
        return !!message.readBy;
    }
    isFormatMessageResponse(message) {
        return message.created_at instanceof Date;
    }
    stopWatchForActiveChannelEvents(channel) {
        if (!channel) {
            return;
        }
        this.activeChannelSubscriptions.forEach((s) => s.unsubscribe());
        this.activeChannelSubscriptions = [];
    }
    queryChannels(shouldSetActiveChannel, recoverState = false) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.channelQueryStateSubject.next({ state: 'in-progress' });
                let filters;
                let options;
                if (this.nextPageConfiguration) {
                    if (this.nextPageConfiguration.type === 'filter') {
                        filters = Object.assign(Object.assign({}, this.filters), this.nextPageConfiguration.paginationFilter);
                        options = this.options;
                    }
                    else {
                        options = Object.assign(Object.assign({}, this.options), { offset: this.nextPageConfiguration.offset });
                        filters = this.filters;
                    }
                }
                else {
                    filters = this.filters;
                    options = this.options;
                }
                const channels = yield this.chatClientService.chatClient.queryChannels(filters, this.sort || {}, options);
                this.setNextPageConfiguration(channels);
                channels.forEach((c) => this.watchForChannelEvents(c));
                const prevChannels = recoverState
                    ? []
                    : this.channelsSubject.getValue() || [];
                const filteredChannels = channels.filter((channel) => !prevChannels.find((existingChannel) => existingChannel.cid === channel.cid));
                let currentActiveChannel = this.activeChannelSubject.getValue();
                let isCurrentActiveChannelDeselected = false;
                const nextChannels = [...prevChannels, ...filteredChannels];
                if (recoverState &&
                    currentActiveChannel &&
                    !filteredChannels.find((c) => c.cid === (currentActiveChannel === null || currentActiveChannel === void 0 ? void 0 : currentActiveChannel.cid))) {
                    try {
                        yield currentActiveChannel.watch();
                        nextChannels.unshift(currentActiveChannel);
                    }
                    catch (e) {
                        isCurrentActiveChannelDeselected = true;
                    }
                }
                this.channelsSubject.next(nextChannels);
                if (isCurrentActiveChannelDeselected) {
                    this.deselectActiveChannel();
                }
                if (filteredChannels.length > 0 &&
                    !currentActiveChannel &&
                    shouldSetActiveChannel) {
                    this.setAsActiveChannel(filteredChannels[0]);
                    currentActiveChannel = this.activeChannelSubject.getValue();
                }
                this.hasMoreChannelsSubject.next(channels.length >= this.options.limit);
                this.channelQueryStateSubject.next({ state: 'success' });
                if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.keepAliveChannels$OnError) &&
                    this.dismissErrorNotification) {
                    this.dismissErrorNotification();
                }
                return channels;
            }
            catch (error) {
                if (!((_b = this.options) === null || _b === void 0 ? void 0 : _b.keepAliveChannels$OnError)) {
                    this.channelsSubject.error(error);
                }
                this.channelQueryStateSubject.next({
                    state: 'error',
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                    error,
                });
                throw error;
            }
        });
    }
    watchForChannelEvents(channel) {
        const unsubscribe = channel.on((event) => {
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
            const type = event.type;
            switch (type) {
                case 'message.new': {
                    this.ngZone.run(() => {
                        if (this.customNewMessageHandler) {
                            this.customNewMessageHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleNewMessage(event, channel);
                        }
                    });
                    break;
                }
                case 'channel.hidden': {
                    this.ngZone.run(() => {
                        if (this.customChannelHiddenHandler) {
                            this.customChannelHiddenHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelHidden(event);
                        }
                    });
                    break;
                }
                case 'channel.deleted': {
                    this.ngZone.run(() => {
                        if (this.customChannelDeletedHandler) {
                            this.customChannelDeletedHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelDeleted(event);
                        }
                    });
                    break;
                }
                case 'channel.visible': {
                    this.ngZone.run(() => {
                        if (this.customChannelVisibleHandler) {
                            this.customChannelVisibleHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelVisible(event, channel);
                        }
                    });
                    break;
                }
                case 'channel.updated': {
                    this.ngZone.run(() => {
                        if (this.customChannelUpdatedHandler) {
                            this.customChannelUpdatedHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelUpdate(event);
                        }
                    });
                    break;
                }
                case 'channel.truncated': {
                    this.ngZone.run(() => {
                        if (this.customChannelTruncatedHandler) {
                            this.customChannelTruncatedHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelTruncate(event);
                        }
                    });
                    break;
                }
                case 'capabilities.changed': {
                    this.ngZone.run(() => {
                        var _a;
                        const cid = event.cid;
                        if (cid) {
                            const currentChannels = this.channelsSubject.getValue();
                            const index = currentChannels === null || currentChannels === void 0 ? void 0 : currentChannels.findIndex((c) => c.cid === cid);
                            if (index !== -1 && index !== undefined) {
                                this.channelsSubject.next([...currentChannels]);
                                if (cid === ((_a = this.activeChannelSubject.getValue()) === null || _a === void 0 ? void 0 : _a.cid)) {
                                    this.activeChannelSubject.next(this.activeChannelSubject.getValue());
                                }
                            }
                        }
                    });
                    break;
                }
            }
        });
        this.channelSubscriptions[channel.cid] = unsubscribe.unsubscribe;
    }
    handleNewMessage(_, channel) {
        const channelIndex = this.channels.findIndex((c) => c.cid === channel.cid);
        this.channels.splice(channelIndex, 1);
        this.channelsSubject.next([channel, ...this.channels]);
    }
    handleChannelHidden(event) {
        this.removeChannelsFromChannelList([event.channel.cid], false);
    }
    handleChannelDeleted(event) {
        this.removeChannelsFromChannelList([event.channel.cid], false);
    }
    handleChannelVisible(event, channel) {
        if (!this.channels.find((c) => c.cid === event.cid)) {
            this.ngZone.run(() => this.channelsSubject.next([...this.channels, channel]));
        }
    }
    handleChannelUpdate(event) {
        var _a, _b, _c, _d;
        const channelIndex = this.channels.findIndex((c) => c.cid === event.channel.cid);
        if (channelIndex !== -1) {
            const channel = this.channels[channelIndex];
            const notIncludedProperies = {
                hidden: ((_a = channel.data) === null || _a === void 0 ? void 0 : _a.hidden) || false,
                own_capabilities: ((_b = channel.data) === null || _b === void 0 ? void 0 : _b.own_capabilities) || [],
            };
            channel.data = Object.assign(Object.assign({}, event.channel), notIncludedProperies);
            this.channelsSubject.next([...this.channels]);
            if (((_c = event.channel) === null || _c === void 0 ? void 0 : _c.cid) === ((_d = this.activeChannelSubject.getValue()) === null || _d === void 0 ? void 0 : _d.cid)) {
                this.activeChannelSubject.next(channel);
            }
        }
    }
    handleChannelTruncate(event) {
        var _a, _b;
        const channelIndex = this.channels.findIndex((c) => c.cid === event.channel.cid);
        if (channelIndex !== -1) {
            this.channels[channelIndex].state.messages = [];
            this.channelsSubject.next([...this.channels]);
            if (((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid) === ((_b = this.activeChannelSubject.getValue()) === null || _b === void 0 ? void 0 : _b.cid)) {
                const channel = this.activeChannelSubject.getValue();
                channel.state.messages = [];
                this.activeChannelSubject.next(channel);
                this.activeChannelMessagesSubject.next([]);
                this.activeParentMessageIdSubject.next(undefined);
                this.activeThreadMessagesSubject.next([]);
            }
        }
    }
    get canSendReadEvents() {
        var _a;
        const channel = this.activeChannelSubject.getValue();
        if (!channel) {
            return false;
        }
        const capabilites = (_a = channel.data) === null || _a === void 0 ? void 0 : _a.own_capabilities;
        return capabilites.indexOf('read-events') !== -1;
    }
    transformToStreamMessage(message, channel) {
        const isThreadMessage = !!message.parent_id;
        if (this.isStreamMessage(message) &&
            this.isFormatMessageResponse(message)) {
            if (message.quoted_message) {
                message.quoted_message.translation = getMessageTranslation(message.quoted_message, channel, this.chatClientService.chatClient.user);
            }
            message.translation = getMessageTranslation(message, channel, this.chatClientService.chatClient.user);
            return message;
        }
        else {
            if (message.quoted_message) {
                message.quoted_message.translation = getMessageTranslation(message.quoted_message, channel, this.chatClientService.chatClient.user);
            }
            if (this.isFormatMessageResponse(message)) {
                message.readBy = isThreadMessage
                    ? []
                    : channel
                        ? getReadBy(message, channel)
                        : [];
                message.translation = getMessageTranslation(message, channel, this.chatClientService.chatClient.user);
                return message;
            }
            else {
                message = this.formatMessage(message);
                message.readBy = isThreadMessage
                    ? []
                    : channel
                        ? getReadBy(message, channel)
                        : [];
                message.translation = getMessageTranslation(message, channel, this.chatClientService.chatClient.user);
                return message;
            }
        }
    }
    handleTypingStartEvent(event) {
        var _a, _b;
        if (((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = this.chatClientService.chatClient.user) === null || _b === void 0 ? void 0 : _b.id)) {
            return;
        }
        const isTypingInThread = !!event.parent_id;
        if (isTypingInThread &&
            event.parent_id !== this.activeParentMessageIdSubject.getValue()) {
            return;
        }
        const subject = isTypingInThread
            ? this.usersTypingInThreadSubject
            : this.usersTypingInChannelSubject;
        const users = subject.getValue();
        const user = event.user;
        if (user && !users.find((u) => u.id === user.id)) {
            users.push(user);
            subject.next([...users]);
        }
    }
    handleTypingStopEvent(event) {
        const usersTypingInChannel = this.usersTypingInChannelSubject.getValue();
        const usersTypingInThread = this.usersTypingInThreadSubject.getValue();
        const user = event.user;
        if (user && usersTypingInChannel.find((u) => u.id === user.id)) {
            usersTypingInChannel.splice(usersTypingInChannel.findIndex((u) => u.id === user.id), 1);
            this.usersTypingInChannelSubject.next([...usersTypingInChannel]);
            return;
        }
        if (user && usersTypingInThread.find((u) => u.id === user.id)) {
            usersTypingInThread.splice(usersTypingInThread.findIndex((u) => u.id === user.id), 1);
            this.usersTypingInThreadSubject.next([...usersTypingInThread]);
            return;
        }
    }
    updateLatestMessages(event) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (((_b = (_a = event.message) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id) !== ((_d = (_c = this.chatClientService) === null || _c === void 0 ? void 0 : _c.chatClient.user) === null || _d === void 0 ? void 0 : _d.id)) {
            return;
        }
        const latestMessages = this.latestMessageDateByUserByChannelsSubject.getValue();
        if (!((_e = event.message) === null || _e === void 0 ? void 0 : _e.created_at)) {
            return;
        }
        const channelId = (_f = event === null || event === void 0 ? void 0 : event.message) === null || _f === void 0 ? void 0 : _f.cid;
        if (!channelId) {
            return;
        }
        const messageDate = new Date(event.message.created_at);
        if (!latestMessages[channelId] ||
            ((_g = latestMessages[channelId]) === null || _g === void 0 ? void 0 : _g.getTime()) < messageDate.getTime()) {
            latestMessages[channelId] = messageDate;
            this.latestMessageDateByUserByChannelsSubject.next(Object.assign({}, latestMessages));
        }
    }
    setChannelState(channel) {
        channel.state.messages.forEach((m) => {
            m.readBy = getReadBy(m, channel);
            m.translation = getMessageTranslation(m, channel, this.chatClientService.chatClient.user);
            if (m.quoted_message) {
                m.quoted_message.translation = getMessageTranslation(m.quoted_message, channel, this.chatClientService.chatClient.user);
            }
        });
        this.markRead(channel);
        this.activeChannelMessagesSubject.next([...channel.state.messages]);
        this.activeChannelPinnedMessagesSubject.next([
            ...channel.state.pinnedMessages,
        ]);
        this.activeParentMessageIdSubject.next(undefined);
        this.activeThreadMessagesSubject.next([]);
        this.messageToQuoteSubject.next(undefined);
        this.usersTypingInChannelSubject.next([]);
        this.usersTypingInThreadSubject.next([]);
    }
    markRead(channel) {
        if (this.canSendReadEvents &&
            this.shouldMarkActiveChannelAsRead &&
            !this.areReadEventsPaused) {
            void channel.markRead();
        }
    }
    setNextPageConfiguration(channelQueryResult) {
        var _a;
        if (this.customPaginator) {
            this.nextPageConfiguration = this.customPaginator(channelQueryResult);
        }
        else {
            this.nextPageConfiguration = {
                type: 'offset',
                offset: (((_a = this.nextPageConfiguration) === null || _a === void 0 ? void 0 : _a.type) === 'offset'
                    ? this.nextPageConfiguration.offset
                    : 0) + channelQueryResult.length,
            };
        }
    }
}
/**
 * internal
 */
ChannelService.MAX_MESSAGE_REACTIONS_TO_FETCH = 1200;
ChannelService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelService, deps: [{ token: i1.ChatClientService }, { token: i0.NgZone }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ChannelService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ChatClientService }, { type: i0.NgZone }, { type: i2.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,