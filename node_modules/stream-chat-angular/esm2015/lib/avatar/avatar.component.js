import { Component, Input, } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../chat-client.service";
import * as i2 from "@angular/common";
/**
 * The `Avatar` component displays the provided image, with fallback to the first letter of the optional name input.
 */
export class AvatarComponent {
    constructor(chatClientService, ngZone, cdRef) {
        this.chatClientService = chatClientService;
        this.ngZone = ngZone;
        this.cdRef = cdRef;
        /**
         * The size in pixels of the avatar image.
         */
        this.size = 32;
        /**
         * If a channel avatar is displayed, and if the channel has exactly two members a green dot is displayed if the other member is online. Set this flag to `false` to turn off this behavior.
         */
        this.showOnlineIndicator = true;
        /**
         * If channel/user image isn't provided the initials of the name of the channel/user is shown instead, you can choose how the initals should be computed
         */
        this.initialsType = 'first-letter-of-first-word';
        this.isError = false;
        this.isOnline = false;
        this.initials = '';
        this.isViewInited = false;
        this.subscriptions = [];
    }
    ngOnInit() {
        this.subscriptions.push(this.chatClientService.user$.subscribe((u) => {
            if ((u === null || u === void 0 ? void 0 : u.id) !== this.userId) {
                this.userId = u === null || u === void 0 ? void 0 : u.id;
                if (this.type || this.channel || this.name) {
                    this.setInitials();
                    this.setFallbackChannelImage();
                    this.updateIsOnlineSubscription();
                }
                if (this.isViewInited) {
                    this.cdRef.detectChanges();
                }
            }
        }));
    }
    ngOnChanges(changes) {
        if (changes['channel']) {
            this.updateIsOnlineSubscription();
        }
        if (changes.type || changes.name || changes.channel) {
            this.setInitials();
        }
        if (changes.type || changes.channel) {
            this.setFallbackChannelImage();
        }
    }
    setFallbackChannelImage() {
        if (this.type !== 'channel') {
            this.fallbackChannelImage = undefined;
        }
        else {
            const otherMember = this.getOtherMemberIfOneToOneChannel();
            if (otherMember) {
                this.fallbackChannelImage = otherMember.image;
            }
            else {
                this.fallbackChannelImage = undefined;
            }
        }
    }
    setInitials() {
        var _a, _b, _c, _d, _e;
        let result = '';
        if (this.type === 'user') {
            result = ((_a = this.name) === null || _a === void 0 ? void 0 : _a.toString()) || '';
        }
        else if (this.type === 'channel') {
            if ((_c = (_b = this.channel) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.name) {
                result = (_e = (_d = this.channel) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.name;
            }
            else {
                const otherMember = this.getOtherMemberIfOneToOneChannel();
                if (otherMember) {
                    result = otherMember.name || otherMember.id || '';
                }
                else {
                    result = '#';
                }
            }
        }
        const words = result.split(' ');
        let initials;
        if (this.initialsType === 'first-letter-of-each-word') {
            initials = words.map((w) => w.charAt(0) || '').join('');
        }
        else {
            initials = words[0].charAt(0) || '';
        }
        this.initials = initials;
    }
    updateIsOnlineSubscription() {
        var _a, _b;
        if (this.channel) {
            const otherMember = this.getOtherMemberIfOneToOneChannel();
            if (otherMember) {
                this.isOnline = otherMember.online || false;
                this.isOnlineSubscription = this.chatClientService.events$
                    .pipe(filter((e) => e.eventType === 'user.presence.changed'))
                    .subscribe((event) => {
                    var _a;
                    if (((_a = event.event.user) === null || _a === void 0 ? void 0 : _a.id) === otherMember.id) {
                        this.ngZone.run(() => {
                            var _a;
                            this.isOnline = ((_a = event.event.user) === null || _a === void 0 ? void 0 : _a.online) || false;
                        });
                    }
                });
            }
            else {
                this.isOnline = false;
                (_a = this.isOnlineSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            }
        }
        else {
            this.isOnline = false;
            (_b = this.isOnlineSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
    }
    getOtherMemberIfOneToOneChannel() {
        var _a, _b;
        const otherMembers = Object.values(((_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.members) || {}).filter((m) => m.user_id !== this.userId);
        if (otherMembers.length === 1) {
            return otherMembers[0].user;
        }
        else {
            return undefined;
        }
    }
}
AvatarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AvatarComponent, deps: [{ token: i1.ChatClientService }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AvatarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: AvatarComponent, selector: "stream-avatar", inputs: { name: "name", imageUrl: "imageUrl", size: "size", location: "location", channel: "channel", user: "user", type: "type", showOnlineIndicator: "showOnlineIndicator", initialsType: "initialsType" }, usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"str-chat__avatar str-chat__avatar--circle stream-chat__avatar--{{\n    location\n  }}\"\n  title=\"{{ name }}\"\n  [ngStyle]=\"{\n    flexBasis: 'calc(var(--str-chat__spacing-px, 1px) * ' + size + ')',\n    fontSize:\n      initialsType === 'first-letter-of-first-word'\n        ? 'calc(var(--str-chat__spacing-px, 1px) * ' + size / 2 + ')'\n        : 'calc(var(--str-chat__spacing-px, 1px) * ' + size / 3 + ')',\n    height: 'calc(var(--str-chat__spacing-px, 1px) * ' + size + ')',\n    lineHeight: 'calc(var(--str-chat__spacing-px, 1px) * ' + size + ')',\n    width: 'calc(var(--str-chat__spacing-px, 1px) * ' + size + ')'\n  }\"\n>\n  <img\n    *ngIf=\"(imageUrl || fallbackChannelImage) && !isError; else fallback\"\n    class=\"str-chat__avatar-image str-chat__avatar-image\"\n    src=\"{{ imageUrl || fallbackChannelImage }}\"\n    alt=\"{{ initials }}\"\n    data-testid=\"avatar-img\"\n    (error)=\"isError = true\"\n    [ngStyle]=\"{\n      flexBasis: 'calc(var(--str-chat__spacing-px, 1px) * ' + size + ')',\n      height: 'calc(var(--str-chat__spacing-px, 1px) * ' + size + ')',\n      objectFit: 'cover',\n      width: 'calc(var(--str-chat__spacing-px, 1px) * ' + size + ')'\n    }\"\n    fetchpriority=\"high\"\n  />\n  <ng-template #fallback>\n    <div data-testid=\"fallback-img\" class=\"str-chat__avatar-fallback\">\n      {{ initials }}\n    </div>\n  </ng-template>\n  <div\n    data-testid=\"online-indicator\"\n    *ngIf=\"isOnline && showOnlineIndicator\"\n    class=\"str-chat__avatar--online-indicator\"\n  ></div>\n</div>\n", styles: [""], directives: [{ type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AvatarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-avatar',
                    templateUrl: './avatar.component.html',
                    styleUrls: ['./avatar.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.ChatClientService }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{
                type: Input
            }], imageUrl: [{
                type: Input
            }], size: [{
                type: Input
            }], location: [{
                type: Input
            }], channel: [{
                type: Input
            }], user: [{
                type: Input
            }], type: [{
                type: Input
            }], showOnlineIndicator: [{
                type: Input
            }], initialsType: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,