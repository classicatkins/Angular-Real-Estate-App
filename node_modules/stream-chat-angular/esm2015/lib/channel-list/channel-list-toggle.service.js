import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, filter, first } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * The `ChannelListToggleService` can be used to toggle the channel list.
 *
 * @deprecated This service can only be used with [theming-v1](../concepts/theming-and-css.mdx), if you are using [thmeing-v2](../theming/introduction.mdx) please refer to our [responsive layout guide](../code-examples/responsive-layout.mdx)
 */
export class ChannelListToggleService {
    constructor() {
        this.isOpenSubject = new BehaviorSubject(false);
        this.isOpen$ = this.isOpenSubject
            .asObservable()
            .pipe(distinctUntilChanged());
        this.isOpen$.pipe(filter((s) => s)).subscribe(() => {
            this.watchForOutsideClicks();
        });
    }
    /**
     * Opens the channel list.
     */
    open() {
        this.isOpenSubject.next(true);
    }
    /**
     * Closes the channel list.
     */
    close() {
        this.isOpenSubject.next(false);
    }
    /**
     * Opens the channel list if it was closed, and closes if it was opened.
     */
    toggle() {
        this.isOpenSubject.getValue() ? this.close() : this.open();
    }
    /**
     * Sets the channel list element, on mobile screen size if the user opens the channel list, and clicks outside, the service automatically closes the channel list if a reference to the HTML element is provided.
     * @param element
     */
    setMenuElement(element) {
        this.menuElement = element;
    }
    /**
     * This method should be called if a channel was selected, if on mobile, the channel list will be closed.
     */
    channelSelected() {
        this.close();
    }
    watchForOutsideClicks() {
        if (!this.menuElement) {
            return;
        }
        const eventHandler = (event) => {
            if (!this.menuElement.contains(event.target)) {
                this.close();
                window.removeEventListener('click', eventHandler);
            }
        };
        window.addEventListener('click', eventHandler);
        this.isOpen$
            .pipe(filter((s) => !s), first())
            .subscribe(() => window.removeEventListener('click', eventHandler));
    }
}
ChannelListToggleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelListToggleService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ChannelListToggleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelListToggleService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelListToggleService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbC1saXN0LXRvZ2dsZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RyZWFtLWNoYXQtYW5ndWxhci9zcmMvbGliL2NoYW5uZWwtbGlzdC9jaGFubmVsLWxpc3QtdG9nZ2xlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRXJFOzs7O0dBSUc7QUFFSCxNQUFNLE9BQU8sd0JBQXdCO0lBUW5DO1FBSFEsa0JBQWEsR0FBRyxJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUkxRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhO2FBQzlCLFlBQVksRUFBRTthQUNkLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDakQsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJO1FBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsY0FBYyxDQUFDLE9BQWdDO1FBQzdDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWU7UUFDYixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRU8scUJBQXFCO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU87U0FDUjtRQUNELE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFjLENBQUMsRUFBRTtnQkFDckQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7YUFDbkQ7UUFDSCxDQUFDLENBQUM7UUFDRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPO2FBQ1QsSUFBSSxDQUNILE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDakIsS0FBSyxFQUFFLENBQ1I7YUFDQSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7O3FIQXRFVSx3QkFBd0I7eUhBQXhCLHdCQUF3QixjQURYLE1BQU07MkZBQ25CLHdCQUF3QjtrQkFEcEMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIGZpcnN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIFRoZSBgQ2hhbm5lbExpc3RUb2dnbGVTZXJ2aWNlYCBjYW4gYmUgdXNlZCB0byB0b2dnbGUgdGhlIGNoYW5uZWwgbGlzdC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHNlcnZpY2UgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFt0aGVtaW5nLXYxXSguLi9jb25jZXB0cy90aGVtaW5nLWFuZC1jc3MubWR4KSwgaWYgeW91IGFyZSB1c2luZyBbdGhtZWluZy12Ml0oLi4vdGhlbWluZy9pbnRyb2R1Y3Rpb24ubWR4KSBwbGVhc2UgcmVmZXIgdG8gb3VyIFtyZXNwb25zaXZlIGxheW91dCBndWlkZV0oLi4vY29kZS1leGFtcGxlcy9yZXNwb25zaXZlLWxheW91dC5tZHgpXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgQ2hhbm5lbExpc3RUb2dnbGVTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIEVtaXRzIGB0cnVlYCBpZiB0aGUgY2hhbm5lbCBsaXN0IGlzIGluIG9wZW4gc3RhdGUsIG90aGVyd2lzZSBpdCBlbWl0cyBgZmFsc2VgXG4gICAqL1xuICBpc09wZW4kOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBwcml2YXRlIGlzT3BlblN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcbiAgcHJpdmF0ZSBtZW51RWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pc09wZW4kID0gdGhpcy5pc09wZW5TdWJqZWN0XG4gICAgICAuYXNPYnNlcnZhYmxlKClcbiAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICAgIHRoaXMuaXNPcGVuJC5waXBlKGZpbHRlcigocykgPT4gcykpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLndhdGNoRm9yT3V0c2lkZUNsaWNrcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBjaGFubmVsIGxpc3QuXG4gICAqL1xuICBvcGVuKCkge1xuICAgIHRoaXMuaXNPcGVuU3ViamVjdC5uZXh0KHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgY2hhbm5lbCBsaXN0LlxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5pc09wZW5TdWJqZWN0Lm5leHQoZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBjaGFubmVsIGxpc3QgaWYgaXQgd2FzIGNsb3NlZCwgYW5kIGNsb3NlcyBpZiBpdCB3YXMgb3BlbmVkLlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXMuaXNPcGVuU3ViamVjdC5nZXRWYWx1ZSgpID8gdGhpcy5jbG9zZSgpIDogdGhpcy5vcGVuKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY2hhbm5lbCBsaXN0IGVsZW1lbnQsIG9uIG1vYmlsZSBzY3JlZW4gc2l6ZSBpZiB0aGUgdXNlciBvcGVucyB0aGUgY2hhbm5lbCBsaXN0LCBhbmQgY2xpY2tzIG91dHNpZGUsIHRoZSBzZXJ2aWNlIGF1dG9tYXRpY2FsbHkgY2xvc2VzIHRoZSBjaGFubmVsIGxpc3QgaWYgYSByZWZlcmVuY2UgdG8gdGhlIEhUTUwgZWxlbWVudCBpcyBwcm92aWRlZC5cbiAgICogQHBhcmFtIGVsZW1lbnRcbiAgICovXG4gIHNldE1lbnVFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5tZW51RWxlbWVudCA9IGVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBpZiBhIGNoYW5uZWwgd2FzIHNlbGVjdGVkLCBpZiBvbiBtb2JpbGUsIHRoZSBjaGFubmVsIGxpc3Qgd2lsbCBiZSBjbG9zZWQuXG4gICAqL1xuICBjaGFubmVsU2VsZWN0ZWQoKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSB3YXRjaEZvck91dHNpZGVDbGlja3MoKSB7XG4gICAgaWYgKCF0aGlzLm1lbnVFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50SGFuZGxlciA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgIGlmICghdGhpcy5tZW51RWxlbWVudCEuY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIE5vZGUpKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnRIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50SGFuZGxlcik7XG4gICAgdGhpcy5pc09wZW4kXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKChzKSA9PiAhcyksXG4gICAgICAgIGZpcnN0KClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnRIYW5kbGVyKSk7XG4gIH1cbn1cbiJdfQ==