import { Component, HostBinding, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../custom-templates.service";
import * as i2 from "../message-actions.service";
import * as i3 from "../modal/modal.component";
import * as i4 from "../message-input/message-input.component";
import * as i5 from "../notification-list/notification-list.component";
import * as i6 from "@angular/common";
import * as i7 from "@ngx-translate/core";
/**
 * The edit message form displays a modal that's opened when a user edits a message. The component uses the [`MessageActionsService`](../../services/MessageActionsService) to know which message is being edited.
 *
 * By default this is displayed within the [`stream-channel` component](../../components/ChannelComponent).
 */
export class EditMessageFormComponent {
    constructor(customTemplatesService, messageActionsService) {
        this.customTemplatesService = customTemplatesService;
        this.messageActionsService = messageActionsService;
        this.class = 'str-chat-angular__edit-message-form';
        this.isModalOpen = false;
        this.sendMessageSubject = new Subject();
        this.subscriptions = [];
        this.sendMessage$ = this.sendMessageSubject.asObservable();
    }
    ngOnInit() {
        this.messageActionsService.messageToEdit$.subscribe((message) => {
            if ((message && !this.isModalOpen) || (!message && this.isModalOpen)) {
                this.message = message;
                this.isModalOpen = !!message;
            }
        });
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    getEditModalContext() {
        return {
            isOpen: this.isModalOpen,
            isOpenChangeHandler: (isOpen) => {
                this.isModalOpen = isOpen;
                if (!this.isModalOpen) {
                    this.dismissed();
                }
            },
            content: this.modalContent,
        };
    }
    getMessageInputContext() {
        return {
            message: this.message,
            messageUpdateHandler: () => {
                this.dismissed();
            },
            isFileUploadEnabled: undefined,
            areMentionsEnabled: undefined,
            isMultipleFileUploadEnabled: undefined,
            mentionScope: undefined,
            mode: undefined,
            sendMessage$: this.sendMessage$,
        };
    }
    sendClicked() {
        this.sendMessageSubject.next();
    }
    dismissed() {
        this.isModalOpen = false;
        this.message = undefined;
        this.messageActionsService.messageToEdit$.next(undefined);
    }
}
EditMessageFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: EditMessageFormComponent, deps: [{ token: i1.CustomTemplatesService }, { token: i2.MessageActionsService }], target: i0.ɵɵFactoryTarget.Component });
EditMessageFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: EditMessageFormComponent, selector: "stream-edit-message-form", host: { properties: { "class": "this.class" } }, viewQueries: [{ propertyName: "modalContent", first: true, predicate: ["editMessageForm"], descendants: true, static: true }], ngImport: i0, template: "<ng-container\n  *ngTemplateOutlet=\"\n    (customTemplatesService.modalTemplate$ | async) || defaultModal;\n    context: getEditModalContext()\n  \"\n></ng-container>\n\n<ng-template\n  #defaultModal\n  let-isOpen=\"isOpen\"\n  let-isOpenChangeHandler=\"isOpenChangeHandler\"\n  let-content=\"content\"\n>\n  <stream-modal\n    [isOpen]=\"isOpen\"\n    *ngIf=\"isOpen\"\n    (isOpenChange)=\"isOpenChangeHandler($event)\"\n    [content]=\"content\"\n  >\n  </stream-modal>\n</ng-template>\n\n<ng-template #editMessageForm>\n  <div class=\"str-chat__edit-message-form\">\n    <ng-template\n      #defaultInput\n      let-messageInput=\"message\"\n      let-messageUpdateHandler=\"messageUpdateHandler\"\n      let-sendMessage$Input=\"sendMessage$\"\n    >\n      <stream-message-input\n        [message]=\"messageInput\"\n        (messageUpdate)=\"messageUpdateHandler()\"\n        [sendMessage$]=\"sendMessage$Input\"\n      ></stream-message-input>\n    </ng-template>\n    <ng-container\n      *ngTemplateOutlet=\"\n        (customTemplatesService.messageInputTemplate$ | async) || defaultInput;\n        context: getMessageInputContext()\n      \"\n    >\n    </ng-container>\n\n    <stream-notification-list></stream-notification-list>\n    <div\n      class=\"\n        str-chat__message-team-form-footer\n        str-chat__message-team-form-footer-angular\n      \"\n    >\n      <div class=\"str-chat__edit-message-form-options\">\n        <button\n          class=\"str-chat__edit-message-cancel\"\n          translate\n          data-testid=\"cancel-button\"\n          (click)=\"dismissed()\"\n        >\n          streamChat.Cancel\n        </button>\n        <button\n          type=\"submit\"\n          translate\n          class=\"str-chat__edit-message-send\"\n          data-testid=\"send-button\"\n          (click)=\"sendClicked()\"\n          (keyup.enter)=\"sendClicked()\"\n        >\n          streamChat.Send\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i3.ModalComponent, selector: "stream-modal", inputs: ["isOpen", "content"], outputs: ["isOpenChange"] }, { type: i4.MessageInputComponent, selector: "stream-message-input", inputs: ["isFileUploadEnabled", "areMentionsEnabled", "mentionScope", "mode", "isMultipleFileUploadEnabled", "message", "sendMessage$", "inputMode", "autoFocus"], outputs: ["messageUpdate"] }, { type: i5.NotificationListComponent, selector: "stream-notification-list" }], directives: [{ type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.TranslateDirective, selector: "[translate],[ngx-translate]", inputs: ["translate", "translateParams"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: EditMessageFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-edit-message-form',
                    templateUrl: './edit-message-form.component.html',
                    styles: [],
                }]
        }], ctorParameters: function () { return [{ type: i1.CustomTemplatesService }, { type: i2.MessageActionsService }]; }, propDecorators: { class: [{
                type: HostBinding
            }], modalContent: [{
                type: ViewChild,
                args: ['editMessageForm', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,