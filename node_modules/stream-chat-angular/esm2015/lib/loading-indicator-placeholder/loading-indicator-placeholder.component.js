import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../custom-templates.service";
import * as i2 from "../loading-indicator/loading-indicator.component";
import * as i3 from "@angular/common";
/**
 * The `LoadingInficatorPlaceholder` component displays the [default loading indicator](./LoadingIndicatorComponent.mdx) unless a [custom template](../services/CustomTemplatesService.mdx) is provided. This component is used by the SDK internally, you likely won't need to use it.
 */
export class LoadingIndicatorPlaceholderComponent {
    constructor(customTemplatesService) {
        this.customTemplatesService = customTemplatesService;
        /**
         * The size of the indicator (in pixels)
         */
        this.size = 15;
        /**
         * The color of the indicator
         */
        this.color = `var(--str-chat__loading-indicator-color, var(--str-chat__primary-color, '#006CFF'))`;
    }
    getLoadingIndicatorContext() {
        return {
            size: this.size,
            color: this.color,
        };
    }
}
LoadingIndicatorPlaceholderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: LoadingIndicatorPlaceholderComponent, deps: [{ token: i1.CustomTemplatesService }], target: i0.ɵɵFactoryTarget.Component });
LoadingIndicatorPlaceholderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: LoadingIndicatorPlaceholderComponent, selector: "stream-loading-indicator-placeholder", inputs: { size: "size", color: "color" }, ngImport: i0, template: "<ng-template #defaultLoadingIndicator let-size=\"size\" let-color=\"color\">\n  <stream-loading-indicator\n    [size]=\"size\"\n    [color]=\"color\"\n  ></stream-loading-indicator>\n</ng-template>\n<ng-container\n  *ngTemplateOutlet=\"\n    (customTemplatesService.loadingIndicatorTemplate$ | async) ||\n      defaultLoadingIndicator;\n    context: getLoadingIndicatorContext()\n  \"\n></ng-container>\n", components: [{ type: i2.LoadingIndicatorComponent, selector: "stream-loading-indicator", inputs: ["size", "color"] }], directives: [{ type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: LoadingIndicatorPlaceholderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-loading-indicator-placeholder',
                    templateUrl: './loading-indicator-placeholder.component.html',
                    styles: [],
                }]
        }], ctorParameters: function () { return [{ type: i1.CustomTemplatesService }]; }, propDecorators: { size: [{
                type: Input
            }], color: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1pbmRpY2F0b3ItcGxhY2Vob2xkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RyZWFtLWNoYXQtYW5ndWxhci9zcmMvbGliL2xvYWRpbmctaW5kaWNhdG9yLXBsYWNlaG9sZGVyL2xvYWRpbmctaW5kaWNhdG9yLXBsYWNlaG9sZGVyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9sb2FkaW5nLWluZGljYXRvci1wbGFjZWhvbGRlci9sb2FkaW5nLWluZGljYXRvci1wbGFjZWhvbGRlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFJakQ7O0dBRUc7QUFNSCxNQUFNLE9BQU8sb0NBQW9DO0lBVy9DLFlBQW1CLHNCQUE4QztRQUE5QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBVmpFOztXQUVHO1FBQ00sU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNuQjs7V0FFRztRQUVILFVBQUssR0FBRyxxRkFBcUYsQ0FBQztJQUUxQixDQUFDO0lBRXJFLDBCQUEwQjtRQUN4QixPQUFPO1lBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLENBQUM7SUFDSixDQUFDOztpSUFsQlUsb0NBQW9DO3FIQUFwQyxvQ0FBb0Msc0hDWmpELHNaQWFBOzJGRERhLG9DQUFvQztrQkFMaEQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsc0NBQXNDO29CQUNoRCxXQUFXLEVBQUUsZ0RBQWdEO29CQUM3RCxNQUFNLEVBQUUsRUFBRTtpQkFDWDs2R0FLVSxJQUFJO3NCQUFaLEtBQUs7Z0JBS04sS0FBSztzQkFESixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ3VzdG9tVGVtcGxhdGVzU2VydmljZSB9IGZyb20gJy4uL2N1c3RvbS10ZW1wbGF0ZXMuc2VydmljZSc7XG5pbXBvcnQgeyBMb2FkaW5nSW5kaWNhdG9yQ29udGV4dCB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBUaGUgYExvYWRpbmdJbmZpY2F0b3JQbGFjZWhvbGRlcmAgY29tcG9uZW50IGRpc3BsYXlzIHRoZSBbZGVmYXVsdCBsb2FkaW5nIGluZGljYXRvcl0oLi9Mb2FkaW5nSW5kaWNhdG9yQ29tcG9uZW50Lm1keCkgdW5sZXNzIGEgW2N1c3RvbSB0ZW1wbGF0ZV0oLi4vc2VydmljZXMvQ3VzdG9tVGVtcGxhdGVzU2VydmljZS5tZHgpIGlzIHByb3ZpZGVkLiBUaGlzIGNvbXBvbmVudCBpcyB1c2VkIGJ5IHRoZSBTREsgaW50ZXJuYWxseSwgeW91IGxpa2VseSB3b24ndCBuZWVkIHRvIHVzZSBpdC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc3RyZWFtLWxvYWRpbmctaW5kaWNhdG9yLXBsYWNlaG9sZGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xvYWRpbmctaW5kaWNhdG9yLXBsYWNlaG9sZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ0luZGljYXRvclBsYWNlaG9sZGVyQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBpbmRpY2F0b3IgKGluIHBpeGVscylcbiAgICovXG4gIEBJbnB1dCgpIHNpemUgPSAxNTtcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgaW5kaWNhdG9yXG4gICAqL1xuICBASW5wdXQoKVxuICBjb2xvciA9IGB2YXIoLS1zdHItY2hhdF9fbG9hZGluZy1pbmRpY2F0b3ItY29sb3IsIHZhcigtLXN0ci1jaGF0X19wcmltYXJ5LWNvbG9yLCAnIzAwNkNGRicpKWA7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGN1c3RvbVRlbXBsYXRlc1NlcnZpY2U6IEN1c3RvbVRlbXBsYXRlc1NlcnZpY2UpIHt9XG5cbiAgZ2V0TG9hZGluZ0luZGljYXRvckNvbnRleHQoKTogTG9hZGluZ0luZGljYXRvckNvbnRleHQge1xuICAgIHJldHVybiB7XG4gICAgICBzaXplOiB0aGlzLnNpemUsXG4gICAgICBjb2xvcjogdGhpcy5jb2xvcixcbiAgICB9O1xuICB9XG59XG4iLCI8bmctdGVtcGxhdGUgI2RlZmF1bHRMb2FkaW5nSW5kaWNhdG9yIGxldC1zaXplPVwic2l6ZVwiIGxldC1jb2xvcj1cImNvbG9yXCI+XG4gIDxzdHJlYW0tbG9hZGluZy1pbmRpY2F0b3JcbiAgICBbc2l6ZV09XCJzaXplXCJcbiAgICBbY29sb3JdPVwiY29sb3JcIlxuICA+PC9zdHJlYW0tbG9hZGluZy1pbmRpY2F0b3I+XG48L25nLXRlbXBsYXRlPlxuPG5nLWNvbnRhaW5lclxuICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgIChjdXN0b21UZW1wbGF0ZXNTZXJ2aWNlLmxvYWRpbmdJbmRpY2F0b3JUZW1wbGF0ZSQgfCBhc3luYykgfHxcbiAgICAgIGRlZmF1bHRMb2FkaW5nSW5kaWNhdG9yO1xuICAgIGNvbnRleHQ6IGdldExvYWRpbmdJbmRpY2F0b3JDb250ZXh0KClcbiAgXCJcbj48L25nLWNvbnRhaW5lcj5cbiJdfQ==