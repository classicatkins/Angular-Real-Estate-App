export const getGroupStyles = (message, previousMessage, nextMessage, options = {
    noGroupByUser: false,
    lastReadMessageId: undefined,
    noGroupByReadState: false,
}) => {
    var _a, _b, _c, _d, _e, _f;
    if (options.noGroupByUser ||
        (message.attachments && message.attachments.length !== 0))
        return 'single';
    const isTopMessage = !previousMessage ||
        !isOnSameDay(previousMessage.created_at, message.created_at) ||
        previousMessage.type === 'system' ||
        (previousMessage.attachments &&
            ((_a = previousMessage.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0) ||
        ((_b = message.user) === null || _b === void 0 ? void 0 : _b.id) !== ((_c = previousMessage.user) === null || _c === void 0 ? void 0 : _c.id) ||
        previousMessage.type === 'error' ||
        previousMessage.deleted_at ||
        (previousMessage.id === options.lastReadMessageId &&
            !options.noGroupByReadState) ||
        previousMessage.message_text_updated_at ||
        (message.reaction_counts &&
            Object.keys(message.reaction_counts).length > 0);
    const isBottomMessage = !nextMessage ||
        !isOnSameDay(message.created_at, nextMessage.created_at) ||
        nextMessage.type === 'system' ||
        (nextMessage.attachments && ((_d = nextMessage.attachments) === null || _d === void 0 ? void 0 : _d.length) !== 0) ||
        ((_e = message.user) === null || _e === void 0 ? void 0 : _e.id) !== ((_f = nextMessage.user) === null || _f === void 0 ? void 0 : _f.id) ||
        nextMessage.type === 'error' ||
        nextMessage.deleted_at ||
        (message.id === options.lastReadMessageId && !options.noGroupByReadState) ||
        message.message_text_updated_at ||
        (nextMessage.reaction_counts &&
            Object.keys(nextMessage.reaction_counts).length > 0);
    if (!isTopMessage && !isBottomMessage) {
        if (message.deleted_at || message.type === 'error')
            return 'single';
        return 'middle';
    }
    if (isBottomMessage) {
        if (isTopMessage || message.deleted_at || message.type === 'error')
            return 'single';
        return 'bottom';
    }
    if (isTopMessage)
        return 'top';
    return '';
};
const isOnSameDay = (date1, date2) => {
    return (date1.getFullYear() === date2.getFullYear() &&
        date1.getMonth() === date2.getMonth() &&
        date1.getDate() === date2.getDate());
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtc3R5bGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RyZWFtLWNoYXQtYW5ndWxhci9zcmMvbGliL21lc3NhZ2UtbGlzdC9ncm91cC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQzVCLE9BQXNCLEVBQ3RCLGVBQStCLEVBQy9CLFdBQTJCLEVBQzNCLFVBQTZCO0lBQzNCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGlCQUFpQixFQUFFLFNBQVM7SUFDNUIsa0JBQWtCLEVBQUUsS0FBSztDQUMxQixFQUNXLEVBQUU7O0lBQ2QsSUFDRSxPQUFPLENBQUMsYUFBYTtRQUNyQixDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBRXpELE9BQU8sUUFBUSxDQUFDO0lBRWxCLE1BQU0sWUFBWSxHQUNoQixDQUFDLGVBQWU7UUFDaEIsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQzVELGVBQWUsQ0FBQyxJQUFJLEtBQUssUUFBUTtRQUNqQyxDQUFDLGVBQWUsQ0FBQyxXQUFXO1lBQzFCLENBQUEsTUFBQSxlQUFlLENBQUMsV0FBVywwQ0FBRSxNQUFNLE1BQUssQ0FBQyxDQUFDO1FBQzVDLENBQUEsTUFBQSxPQUFPLENBQUMsSUFBSSwwQ0FBRSxFQUFFLE9BQUssTUFBQSxlQUFlLENBQUMsSUFBSSwwQ0FBRSxFQUFFLENBQUE7UUFDN0MsZUFBZSxDQUFDLElBQUksS0FBSyxPQUFPO1FBQ2hDLGVBQWUsQ0FBQyxVQUFVO1FBQzFCLENBQUMsZUFBZSxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsaUJBQWlCO1lBQy9DLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDO1FBQzlCLGVBQWUsQ0FBQyx1QkFBdUI7UUFDdkMsQ0FBQyxPQUFPLENBQUMsZUFBZTtZQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFckQsTUFBTSxlQUFlLEdBQ25CLENBQUMsV0FBVztRQUNaLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQztRQUN4RCxXQUFXLENBQUMsSUFBSSxLQUFLLFFBQVE7UUFDN0IsQ0FBQyxXQUFXLENBQUMsV0FBVyxJQUFJLENBQUEsTUFBQSxXQUFXLENBQUMsV0FBVywwQ0FBRSxNQUFNLE1BQUssQ0FBQyxDQUFDO1FBQ2xFLENBQUEsTUFBQSxPQUFPLENBQUMsSUFBSSwwQ0FBRSxFQUFFLE9BQUssTUFBQSxXQUFXLENBQUMsSUFBSSwwQ0FBRSxFQUFFLENBQUE7UUFDekMsV0FBVyxDQUFDLElBQUksS0FBSyxPQUFPO1FBQzVCLFdBQVcsQ0FBQyxVQUFVO1FBQ3RCLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsaUJBQWlCLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7UUFDekUsT0FBTyxDQUFDLHVCQUF1QjtRQUMvQixDQUFDLFdBQVcsQ0FBQyxlQUFlO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUV6RCxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsZUFBZSxFQUFFO1FBQ3JDLElBQUksT0FBTyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLE9BQU87WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUNwRSxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUVELElBQUksZUFBZSxFQUFFO1FBQ25CLElBQUksWUFBWSxJQUFJLE9BQU8sQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxPQUFPO1lBQ2hFLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBRUQsSUFBSSxZQUFZO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFL0IsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBRyxDQUFDLEtBQVcsRUFBRSxLQUFXLEVBQUUsRUFBRTtJQUMvQyxPQUFPLENBQ0wsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssQ0FBQyxXQUFXLEVBQUU7UUFDM0MsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQUU7UUFDckMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FDcEMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyb3VwU3R5bGVPcHRpb25zLCBTdHJlYW1NZXNzYWdlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBHcm91cFN0eWxlID0gJycgfCAnbWlkZGxlJyB8ICd0b3AnIHwgJ2JvdHRvbScgfCAnc2luZ2xlJztcblxuZXhwb3J0IGNvbnN0IGdldEdyb3VwU3R5bGVzID0gKFxuICBtZXNzYWdlOiBTdHJlYW1NZXNzYWdlLFxuICBwcmV2aW91c01lc3NhZ2U/OiBTdHJlYW1NZXNzYWdlLFxuICBuZXh0TWVzc2FnZT86IFN0cmVhbU1lc3NhZ2UsXG4gIG9wdGlvbnM6IEdyb3VwU3R5bGVPcHRpb25zID0ge1xuICAgIG5vR3JvdXBCeVVzZXI6IGZhbHNlLFxuICAgIGxhc3RSZWFkTWVzc2FnZUlkOiB1bmRlZmluZWQsXG4gICAgbm9Hcm91cEJ5UmVhZFN0YXRlOiBmYWxzZSxcbiAgfVxuKTogR3JvdXBTdHlsZSA9PiB7XG4gIGlmIChcbiAgICBvcHRpb25zLm5vR3JvdXBCeVVzZXIgfHxcbiAgICAobWVzc2FnZS5hdHRhY2htZW50cyAmJiBtZXNzYWdlLmF0dGFjaG1lbnRzLmxlbmd0aCAhPT0gMClcbiAgKVxuICAgIHJldHVybiAnc2luZ2xlJztcblxuICBjb25zdCBpc1RvcE1lc3NhZ2UgPVxuICAgICFwcmV2aW91c01lc3NhZ2UgfHxcbiAgICAhaXNPblNhbWVEYXkocHJldmlvdXNNZXNzYWdlLmNyZWF0ZWRfYXQsIG1lc3NhZ2UuY3JlYXRlZF9hdCkgfHxcbiAgICBwcmV2aW91c01lc3NhZ2UudHlwZSA9PT0gJ3N5c3RlbScgfHxcbiAgICAocHJldmlvdXNNZXNzYWdlLmF0dGFjaG1lbnRzICYmXG4gICAgICBwcmV2aW91c01lc3NhZ2UuYXR0YWNobWVudHM/Lmxlbmd0aCAhPT0gMCkgfHxcbiAgICBtZXNzYWdlLnVzZXI/LmlkICE9PSBwcmV2aW91c01lc3NhZ2UudXNlcj8uaWQgfHxcbiAgICBwcmV2aW91c01lc3NhZ2UudHlwZSA9PT0gJ2Vycm9yJyB8fFxuICAgIHByZXZpb3VzTWVzc2FnZS5kZWxldGVkX2F0IHx8XG4gICAgKHByZXZpb3VzTWVzc2FnZS5pZCA9PT0gb3B0aW9ucy5sYXN0UmVhZE1lc3NhZ2VJZCAmJlxuICAgICAgIW9wdGlvbnMubm9Hcm91cEJ5UmVhZFN0YXRlKSB8fFxuICAgIHByZXZpb3VzTWVzc2FnZS5tZXNzYWdlX3RleHRfdXBkYXRlZF9hdCB8fFxuICAgIChtZXNzYWdlLnJlYWN0aW9uX2NvdW50cyAmJlxuICAgICAgT2JqZWN0LmtleXMobWVzc2FnZS5yZWFjdGlvbl9jb3VudHMpLmxlbmd0aCA+IDApO1xuXG4gIGNvbnN0IGlzQm90dG9tTWVzc2FnZSA9XG4gICAgIW5leHRNZXNzYWdlIHx8XG4gICAgIWlzT25TYW1lRGF5KG1lc3NhZ2UuY3JlYXRlZF9hdCwgbmV4dE1lc3NhZ2UuY3JlYXRlZF9hdCkgfHxcbiAgICBuZXh0TWVzc2FnZS50eXBlID09PSAnc3lzdGVtJyB8fFxuICAgIChuZXh0TWVzc2FnZS5hdHRhY2htZW50cyAmJiBuZXh0TWVzc2FnZS5hdHRhY2htZW50cz8ubGVuZ3RoICE9PSAwKSB8fFxuICAgIG1lc3NhZ2UudXNlcj8uaWQgIT09IG5leHRNZXNzYWdlLnVzZXI/LmlkIHx8XG4gICAgbmV4dE1lc3NhZ2UudHlwZSA9PT0gJ2Vycm9yJyB8fFxuICAgIG5leHRNZXNzYWdlLmRlbGV0ZWRfYXQgfHxcbiAgICAobWVzc2FnZS5pZCA9PT0gb3B0aW9ucy5sYXN0UmVhZE1lc3NhZ2VJZCAmJiAhb3B0aW9ucy5ub0dyb3VwQnlSZWFkU3RhdGUpIHx8XG4gICAgbWVzc2FnZS5tZXNzYWdlX3RleHRfdXBkYXRlZF9hdCB8fFxuICAgIChuZXh0TWVzc2FnZS5yZWFjdGlvbl9jb3VudHMgJiZcbiAgICAgIE9iamVjdC5rZXlzKG5leHRNZXNzYWdlLnJlYWN0aW9uX2NvdW50cykubGVuZ3RoID4gMCk7XG5cbiAgaWYgKCFpc1RvcE1lc3NhZ2UgJiYgIWlzQm90dG9tTWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlLmRlbGV0ZWRfYXQgfHwgbWVzc2FnZS50eXBlID09PSAnZXJyb3InKSByZXR1cm4gJ3NpbmdsZSc7XG4gICAgcmV0dXJuICdtaWRkbGUnO1xuICB9XG5cbiAgaWYgKGlzQm90dG9tTWVzc2FnZSkge1xuICAgIGlmIChpc1RvcE1lc3NhZ2UgfHwgbWVzc2FnZS5kZWxldGVkX2F0IHx8IG1lc3NhZ2UudHlwZSA9PT0gJ2Vycm9yJylcbiAgICAgIHJldHVybiAnc2luZ2xlJztcbiAgICByZXR1cm4gJ2JvdHRvbSc7XG4gIH1cblxuICBpZiAoaXNUb3BNZXNzYWdlKSByZXR1cm4gJ3RvcCc7XG5cbiAgcmV0dXJuICcnO1xufTtcblxuY29uc3QgaXNPblNhbWVEYXkgPSAoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKSA9PiB7XG4gIHJldHVybiAoXG4gICAgZGF0ZTEuZ2V0RnVsbFllYXIoKSA9PT0gZGF0ZTIuZ2V0RnVsbFllYXIoKSAmJlxuICAgIGRhdGUxLmdldE1vbnRoKCkgPT09IGRhdGUyLmdldE1vbnRoKCkgJiZcbiAgICBkYXRlMS5nZXREYXRlKCkgPT09IGRhdGUyLmdldERhdGUoKVxuICApO1xufTtcbiJdfQ==