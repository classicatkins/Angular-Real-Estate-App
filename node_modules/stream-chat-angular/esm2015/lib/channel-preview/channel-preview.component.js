import { Component, Input } from '@angular/core';
import { filter } from 'rxjs/operators';
import { getChannelDisplayText } from '../get-channel-display-text';
import { getMessageTranslation } from '../get-message-translation';
import { getReadBy } from '../read-by';
import { isOnSeparateDate } from '../is-on-separate-date';
import * as i0 from "@angular/core";
import * as i1 from "../channel.service";
import * as i2 from "../chat-client.service";
import * as i3 from "../message.service";
import * as i4 from "../custom-templates.service";
import * as i5 from "../date-parser.service";
import * as i6 from "../avatar-placeholder/avatar-placeholder.component";
import * as i7 from "../icon-placeholder/icon-placeholder.component";
import * as i8 from "@angular/common";
import * as i9 from "@ngx-translate/core";
/**
 * The `ChannelPreview` component displays a channel preview in the channel list, it consists of the image, name and latest message of the channel.
 */
export class ChannelPreviewComponent {
    constructor(channelService, ngZone, chatClientService, messageService, customTemplatesService, dateParser) {
        this.channelService = channelService;
        this.ngZone = ngZone;
        this.chatClientService = chatClientService;
        this.customTemplatesService = customTemplatesService;
        this.dateParser = dateParser;
        this.isActive = false;
        this.isUnreadMessageWasCalled = false;
        this.isUnread = false;
        this.latestMessageText = 'streamChat.Nothing yet...';
        this.subscriptions = [];
        this.canSendReadEvents = true;
        this.displayAs = messageService.displayAs;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        this.subscriptions.push(this.chatClientService.user$.subscribe((user) => {
            if ((user === null || user === void 0 ? void 0 : user.id) !== this.userId) {
                this.userId = user === null || user === void 0 ? void 0 : user.id;
            }
        }));
        this.subscriptions.push(this.channelService.activeChannel$.subscribe((activeChannel) => { var _a; return (this.isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.id) === ((_a = this.channel) === null || _a === void 0 ? void 0 : _a.id)); }));
        const messages = (_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.latestMessages;
        if (messages && messages.length > 0) {
            this.setLatestMessage(messages[messages.length - 1]);
        }
        this.updateUnreadState();
        const capabilities = ((_d = (_c = this.channel) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.own_capabilities) || [];
        this.canSendReadEvents = capabilities.indexOf('read-events') !== -1;
        this.subscriptions.push(this.channel.on('message.new', this.handleMessageEvent.bind(this)));
        this.subscriptions.push(this.channel.on('message.updated', this.handleMessageEvent.bind(this)));
        this.subscriptions.push(this.channel.on('message.deleted', this.handleMessageEvent.bind(this)));
        this.subscriptions.push(this.channel.on('channel.truncated', this.handleMessageEvent.bind(this)));
        this.subscriptions.push(this.channel.on('message.read', () => this.ngZone.run(() => {
            this.isUnreadMessageWasCalled = false;
            this.updateUnreadState();
        })));
        this.subscriptions.push(this.chatClientService.events$
            .pipe(filter((e) => {
            var _a;
            return e.eventType === 'notification.mark_unread' &&
                this.channel.id === ((_a = e.event) === null || _a === void 0 ? void 0 : _a.channel_id);
        }))
            .subscribe(() => {
            this.ngZone.run(() => {
                this.isUnreadMessageWasCalled = true;
                this.updateUnreadState();
            });
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    get avatarImage() {
        var _a, _b;
        return (_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.image;
    }
    get avatarName() {
        var _a, _b;
        return (_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.name;
    }
    get title() {
        if (!this.channel) {
            return '';
        }
        return getChannelDisplayText(this.channel, this.chatClientService.chatClient.user);
    }
    setAsActiveChannel() {
        void this.channelService.setAsActiveChannel(this.channel);
    }
    handleMessageEvent(event) {
        this.ngZone.run(() => {
            var _a, _b, _c;
            if (((_a = this.channel) === null || _a === void 0 ? void 0 : _a.state.latestMessages.length) === 0) {
                this.latestMessage = undefined;
                this.latestMessageStatus = undefined;
                this.latestMessageText = 'streamChat.Nothing yet...';
                this.latestMessageTime = undefined;
                return;
            }
            const latestMessage = (_b = this.channel) === null || _b === void 0 ? void 0 : _b.state.latestMessages[((_c = this.channel) === null || _c === void 0 ? void 0 : _c.state.latestMessages.length) - 1];
            if (!event.message || (latestMessage === null || latestMessage === void 0 ? void 0 : latestMessage.id) !== event.message.id) {
                return;
            }
            this.setLatestMessage(latestMessage);
            this.updateUnreadState();
        });
    }
    setLatestMessage(message) {
        this.latestMessage = message;
        if (message === null || message === void 0 ? void 0 : message.deleted_at) {
            this.latestMessageText = 'streamChat.Message deleted';
        }
        else if (message === null || message === void 0 ? void 0 : message.text) {
            this.latestMessageText =
                getMessageTranslation(message, this.channel, this.chatClientService.chatClient.user) || message.text;
        }
        else if ((message === null || message === void 0 ? void 0 : message.attachments) && message.attachments.length) {
            this.latestMessageText = 'streamChat.🏙 Attachment...';
        }
        if (this.latestMessage && this.latestMessage.type === 'regular') {
            this.latestMessageTime = isOnSeparateDate(new Date(), this.latestMessage.created_at)
                ? this.dateParser.parseDate(this.latestMessage.created_at)
                : this.dateParser.parseTime(this.latestMessage.created_at);
        }
        else {
            this.latestMessageTime = undefined;
        }
    }
    updateUnreadState() {
        var _a;
        if (this.channel &&
            this.latestMessage &&
            ((_a = this.latestMessage.user) === null || _a === void 0 ? void 0 : _a.id) === this.userId &&
            this.latestMessage.status === 'received' &&
            this.latestMessage.type === 'regular') {
            this.latestMessageStatus =
                getReadBy(this.latestMessage, this.channel).length > 0
                    ? 'read'
                    : 'delivered';
        }
        else {
            this.latestMessageStatus = undefined;
        }
        if ((this.isActive && !this.isUnreadMessageWasCalled) ||
            !this.canSendReadEvents) {
            this.unreadCount = 0;
            this.isUnread = false;
            return;
        }
        this.unreadCount = this.channel.countUnread();
        this.isUnread = !!this.unreadCount;
    }
}
ChannelPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelPreviewComponent, deps: [{ token: i1.ChannelService }, { token: i0.NgZone }, { token: i2.ChatClientService }, { token: i3.MessageService }, { token: i4.CustomTemplatesService }, { token: i5.DateParserService }], target: i0.ɵɵFactoryTarget.Component });
ChannelPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: ChannelPreviewComponent, selector: "stream-channel-preview", inputs: { channel: "channel" }, ngImport: i0, template: "<button\n  class=\"str-chat__channel-preview-messenger str-chat__channel-preview\"\n  [class.str-chat__channel-preview-messenger--active]=\"isActive\"\n  [class.str-chat__channel-preview--active]=\"isActive\"\n  [class.str-chat__channel-preview-messenger--unread]=\"isUnread\"\n  (click)=\"setAsActiveChannel()\"\n  data-testid=\"channel-preview-container\"\n>\n  <div class=\"str-chat__channel-preview-messenger--left\">\n    <stream-avatar-placeholder\n      name=\"{{ avatarName }}\"\n      imageUrl=\"{{ avatarImage }}\"\n      type=\"channel\"\n      [channel]=\"channel\"\n      location=\"channel-preview\"\n      [size]=\"49\"\n    ></stream-avatar-placeholder>\n  </div>\n  <div\n    class=\"\n      str-chat__channel-preview-messenger--right str-chat__channel-preview-end\n    \"\n  >\n    <ng-container\n      *ngTemplateOutlet=\"\n        (customTemplatesService.channelPreviewInfoTemplate$ | async) ||\n          defaultChannelInfo;\n        context: {\n          channelDisplayTitle: title,\n          channel: channel,\n          unreadCount: unreadCount,\n          latestMessageText: latestMessageText,\n          latestMessageStatus: latestMessageStatus,\n          latestMessageTime: latestMessageTime,\n          latestMessage: latestMessage\n        }\n      \"\n    ></ng-container>\n    <ng-template\n      #defaultChannelInfo\n      let-channelDisplayTitle=\"channelDisplayTitle\"\n      let-unreadCount=\"unreadCount\"\n      let-latestMessageText=\"latestMessageText\"\n      let-latestMessageStatus=\"latestMessageStatus\"\n      let-latestMessageTime=\"latestMessageTime\"\n    >\n      <div class=\"str-chat__channel-preview-end-first-row\">\n        <div class=\"str-chat__channel-preview-messenger--name\">\n          <span data-testid=\"channel-preview-title\">{{\n            channelDisplayTitle\n          }}</span>\n        </div>\n        <div\n          data-testid=\"unread-badge\"\n          *ngIf=\"unreadCount\"\n          class=\"str-chat__channel-preview-unread-badge\"\n        >\n          {{ unreadCount }}\n        </div>\n      </div>\n      <div class=\"str-chat__channel-preview-end-second-row\">\n        <div\n          data-testid=\"latest-message\"\n          class=\"str-chat__channel-preview-messenger--last-message\"\n        >\n          <ng-container *ngIf=\"displayAs === 'text'; else asHTML\">\n            {{ latestMessageText | translate }}\n          </ng-container>\n          <ng-template #asHTML>\n            <span\n              data-testid=\"html-content\"\n              [innerHTML]=\"latestMessageText | translate\"\n            ></span>\n          </ng-template>\n        </div>\n        <div\n          data-testid=\"latest-message-status\"\n          *ngIf=\"latestMessageStatus\"\n          class=\"str-chat__channel-preview-messenger--status str-chat__channel-preview-messenger--status-{{\n            latestMessageStatus\n          }}\"\n        >\n          <stream-icon-placeholder\n            [icon]=\"\n              latestMessageStatus === 'delivered'\n                ? 'delivered-icon'\n                : 'read-icon'\n            \"\n          ></stream-icon-placeholder>\n        </div>\n        <div\n          data-testid=\"latest-message-time\"\n          class=\"str-chat__channel-preview-messenger--time\"\n          *ngIf=\"latestMessageTime\"\n        >\n          {{ latestMessageTime }}\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</button>\n", components: [{ type: i6.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "size", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }, { type: i7.IconPlaceholderComponent, selector: "stream-icon-placeholder", inputs: ["icon", "size"] }], directives: [{ type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i8.AsyncPipe, "translate": i9.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelPreviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-channel-preview',
                    templateUrl: './channel-preview.component.html',
                    styles: [],
                }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i0.NgZone }, { type: i2.ChatClientService }, { type: i3.MessageService }, { type: i4.CustomTemplatesService }, { type: i5.DateParserService }]; }, propDecorators: { channel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,