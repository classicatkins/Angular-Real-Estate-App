import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * The `ThemeService` can be used to change the theme of the chat UI and to customize the theme. Our [theming guide](../theming/introduction.mdx) gives a complete overview about the topic.
 */
export class ThemeService {
    constructor() {
        /**
         * A Subject that can be used to get or set the currently active theme.
         */
        this.theme$ = new BehaviorSubject('light');
        this.defaultDarkModeVariables = {
            '--bg-gradient-end': '#101214',
            '--bg-gradient-start': '#070a0d',
            '--black': '#ffffff',
            '--blue-alice': '#00193d',
            '--border': '#141924',
            '--button-background': '#ffffff',
            '--button-text': '#005fff',
            '--grey': '#7a7a7a',
            '--grey-gainsboro': '#2d2f2f',
            '--grey-whisper': '#1c1e22',
            '--modal-shadow': '#000000',
            '--overlay': '#00000066',
            '--overlay-dark': '#ffffffcc',
            '--shadow-icon': '#00000080',
            '--targetedMessageBackground': '#302d22',
            '--transparent': 'transparent',
            '--white': '#101418',
            '--white-smoke': '#13151b',
            '--white-snow': '#070a0d',
        };
        this.variablesToDelete = [];
        this.theme$.subscribe((theme) => {
            const darkVariables = this.customDarkThemeVariables
                ? Object.assign(Object.assign({}, this.defaultDarkModeVariables), this.customDarkThemeVariables) : this.defaultDarkModeVariables;
            const lightVariables = this.customLightThemeVariables
                ? this.customLightThemeVariables
                : {};
            this.variablesToDelete.forEach((variables) => this.deleteVariables(variables));
            if (theme === 'dark') {
                this.deleteVariables(lightVariables);
                this.setVariables(darkVariables);
            }
            else {
                this.deleteVariables(darkVariables);
                this.setVariables(lightVariables);
            }
        });
        this.themeVersion = (getComputedStyle(document.documentElement)
            .getPropertyValue('--str-chat__theme-version')
            .replace(' ', '') || '1');
    }
    /**
     * A getter that returns the currently set custom light theme variables.
     * @deprecated Only use with [theme v1](../concepts/theming-and-css.mdx)
     * @returns An object where the keys are theme variables, and the values are the currently set CSS values.
     */
    get customLightThemeVariables() {
        return this._customLightThemeVariables;
    }
    /**
     * A setter that can be used to overwrite the values of the CSS theme variables of the light theme.
     * @deprecated Only use with [theme v1](../concepts/theming-and-css.mdx)
     * @param variables An object where the keys are theme variables, and the values are CSS values.
     */
    set customLightThemeVariables(variables) {
        const prevVariables = this.customLightThemeVariables;
        if (prevVariables) {
            this.variablesToDelete.push(prevVariables);
        }
        this._customLightThemeVariables = variables;
        if (this.theme$.getValue() === 'light') {
            this.theme$.next('light');
        }
    }
    /**
     * A getter that returns the currently set custom dark theme variables.
     * @deprecated Only use with [theme v1](../concepts/theming-and-css.mdx)
     * @returns An object where the keys are theme variables, and the values are the currently set CSS values.
     */
    get customDarkThemeVariables() {
        return this._customDarkThemeVariables;
    }
    /**
     * A setter that can be used to overwrite the values of the CSS theme variables of the dark theme.
     * @deprecated Only use with [theme v1](../concepts/theming-and-css.mdx)
     * @param variables An object where the keys are theme variables, and the values are CSS values.
     */
    set customDarkThemeVariables(variables) {
        const prevVariables = this.customDarkThemeVariables;
        if (prevVariables) {
            this.variablesToDelete.push(prevVariables);
        }
        this._customDarkThemeVariables = variables;
        if (this.theme$.getValue() === 'dark') {
            this.theme$.next('dark');
        }
    }
    deleteVariables(variables) {
        if (!variables) {
            return;
        }
        Object.keys(variables).forEach((key) => document.documentElement.style.setProperty(key, null));
    }
    setVariables(variables) {
        if (!variables) {
            return;
        }
        Object.keys(variables).forEach((key) => document.documentElement.style.setProperty(key, variables[key]));
    }
}
ThemeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ThemeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ThemeService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi90aGVtZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFJdkM7O0dBRUc7QUFJSCxNQUFNLE9BQU8sWUFBWTtJQWtDdkI7UUFqQ0E7O1dBRUc7UUFDSCxXQUFNLEdBQUcsSUFBSSxlQUFlLENBQWlCLE9BQU8sQ0FBQyxDQUFDO1FBTzlDLDZCQUF3QixHQUFHO1lBQ2pDLG1CQUFtQixFQUFFLFNBQVM7WUFDOUIscUJBQXFCLEVBQUUsU0FBUztZQUNoQyxTQUFTLEVBQUUsU0FBUztZQUNwQixjQUFjLEVBQUUsU0FBUztZQUN6QixVQUFVLEVBQUUsU0FBUztZQUNyQixxQkFBcUIsRUFBRSxTQUFTO1lBQ2hDLGVBQWUsRUFBRSxTQUFTO1lBQzFCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLGtCQUFrQixFQUFFLFNBQVM7WUFDN0IsZ0JBQWdCLEVBQUUsU0FBUztZQUMzQixnQkFBZ0IsRUFBRSxTQUFTO1lBQzNCLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLGdCQUFnQixFQUFFLFdBQVc7WUFDN0IsZUFBZSxFQUFFLFdBQVc7WUFDNUIsNkJBQTZCLEVBQUUsU0FBUztZQUN4QyxlQUFlLEVBQUUsYUFBYTtZQUM5QixTQUFTLEVBQUUsU0FBUztZQUNwQixlQUFlLEVBQUUsU0FBUztZQUMxQixjQUFjLEVBQUUsU0FBUztTQUMxQixDQUFDO1FBQ00sc0JBQWlCLEdBQWdDLEVBQUUsQ0FBQztRQUcxRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzlCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyx3QkFBd0I7Z0JBQ2pELENBQUMsaUNBQU0sSUFBSSxDQUFDLHdCQUF3QixHQUFLLElBQUksQ0FBQyx3QkFBd0IsRUFDdEUsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztZQUNsQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMseUJBQXlCO2dCQUNuRCxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QjtnQkFDaEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNQLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUMzQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUNoQyxDQUFDO1lBQ0YsSUFBSSxLQUFLLEtBQUssTUFBTSxFQUFFO2dCQUNwQixJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ2xDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7YUFDbkM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO2FBQzVELGdCQUFnQixDQUFDLDJCQUEyQixDQUFDO2FBQzdDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFjLENBQUM7SUFDM0MsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFJLHlCQUF5QjtRQUMzQixPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUkseUJBQXlCLENBQzNCLFNBQWdEO1FBRWhELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztRQUNyRCxJQUFJLGFBQWEsRUFBRTtZQUNqQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsSUFBSSxDQUFDLDBCQUEwQixHQUFHLFNBQVMsQ0FBQztRQUM1QyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssT0FBTyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFJLHdCQUF3QjtRQUMxQixPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksd0JBQXdCLENBQzFCLFNBQWdEO1FBRWhELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztRQUNwRCxJQUFJLGFBQWEsRUFBRTtZQUNqQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsSUFBSSxDQUFDLHlCQUF5QixHQUFHLFNBQVMsQ0FBQztRQUMzQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssTUFBTSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVPLGVBQWUsQ0FBQyxTQUFnRDtRQUN0RSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTztTQUNSO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUNyQyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUN0RCxDQUFDO0lBQ0osQ0FBQztJQUVPLFlBQVksQ0FBQyxTQUFnRDtRQUNuRSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTztTQUNSO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUNyQyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNoRSxDQUFDO0lBQ0osQ0FBQzs7eUdBaklVLFlBQVk7NkdBQVosWUFBWSxjQUZYLE1BQU07MkZBRVAsWUFBWTtrQkFIeEIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgVGhlbWUgPSAnbGlnaHQnIHwgJ2RhcmsnO1xuXG4vKipcbiAqIFRoZSBgVGhlbWVTZXJ2aWNlYCBjYW4gYmUgdXNlZCB0byBjaGFuZ2UgdGhlIHRoZW1lIG9mIHRoZSBjaGF0IFVJIGFuZCB0byBjdXN0b21pemUgdGhlIHRoZW1lLiBPdXIgW3RoZW1pbmcgZ3VpZGVdKC4uL3RoZW1pbmcvaW50cm9kdWN0aW9uLm1keCkgZ2l2ZXMgYSBjb21wbGV0ZSBvdmVydmlldyBhYm91dCB0aGUgdG9waWMuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBUaGVtZVNlcnZpY2Uge1xuICAvKipcbiAgICogQSBTdWJqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gZ2V0IG9yIHNldCB0aGUgY3VycmVudGx5IGFjdGl2ZSB0aGVtZS5cbiAgICovXG4gIHRoZW1lJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VGhlbWUgfCBzdHJpbmc+KCdsaWdodCcpO1xuICAvKipcbiAgICogU3RyZWFtIGNoYXQgdGhlbWUgdmVyc2lvbiAtIHRoaXMgaXMgdXNlZCBpbnRlcm5hbGx5IGJ5IHNvbWUgVUkgY29tcG9uZW50cyBvZiB0aGUgU0RLLCBpbnRlZ3JhdG9ycyBzaG91bGRuJ3QgbmVlZCB0byB1c2UgdGhpcyB2YXJpYWJsZVxuICAgKi9cbiAgdGhlbWVWZXJzaW9uOiAnMScgfCAnMic7XG4gIHByaXZhdGUgX2N1c3RvbUxpZ2h0VGhlbWVWYXJpYWJsZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX2N1c3RvbURhcmtUaGVtZVZhcmlhYmxlczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBkZWZhdWx0RGFya01vZGVWYXJpYWJsZXMgPSB7XG4gICAgJy0tYmctZ3JhZGllbnQtZW5kJzogJyMxMDEyMTQnLFxuICAgICctLWJnLWdyYWRpZW50LXN0YXJ0JzogJyMwNzBhMGQnLFxuICAgICctLWJsYWNrJzogJyNmZmZmZmYnLFxuICAgICctLWJsdWUtYWxpY2UnOiAnIzAwMTkzZCcsXG4gICAgJy0tYm9yZGVyJzogJyMxNDE5MjQnLFxuICAgICctLWJ1dHRvbi1iYWNrZ3JvdW5kJzogJyNmZmZmZmYnLFxuICAgICctLWJ1dHRvbi10ZXh0JzogJyMwMDVmZmYnLFxuICAgICctLWdyZXknOiAnIzdhN2E3YScsXG4gICAgJy0tZ3JleS1nYWluc2Jvcm8nOiAnIzJkMmYyZicsXG4gICAgJy0tZ3JleS13aGlzcGVyJzogJyMxYzFlMjInLFxuICAgICctLW1vZGFsLXNoYWRvdyc6ICcjMDAwMDAwJyxcbiAgICAnLS1vdmVybGF5JzogJyMwMDAwMDA2NicsIC8vIDY2ID0gNDAlIG9wYWNpdHlcbiAgICAnLS1vdmVybGF5LWRhcmsnOiAnI2ZmZmZmZmNjJywgLy8gQ0MgPSA4MCUgb3BhY2l0eVxuICAgICctLXNoYWRvdy1pY29uJzogJyMwMDAwMDA4MCcsIC8vIDgwID0gNTAlIG9wYWNpdHlcbiAgICAnLS10YXJnZXRlZE1lc3NhZ2VCYWNrZ3JvdW5kJzogJyMzMDJkMjInLFxuICAgICctLXRyYW5zcGFyZW50JzogJ3RyYW5zcGFyZW50JyxcbiAgICAnLS13aGl0ZSc6ICcjMTAxNDE4JyxcbiAgICAnLS13aGl0ZS1zbW9rZSc6ICcjMTMxNTFiJyxcbiAgICAnLS13aGl0ZS1zbm93JzogJyMwNzBhMGQnLFxuICB9O1xuICBwcml2YXRlIHZhcmlhYmxlc1RvRGVsZXRlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9W10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnRoZW1lJC5zdWJzY3JpYmUoKHRoZW1lKSA9PiB7XG4gICAgICBjb25zdCBkYXJrVmFyaWFibGVzID0gdGhpcy5jdXN0b21EYXJrVGhlbWVWYXJpYWJsZXNcbiAgICAgICAgPyB7IC4uLnRoaXMuZGVmYXVsdERhcmtNb2RlVmFyaWFibGVzLCAuLi50aGlzLmN1c3RvbURhcmtUaGVtZVZhcmlhYmxlcyB9XG4gICAgICAgIDogdGhpcy5kZWZhdWx0RGFya01vZGVWYXJpYWJsZXM7XG4gICAgICBjb25zdCBsaWdodFZhcmlhYmxlcyA9IHRoaXMuY3VzdG9tTGlnaHRUaGVtZVZhcmlhYmxlc1xuICAgICAgICA/IHRoaXMuY3VzdG9tTGlnaHRUaGVtZVZhcmlhYmxlc1xuICAgICAgICA6IHt9O1xuICAgICAgdGhpcy52YXJpYWJsZXNUb0RlbGV0ZS5mb3JFYWNoKCh2YXJpYWJsZXMpID0+XG4gICAgICAgIHRoaXMuZGVsZXRlVmFyaWFibGVzKHZhcmlhYmxlcylcbiAgICAgICk7XG4gICAgICBpZiAodGhlbWUgPT09ICdkYXJrJykge1xuICAgICAgICB0aGlzLmRlbGV0ZVZhcmlhYmxlcyhsaWdodFZhcmlhYmxlcyk7XG4gICAgICAgIHRoaXMuc2V0VmFyaWFibGVzKGRhcmtWYXJpYWJsZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWxldGVWYXJpYWJsZXMoZGFya1ZhcmlhYmxlcyk7XG4gICAgICAgIHRoaXMuc2V0VmFyaWFibGVzKGxpZ2h0VmFyaWFibGVzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMudGhlbWVWZXJzaW9uID0gKGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KVxuICAgICAgLmdldFByb3BlcnR5VmFsdWUoJy0tc3RyLWNoYXRfX3RoZW1lLXZlcnNpb24nKVxuICAgICAgLnJlcGxhY2UoJyAnLCAnJykgfHwgJzEnKSBhcyAnMScgfCAnMic7XG4gIH1cblxuICAvKipcbiAgICogQSBnZXR0ZXIgdGhhdCByZXR1cm5zIHRoZSBjdXJyZW50bHkgc2V0IGN1c3RvbSBsaWdodCB0aGVtZSB2YXJpYWJsZXMuXG4gICAqIEBkZXByZWNhdGVkIE9ubHkgdXNlIHdpdGggW3RoZW1lIHYxXSguLi9jb25jZXB0cy90aGVtaW5nLWFuZC1jc3MubWR4KVxuICAgKiBAcmV0dXJucyBBbiBvYmplY3Qgd2hlcmUgdGhlIGtleXMgYXJlIHRoZW1lIHZhcmlhYmxlcywgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjdXJyZW50bHkgc2V0IENTUyB2YWx1ZXMuXG4gICAqL1xuICBnZXQgY3VzdG9tTGlnaHRUaGVtZVZhcmlhYmxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tTGlnaHRUaGVtZVZhcmlhYmxlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNldHRlciB0aGF0IGNhbiBiZSB1c2VkIHRvIG92ZXJ3cml0ZSB0aGUgdmFsdWVzIG9mIHRoZSBDU1MgdGhlbWUgdmFyaWFibGVzIG9mIHRoZSBsaWdodCB0aGVtZS5cbiAgICogQGRlcHJlY2F0ZWQgT25seSB1c2Ugd2l0aCBbdGhlbWUgdjFdKC4uL2NvbmNlcHRzL3RoZW1pbmctYW5kLWNzcy5tZHgpXG4gICAqIEBwYXJhbSB2YXJpYWJsZXMgQW4gb2JqZWN0IHdoZXJlIHRoZSBrZXlzIGFyZSB0aGVtZSB2YXJpYWJsZXMsIGFuZCB0aGUgdmFsdWVzIGFyZSBDU1MgdmFsdWVzLlxuICAgKi9cbiAgc2V0IGN1c3RvbUxpZ2h0VGhlbWVWYXJpYWJsZXMoXG4gICAgdmFyaWFibGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9IHwgdW5kZWZpbmVkXG4gICkge1xuICAgIGNvbnN0IHByZXZWYXJpYWJsZXMgPSB0aGlzLmN1c3RvbUxpZ2h0VGhlbWVWYXJpYWJsZXM7XG4gICAgaWYgKHByZXZWYXJpYWJsZXMpIHtcbiAgICAgIHRoaXMudmFyaWFibGVzVG9EZWxldGUucHVzaChwcmV2VmFyaWFibGVzKTtcbiAgICB9XG4gICAgdGhpcy5fY3VzdG9tTGlnaHRUaGVtZVZhcmlhYmxlcyA9IHZhcmlhYmxlcztcbiAgICBpZiAodGhpcy50aGVtZSQuZ2V0VmFsdWUoKSA9PT0gJ2xpZ2h0Jykge1xuICAgICAgdGhpcy50aGVtZSQubmV4dCgnbGlnaHQnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBnZXR0ZXIgdGhhdCByZXR1cm5zIHRoZSBjdXJyZW50bHkgc2V0IGN1c3RvbSBkYXJrIHRoZW1lIHZhcmlhYmxlcy5cbiAgICogQGRlcHJlY2F0ZWQgT25seSB1c2Ugd2l0aCBbdGhlbWUgdjFdKC4uL2NvbmNlcHRzL3RoZW1pbmctYW5kLWNzcy5tZHgpXG4gICAqIEByZXR1cm5zIEFuIG9iamVjdCB3aGVyZSB0aGUga2V5cyBhcmUgdGhlbWUgdmFyaWFibGVzLCBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGN1cnJlbnRseSBzZXQgQ1NTIHZhbHVlcy5cbiAgICovXG4gIGdldCBjdXN0b21EYXJrVGhlbWVWYXJpYWJsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbURhcmtUaGVtZVZhcmlhYmxlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNldHRlciB0aGF0IGNhbiBiZSB1c2VkIHRvIG92ZXJ3cml0ZSB0aGUgdmFsdWVzIG9mIHRoZSBDU1MgdGhlbWUgdmFyaWFibGVzIG9mIHRoZSBkYXJrIHRoZW1lLlxuICAgKiBAZGVwcmVjYXRlZCBPbmx5IHVzZSB3aXRoIFt0aGVtZSB2MV0oLi4vY29uY2VwdHMvdGhlbWluZy1hbmQtY3NzLm1keClcbiAgICogQHBhcmFtIHZhcmlhYmxlcyBBbiBvYmplY3Qgd2hlcmUgdGhlIGtleXMgYXJlIHRoZW1lIHZhcmlhYmxlcywgYW5kIHRoZSB2YWx1ZXMgYXJlIENTUyB2YWx1ZXMuXG4gICAqL1xuICBzZXQgY3VzdG9tRGFya1RoZW1lVmFyaWFibGVzKFxuICAgIHZhcmlhYmxlczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB8IHVuZGVmaW5lZFxuICApIHtcbiAgICBjb25zdCBwcmV2VmFyaWFibGVzID0gdGhpcy5jdXN0b21EYXJrVGhlbWVWYXJpYWJsZXM7XG4gICAgaWYgKHByZXZWYXJpYWJsZXMpIHtcbiAgICAgIHRoaXMudmFyaWFibGVzVG9EZWxldGUucHVzaChwcmV2VmFyaWFibGVzKTtcbiAgICB9XG4gICAgdGhpcy5fY3VzdG9tRGFya1RoZW1lVmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgIGlmICh0aGlzLnRoZW1lJC5nZXRWYWx1ZSgpID09PSAnZGFyaycpIHtcbiAgICAgIHRoaXMudGhlbWUkLm5leHQoJ2RhcmsnKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRlbGV0ZVZhcmlhYmxlcyh2YXJpYWJsZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gfCB1bmRlZmluZWQpIHtcbiAgICBpZiAoIXZhcmlhYmxlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyh2YXJpYWJsZXMpLmZvckVhY2goKGtleSkgPT5cbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIG51bGwpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0VmFyaWFibGVzKHZhcmlhYmxlczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB8IHVuZGVmaW5lZCkge1xuICAgIGlmICghdmFyaWFibGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHZhcmlhYmxlcykuZm9yRWFjaCgoa2V5KSA9PlxuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFyaWFibGVzW2tleV0pXG4gICAgKTtcbiAgfVxufVxuIl19