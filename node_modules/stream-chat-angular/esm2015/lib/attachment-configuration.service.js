import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * The `AttachmentConfigurationService` provides customization for certain attributes of attachments displayed inside the message component. If you're using your own CDN, you can integrate resizing features of it by providing your own handlers.
 */
export class AttachmentConfigurationService {
    constructor() {
        /**
         * You can turn on/off thumbnail generation for video attachments
         */
        this.shouldGenerateVideoThumbnail = true;
    }
    /**
     * Handles the configuration for image attachments, it's possible to provide your own function to override the default logic
     * @param attachment The attachment to configure
     * @param location Specifies where the image is being displayed
     * @param element The default resizing logics reads the height/max-height and max-width propperties of this element and reduces file size based on the given values. File size reduction is done by Stream's CDN.
     */
    getImageAttachmentConfiguration(attachment, location, element) {
        if (this.customImageAttachmentConfigurationHandler) {
            return this.customImageAttachmentConfigurationHandler(attachment, location, element);
        }
        const defaultOriginalDimension = 1000000;
        const urlString = (attachment.img_url ||
            attachment.thumb_url ||
            attachment.image_url ||
            '');
        let url;
        try {
            url = new URL(urlString);
        }
        catch (error) {
            return {
                url: urlString,
                width: '',
                height: '',
                originalHeight: defaultOriginalDimension,
                originalWidth: defaultOriginalDimension,
            };
        }
        const originalHeight = Number(url.searchParams.get('oh')) > 1
            ? Number(url.searchParams.get('oh'))
            : defaultOriginalDimension;
        const originalWidth = Number(url.searchParams.get('ow')) > 1
            ? Number(url.searchParams.get('ow'))
            : defaultOriginalDimension;
        const displayWarning = location === 'gallery' || location === 'single';
        const sizeRestriction = this.getSizingRestrictions(url, element, displayWarning);
        if (sizeRestriction) {
            // Apply 2x for retina displays
            sizeRestriction.height *= 2;
            sizeRestriction.width *= 2;
            this.addResizingParamsToUrl(sizeRestriction, url);
        }
        return {
            url: url.href,
            width: '',
            height: '',
            originalHeight,
            originalWidth,
        };
    }
    /**
     * Handles the configuration for video attachments, it's possible to provide your own function to override the default logic
     * @param attachment The attachment to configure
     * @param element The default resizing logics reads the height/max-height and max-width propperties of this element and reduces file size based on the given values. File size reduction is done by Stream's CDN.
     */
    getVideoAttachmentConfiguration(attachment, element) {
        if (this.customVideoAttachmentConfigurationHandler) {
            return this.customVideoAttachmentConfigurationHandler(attachment, element);
        }
        let thumbUrl = undefined;
        let originalHeight = 1000000;
        let originalWidth = 1000000;
        if (attachment.thumb_url && this.shouldGenerateVideoThumbnail) {
            let url;
            try {
                url = new URL(attachment.thumb_url);
                originalHeight =
                    Number(url.searchParams.get('oh')) > 1
                        ? Number(url.searchParams.get('oh'))
                        : originalHeight;
                originalWidth =
                    Number(url.searchParams.get('ow')) > 1
                        ? Number(url.searchParams.get('ow'))
                        : originalWidth;
                const displayWarning = true;
                const sizeRestriction = this.getSizingRestrictions(url, element, displayWarning);
                if (sizeRestriction) {
                    sizeRestriction.height *= 2;
                    sizeRestriction.width *= 2;
                    this.addResizingParamsToUrl(sizeRestriction, url);
                }
                thumbUrl = url.href;
            }
            catch (_a) {
                thumbUrl = attachment.thumb_url;
            }
        }
        return {
            url: attachment.asset_url || '',
            width: '',
            height: '',
            thumbUrl: thumbUrl,
            originalHeight,
            originalWidth,
        };
    }
    /**
     * Handles the configuration for giphy attachments, it's possible to provide your own function to override the default logic
     * @param attachment The attachment to configure
     */
    getGiphyAttachmentConfiguration(attachment) {
        var _a;
        if (this.customGiphyAttachmentConfigurationHandler) {
            return this.customGiphyAttachmentConfigurationHandler(attachment);
        }
        const giphy = (_a = attachment.giphy) === null || _a === void 0 ? void 0 : _a.fixed_height_downsampled;
        return {
            url: (giphy === null || giphy === void 0 ? void 0 : giphy.url) || attachment.image_url || attachment.thumb_url || '',
            height: (giphy === null || giphy === void 0 ? void 0 : giphy.height) ? `${giphy === null || giphy === void 0 ? void 0 : giphy.height}px` : '300px',
            width: (giphy === null || giphy === void 0 ? void 0 : giphy.width) ? `${giphy === null || giphy === void 0 ? void 0 : giphy.width}px` : '',
        };
    }
    /**
     * Handles the configuration for scraped image attachments, it's possible to provide your own function to override the default logic
     * @param attachment The attachment to configure
     */
    getScrapedImageAttachmentConfiguration(attachment) {
        if (this.customScrapedImageAttachmentConfigurationHandler) {
            return this.customScrapedImageAttachmentConfigurationHandler(attachment);
        }
        return {
            url: attachment.image_url || attachment.thumb_url || '',
            width: '',
            height: '', // Set from CSS
        };
    }
    addResizingParamsToUrl(sizeRestriction, url) {
        url.searchParams.set('h', sizeRestriction.height.toString());
        url.searchParams.set('w', sizeRestriction.width.toString());
    }
    getSizingRestrictions(url, htmlElement, displayWarning = false) {
        const urlParams = url.searchParams;
        const originalHeight = Number(urlParams.get('oh')) || 1;
        const originalWidth = Number(urlParams.get('ow')) || 1;
        const cssSizeRestriction = this.getCSSSizeRestriction(htmlElement);
        let sizeRestriction;
        if ((cssSizeRestriction.maxHeight || cssSizeRestriction.height) &&
            cssSizeRestriction.maxWidth) {
            sizeRestriction = this.getSizeRestrictions(originalHeight, originalWidth, (cssSizeRestriction.maxHeight || cssSizeRestriction.height), cssSizeRestriction.maxWidth);
        }
        else {
            sizeRestriction = undefined;
            if (displayWarning) {
                console.warn(`Invalid value set for height/max-height and/or max-width for HTML element, this can cause scrolling issues inside the message list, more info https://getstream.io/chat/docs/sdk/angular/components/AttachmentListComponent/#image-and-video-sizing, attachment URL: ${url.toString()}`);
            }
        }
        return sizeRestriction;
    }
    getSizeRestrictions(originalHeight, originalWidth, maxHeight, maxWidth) {
        return {
            height: Math.round(Math.max(maxHeight, (maxWidth / originalWidth) * originalHeight)),
            width: Math.round(Math.max(maxHeight, (maxWidth / originalHeight) * originalWidth)),
        };
    }
    getCSSSizeRestriction(htmlElement) {
        const computedStylesheet = getComputedStyle(htmlElement);
        const height = this.getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue('height'));
        const maxHeight = this.getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue('max-height'));
        const maxWidth = this.getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue('max-width'));
        return { height, maxHeight, maxWidth };
    }
    getValueRepresentationOfCSSProperty(property) {
        return Number(property.replace('px', '')) || undefined;
    }
}
AttachmentConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AttachmentConfigurationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AttachmentConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AttachmentConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AttachmentConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,