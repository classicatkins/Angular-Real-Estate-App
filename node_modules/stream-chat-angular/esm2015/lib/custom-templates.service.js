import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * A central location for registering your custom templates to override parts of the chat application.
 *
 * For code examples to the different customizations see our [customizations example application](https://github.com/GetStream/stream-chat-angular/tree/master/projects/customizations-example), specifically the [AppComponent](https://github.com/GetStream/stream-chat-angular/tree/master/projects/customizations-example/src/app) (see [README](https://github.com/GetStream/stream-chat-angular/blob/master/README.md#customization-examples) for instructions on how to start the application).
 *
 * You can find the type definitions of the context that is provided for each template [on GitHub](https://github.com/GetStream/stream-chat-angular/blob/master/projects/stream-chat-angu)
 */
export class CustomTemplatesService {
    constructor() {
        /**
         * The autocomplete list item template for mentioning users (used in the [`AutocompleteTextareaComponent`](../components/AutocompleteTextareaComponent.mdx))
         */
        this.mentionAutocompleteItemTemplate$ = new BehaviorSubject(undefined);
        /**
         * The autocomplete list item template for commands (used in the [`AutocompleteTextareaComponent`](../components/AutocompleteTextareaComponent.mdx))
         */
        this.commandAutocompleteItemTemplate$ = new BehaviorSubject(undefined);
        /**
         * Template used to display an item in the [channel list](../components/ChannelListComponent.mdx) (instead of the default [channal list item](../components/ChannelPreviewComponent.mdx))
         *
         */
        this.channelPreviewTemplate$ = new BehaviorSubject(undefined);
        /**
         * The message input template used when editing a message (instead of the [default message input](../components/MessageInputComponent.mdx))
         *
         */
        this.messageInputTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used for displaying a [mention inside a message](../code-examples/mention-actions.mdx)
         *
         */
        this.mentionTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template for [emoji picker](../code-examples/emoji-picker.mdx)
         *
         */
        this.emojiPickerTemplate$ = new BehaviorSubject(undefined);
        /**
         * The typing indicator template used in the [message list](../components/MessageListComponent.mdx)
         *
         */
        this.typingIndicatorTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display a message in the [message list](../components/MessageListComponent.mdx) (instead of the [default message component](../components/MessageComponent.mdx))
         *
         */
        this.messageTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template for channel actions displayed in the [channel header](../components/ChannelHeaderComponent.mdx) (by default no channel action is displayed)
         *
         */
        this.channelActionsTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display attachments of a [message](../components/MessageComponent.mdx) (instead of the [default attachment list](../components/AttachmentListComponent.mdx))
         *
         */
        this.attachmentListTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display attachments in the [message input](../components/MessageInputComponent.mdx) component (instead of the [default attachment preview](../components/AttachmentPreviewListComponent.mdx))
         *
         */
        this.attachmentPreviewListTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display avatars for channels and users (instead of the [default avatar](../components/AvatarComponent.mdx))
         *
         */
        this.avatarTemplate$ = new BehaviorSubject(undefined);
        /**
         * Template for displaying icons (instead of the [default icon component](../components/IconComponent.mdx))
         *
         */
        this.iconTemplate$ = new BehaviorSubject(undefined);
        /**
         * Template for displaying the loading indicator (instead of the [default loading indicator](../components/LoadingIndicatorComponent.mdx))
         *
         */
        this.loadingIndicatorTemplate$ = new BehaviorSubject(undefined);
        /**
         * Template for displaying the message actions box (instead of the [default message actions box](../components/MessageActionsBoxComponent.mdx))
         *
         */
        this.messageActionsBoxTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used for displaying an item in the [message actions box](../components/MessageActionsBoxComponent.mdx)
         *
         */
        this.messageActionsBoxItemTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display the reactions of a [message](../components/MessageComponent.mdx), and the selector to add a reaction to a message (instead of the [default message reactions component](../components/MessageReactionsComponent.mdx))
         *
         */
        this.messageReactionsTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display a modal window (instead of the [default modal](../components/ModalComponent.mdx))
         *
         */
        this.modalTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to override the [default notification component](../components/NotificationComponent.mdx)
         *
         */
        this.notificationTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used for header of a [thread](../components/ThreadComponent.mdx)
         *
         */
        this.threadHeaderTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used for displaying the delivered state of the message inside the [message component](../components/MessageComponent.mdx)
         *
         * Displayed for the last message sent by the current user, if the message isn't yet read by anyone
         *
         */
        this.deliveredStatusTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used for displaying the sending state of the message inside the [message component](../components/MessageComponent.mdx)
         *
         * Displayed for the last message sent by the current user, if the message is currently being sent
         *
         */
        this.sendingStatusTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used for displaying the sent state of the message inside the [message component](../components/MessageComponent.mdx)
         *
         * Displayed for the last message sent by the current user, if the message is read at least by one user
         *
         */
        this.readStatusTemplate$ = new BehaviorSubject(undefined);
        /**
         * Template to display custom metadata inside [message component](../components/MessageComponent.mdx)
         *
         */
        this.customMessageMetadataTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display additional information about a channel under the channel name inside the [channel header component](../components/ChannelHeaderComponent.mdx)
         *
         */
        this.channelHeaderInfoTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used for displaying file upload/attachment selector inside the [message input](../components/MessageInputComponent.mdx)
         *
         */
        this.customAttachmentUploadTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template that can be used to override how a single image attachment is displayed inside the [attachment list](../components/AttachmentListComponent.mdx)
         */
        this.imageAttachmentTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template that can be used to override how a voice recording attachment is displayed inside the [attachment list](../components/AttachmentListComponent.mdx), by default the [voice recording component](../components/VoiceRecordingComponent.mdx) is used
         */
        this.voiceRecordingAttachmentTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template that can be used to override how a video attachment is displayed inside the [attachment list](../components/AttachmentListComponent.mdx)
         */
        this.videoAttachmentTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template that can be used to override how image gallery is displayed inside the [attachment list](../components/AttachmentListComponent.mdx)
         */
        this.galleryAttachmentTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template that can be used to override how a file attachment is displayed inside the [attachment list](../components/AttachmentListComponent.mdx)
         */
        this.fileAttachmentTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template that can be used to override how a card attachment is displayed inside the [attachment list](../components/AttachmentListComponent.mdx)
         */
        this.cardAttachmentTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template that can be used to override how attachment actions are displayed inside the [attachment list](../components/AttachmentListComponent.mdx)
         */
        this.attachmentActionsTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display [system messages](https://getstream.io/chat/docs/javascript/silent_messages/?language=javascript&q=system) indise the [message component](../components/MessageComponent.mdx)
         */
        this.systemMessageTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display the date separator inside the [message list](../components/MessageListComponent.mdx)
         */
        this.dateSeparatorTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display unread messages indicator inside the [message list](../components/MessageListComponent.mdx) when the channel is opened
         *
         * This UI element is used to separate unread messages from read messages
         */
        this.newMessagesIndicatorTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display unread messages notification inside the [message list](../components/MessageListComponent.mdx) when the channel is opened
         *
         * Users can use this notification to jump to the first unread message when it's clicked
         */
        this.newMessagesNotificationTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template to show if the main message list is empty
         */
        this.emptyMainMessageListPlaceholder$ = new BehaviorSubject(undefined);
        /**
         * The template to show if the thread message list is empty
         */
        this.emptyThreadMessageListPlaceholder$ = new BehaviorSubject(undefined);
        /**
         * The template used to display the [edit message form](../components/EditMessageFormComponent.mdx)
         */
        this.editMessageFormTemplate$ = new BehaviorSubject(undefined);
        /**
         * The template used to display the [message bounce prompt](../components/MessageBouncePromptComponent.mdx)
         */
        this.messageBouncePromptTemplate$ = new BehaviorSubject(undefined);
        /**
         * Template used to display the channel information inside the [channel list item](../components/ChannelPreviewComponent.mdx)
         *
         */
        this.channelPreviewInfoTemplate$ = new BehaviorSubject(undefined);
    }
}
CustomTemplatesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: CustomTemplatesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CustomTemplatesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: CustomTemplatesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: CustomTemplatesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,