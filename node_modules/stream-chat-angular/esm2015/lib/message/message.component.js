import { Component, Input, ViewChild, ChangeDetectionStrategy, } from '@angular/core';
import emojiRegex from 'emoji-regex';
import { listUsers } from '../list-users';
import { NgxPopperjsTriggers, NgxPopperjsPlacements, } from 'ngx-popperjs';
import * as i0 from "@angular/core";
import * as i1 from "../chat-client.service";
import * as i2 from "../channel.service";
import * as i3 from "../custom-templates.service";
import * as i4 from "../theme.service";
import * as i5 from "../date-parser.service";
import * as i6 from "../message.service";
import * as i7 from "../message-actions.service";
import * as i8 from "../avatar-placeholder/avatar-placeholder.component";
import * as i9 from "ngx-popperjs";
import * as i10 from "../message-actions-box/message-actions-box.component";
import * as i11 from "../icon-placeholder/icon-placeholder.component";
import * as i12 from "../message-reactions/message-reactions.component";
import * as i13 from "../attachment-list/attachment-list.component";
import * as i14 from "../loading-indicator-placeholder/loading-indicator-placeholder.component";
import * as i15 from "@angular/common";
import * as i16 from "@ngx-translate/core";
/**
 * The `Message` component displays a message with additional information such as sender and date, and enables [interaction with the message (i.e. edit or react)](../concepts/message-interactions.mdx).
 */
export class MessageComponent {
    constructor(chatClientService, channelService, customTemplatesService, cdRef, themeService, dateParser, ngZone, messageService, messageActionsService) {
        this.chatClientService = chatClientService;
        this.channelService = channelService;
        this.customTemplatesService = customTemplatesService;
        this.cdRef = cdRef;
        this.dateParser = dateParser;
        this.ngZone = ngZone;
        this.messageService = messageService;
        this.messageActionsService = messageActionsService;
        /**
         * The list of [channel capabilities](https://getstream.io/chat/docs/javascript/channel_capabilities/?language=javascript) that are enabled for the current user, the list of [supported interactions](../concepts/message-interactions.mdx) can be found in our message interaction guide. Unathorized actions won't be displayed on the UI. The [`MessageList`](./MessageListComponent.mdx) component automatically sets this based on [channel capabilities](https://getstream.io/chat/docs/javascript/channel_capabilities/?language=javascript).
         */
        this.enabledMessageActions = [];
        /**
         * Determines if the message is being dispalyed in a channel or in a [thread](https://getstream.io/chat/docs/javascript/threads/?language=javascript).
         */
        this.mode = 'main';
        /**
         * Highlighting is used to add visual emphasize to a message when jumping to the message
         */
        this.isHighlighted = false;
        /**
         * A list of custom message actions to be displayed in the action box
         *
         * @deprecated please use the [`MessageActionsService`](https://getstream.io/chat/docs/sdk/angular/services/MessageActionsService) to set this property.
         */
        this.customActions = [];
        this.isActionBoxOpen = false;
        this.isEditedFlagOpened = false;
        this.isReactionSelectorOpen = false;
        this.visibleMessageActionsCount = 0;
        this.messageTextParts = [];
        this.popperTriggerClick = NgxPopperjsTriggers.click;
        this.popperTriggerHover = NgxPopperjsTriggers.hover;
        this.popperPlacementAuto = NgxPopperjsPlacements.AUTO;
        this.popperPlacementTop = NgxPopperjsPlacements.TOP;
        this.shouldDisplayTranslationNotice = false;
        this.displayedMessageTextContent = 'original';
        this.imageAttachmentModalState = 'closed';
        this.shouldDisplayThreadLink = false;
        this.isSentByCurrentUser = false;
        this.readByText = '';
        this.lastReadUser = undefined;
        this.isOnlyReadByMe = false;
        this.isReadByMultipleUsers = false;
        this.isMessageDeliveredAndRead = false;
        this.parsedDate = '';
        this.pasedEditedDate = '';
        this.areOptionsVisible = false;
        this.hasAttachment = false;
        this.hasReactions = false;
        this.replyCountParam = {
            replyCount: undefined,
        };
        this.canDisplayReadStatus = false;
        this.subscriptions = [];
        this.isViewInited = false;
        this.urlRegexp = /(?:(?:https?|ftp|file):\/\/|www\.|ftp\.)(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[A-Z0-9+&@#/%=~_|$])/gim;
        this.emojiRegexp = new RegExp(emojiRegex(), 'g');
        this.themeVersion = themeService.themeVersion;
        this.displayAs = this.messageService.displayAs;
    }
    ngOnInit() {
        this.subscriptions.push(this.chatClientService.user$.subscribe((u) => {
            if ((u === null || u === void 0 ? void 0 : u.id) !== this.userId) {
                this.userId = u === null || u === void 0 ? void 0 : u.id;
                this.setIsSentByCurrentUser();
                this.setLastReadUser();
                if (this.isViewInited) {
                    this.cdRef.detectChanges();
                }
            }
        }));
    }
    ngOnChanges(changes) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (changes.message) {
            this.shouldDisplayTranslationNotice = false;
            this.displayedMessageTextContent = 'original';
            this.createMessageParts();
            const originalAttachments = (_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.quoted_message) === null || _b === void 0 ? void 0 : _b.attachments;
            this.quotedMessageAttachments =
                originalAttachments && originalAttachments.length
                    ? [originalAttachments[0]]
                    : [];
            this.setIsSentByCurrentUser();
            this.setLastReadUser();
            this.readByText = ((_c = this.message) === null || _c === void 0 ? void 0 : _c.readBy)
                ? listUsers(this.message.readBy)
                : '';
            this.isOnlyReadByMe = !!(this.message &&
                this.message.readBy &&
                this.message.readBy.length === 0);
            this.isReadByMultipleUsers = !!(this.message &&
                this.message.readBy &&
                this.message.readBy.length > 1);
            this.isMessageDeliveredAndRead = !!(this.message &&
                this.message.readBy &&
                this.message.status === 'received' &&
                this.message.readBy.length > 0);
            this.parsedDate =
                (this.message &&
                    this.message.created_at &&
                    this.dateParser.parseDateTime(this.message.created_at)) ||
                    '';
            this.pasedEditedDate =
                (this.message &&
                    this.message.message_text_updated_at &&
                    this.dateParser.parseDateTime(new Date(this.message.message_text_updated_at))) ||
                    '';
            this.hasAttachment =
                !!((_d = this.message) === null || _d === void 0 ? void 0 : _d.attachments) && !!this.message.attachments.length;
            this.hasReactions =
                !!((_e = this.message) === null || _e === void 0 ? void 0 : _e.reaction_counts) &&
                    Object.keys(this.message.reaction_counts).length > 0;
            this.replyCountParam = { replyCount: (_f = this.message) === null || _f === void 0 ? void 0 : _f.reply_count };
        }
        if (changes.enabledMessageActions) {
            this.canReactToMessage =
                this.enabledMessageActions.indexOf('send-reaction') !== -1;
            this.canReceiveReadEvents =
                this.enabledMessageActions.indexOf('read-events') !== -1;
            this.canDisplayReadStatus =
                this.canReceiveReadEvents !== false &&
                    this.enabledMessageActions.indexOf('read-events') !== -1;
        }
        if (changes.message || changes.enabledMessageActions || changes.mode) {
            this.shouldDisplayThreadLink =
                !!((_g = this.message) === null || _g === void 0 ? void 0 : _g.reply_count) && this.mode !== 'thread';
        }
        if (changes.message || changes.mode) {
            this.areOptionsVisible = this.message
                ? !(!this.message.type ||
                    this.message.type === 'error' ||
                    this.message.type === 'system' ||
                    this.message.type === 'ephemeral' ||
                    this.message.status === 'failed' ||
                    this.message.status === 'sending' ||
                    (this.mode === 'thread' && !this.message.parent_id))
                : false;
        }
        if (changes.message ||
            changes.enabledMessageActions ||
            changes.customActions) {
            if (this.message) {
                this.visibleMessageActionsCount =
                    this.messageActionsService.getAuthorizedMessageActionsCount(this.message, this.enabledMessageActions);
            }
            else {
                this.visibleMessageActionsCount = 0;
            }
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    messageActionsClicked() {
        if (!this.message) {
            return;
        }
        if (this.messageActionsService.customActionClickHandler) {
            this.messageActionsService.customActionClickHandler({
                message: this.message,
                enabledActions: this.enabledMessageActions,
                customActions: this.customActions,
                isMine: this.isSentByCurrentUser,
            });
        }
        else {
            this.isActionBoxOpen = !this.isActionBoxOpen;
        }
    }
    messageActionsBoxClicked(popperContent) {
        popperContent.hide();
    }
    getAttachmentListContext() {
        var _a, _b, _c;
        return {
            messageId: ((_a = this.message) === null || _a === void 0 ? void 0 : _a.id) || '',
            attachments: ((_b = this.message) === null || _b === void 0 ? void 0 : _b.attachments) || [],
            parentMessageId: (_c = this.message) === null || _c === void 0 ? void 0 : _c.parent_id,
            imageModalStateChangeHandler: (state) => (this.imageAttachmentModalState = state),
        };
    }
    getMessageContext() {
        return {
            message: this.message,
            enabledMessageActions: this.enabledMessageActions,
            isHighlighted: this.isHighlighted,
            isLastSentMessage: this.isLastSentMessage,
            mode: this.mode,
            customActions: this.customActions,
            parsedDate: this.parsedDate,
        };
    }
    getQuotedMessageAttachmentListContext() {
        var _a, _b, _c, _d;
        return {
            messageId: ((_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.quoted_message) === null || _b === void 0 ? void 0 : _b.id) || '',
            attachments: this.quotedMessageAttachments,
            parentMessageId: (_d = (_c = this === null || this === void 0 ? void 0 : this.message) === null || _c === void 0 ? void 0 : _c.quoted_message) === null || _d === void 0 ? void 0 : _d.parent_id,
        };
    }
    getMessageReactionsContext() {
        var _a, _b, _c, _d;
        return {
            messageReactionCounts: ((_a = this.message) === null || _a === void 0 ? void 0 : _a.reaction_counts) || {},
            latestReactions: ((_b = this.message) === null || _b === void 0 ? void 0 : _b.latest_reactions) || [],
            isSelectorOpen: this.isReactionSelectorOpen,
            isSelectorOpenChangeHandler: (isOpen) => (this.isReactionSelectorOpen = isOpen),
            messageId: (_c = this.message) === null || _c === void 0 ? void 0 : _c.id,
            ownReactions: ((_d = this.message) === null || _d === void 0 ? void 0 : _d.own_reactions) || [],
        };
    }
    messageClicked() {
        var _a, _b, _c, _d;
        if (((_a = this.message) === null || _a === void 0 ? void 0 : _a.status) === 'failed' &&
            ((_b = this.message) === null || _b === void 0 ? void 0 : _b.errorStatusCode) !== 403) {
            this.resendMessage();
        }
        else if (((_c = this.message) === null || _c === void 0 ? void 0 : _c.type) === 'error' &&
            ((_d = this.message) === null || _d === void 0 ? void 0 : _d.moderation_details)) {
            this.openMessageBouncePrompt();
        }
        else {
            this.isEditedFlagOpened = !this.isEditedFlagOpened;
        }
    }
    resendMessage() {
        void this.channelService.resendMessage(this.message);
    }
    setAsActiveParentMessage() {
        void this.channelService.setAsActiveParentMessage(this.message);
    }
    getMentionContext(messagePart) {
        return {
            content: messagePart.content,
            user: messagePart.user,
        };
    }
    getMessageActionsBoxContext() {
        return {
            isOpen: this.isActionBoxOpen,
            isMine: this.isSentByCurrentUser,
            enabledActions: this.enabledMessageActions,
            message: this.message,
            displayedActionsCountChaneHanler: (count) => {
                this.visibleMessageActionsCount = count;
                // message action box changes UI bindings in parent, so we'll have to rerun change detection
                this.cdRef.detectChanges();
            },
            displayedActionsCountChangeHandler: (count) => {
                this.visibleMessageActionsCount = count;
                // message action box changes UI bindings in parent, so we'll have to rerun change detection
                this.cdRef.detectChanges();
            },
            customActions: this.customActions || [],
        };
    }
    getDeliveredStatusContext() {
        return {
            message: this.message,
        };
    }
    getSendingStatusContext() {
        return {
            message: this.message,
        };
    }
    getReadStatusContext() {
        return {
            message: this.message,
            readByText: this.readByText,
        };
    }
    getMessageMetadataContext() {
        return {
            message: this.message,
        };
    }
    jumpToMessage(messageId, parentMessageId) {
        void this.channelService.jumpToMessage(messageId, parentMessageId);
    }
    displayTranslatedMessage() {
        this.createMessageParts(true);
    }
    displayOriginalMessage() {
        this.createMessageParts(false);
    }
    openMessageBouncePrompt() {
        this.channelService.bouncedMessage$.next(this.message);
    }
    createMessageParts(shouldTranslate = true) {
        this.messageTextParts = undefined;
        this.messageText = undefined;
        let content = this.getMessageContent(shouldTranslate);
        if ((!this.message.mentioned_users ||
            this.message.mentioned_users.length === 0) &&
            !(content === null || content === void 0 ? void 0 : content.match(this.emojiRegexp)) &&
            !(content === null || content === void 0 ? void 0 : content.match(this.urlRegexp))) {
            this.messageTextParts = undefined;
            this.messageText = content;
            return;
        }
        if (!content) {
            return;
        }
        if (!this.message.mentioned_users ||
            this.message.mentioned_users.length === 0) {
            content = this.fixEmojiDisplay(content);
            content = this.wrapLinksWithAnchorTag(content);
            this.messageTextParts = [{ content, type: 'text' }];
        }
        else {
            this.messageTextParts = [];
            let text = content;
            this.message.mentioned_users.forEach((user) => {
                const mention = `@${user.name || user.id}`;
                const precedingText = text.substring(0, text.indexOf(mention));
                let formattedPrecedingText = this.fixEmojiDisplay(precedingText);
                formattedPrecedingText = this.wrapLinksWithAnchorTag(formattedPrecedingText);
                this.messageTextParts.push({
                    content: formattedPrecedingText,
                    type: 'text',
                });
                this.messageTextParts.push({
                    content: mention,
                    type: 'mention',
                    user,
                });
                text = text.replace(precedingText + mention, '');
            });
            if (text) {
                text = this.fixEmojiDisplay(text);
                text = this.wrapLinksWithAnchorTag(text);
                this.messageTextParts.push({ content: text, type: 'text' });
            }
        }
    }
    getMessageContent(shouldTranslate) {
        var _a, _b;
        const originalContent = (_a = this.message) === null || _a === void 0 ? void 0 : _a.text;
        if (shouldTranslate) {
            const translation = (_b = this.message) === null || _b === void 0 ? void 0 : _b.translation;
            if (translation) {
                this.shouldDisplayTranslationNotice = true;
                this.displayedMessageTextContent = 'translation';
            }
            return translation || originalContent;
        }
        else {
            this.displayedMessageTextContent = 'original';
            return originalContent;
        }
    }
    fixEmojiDisplay(content) {
        // Wrap emojis in span to display emojis correctly in Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=596223
        // Based on this: https://stackoverflow.com/questions/4565112/javascript-how-to-find-out-if-the-user-browser-is-chrome
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        const isChrome = !!window.chrome && typeof window.opr === 'undefined';
        /* eslint-enable @typescript-eslint/no-unsafe-member-access */
        content = content.replace(this.emojiRegexp, (match) => `<span ${isChrome ? 'class="str-chat__emoji-display-fix"' : ''}>${match}</span>`);
        return content;
    }
    wrapLinksWithAnchorTag(content) {
        if (this.displayAs === 'html') {
            return content;
        }
        content = content.replace(this.urlRegexp, (match) => this.messageService.customLinkRenderer
            ? this.messageService.customLinkRenderer(match)
            : `<a href="${match}" target="_blank" rel="nofollow">${match}</a>`);
        return content;
    }
    setIsSentByCurrentUser() {
        var _a, _b;
        this.isSentByCurrentUser = ((_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id) === this.userId;
    }
    setLastReadUser() {
        var _a, _b;
        this.lastReadUser = (_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.readBy) === null || _b === void 0 ? void 0 : _b.filter((u) => u.id !== this.userId)[0];
    }
}
MessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageComponent, deps: [{ token: i1.ChatClientService }, { token: i2.ChannelService }, { token: i3.CustomTemplatesService }, { token: i0.ChangeDetectorRef }, { token: i4.ThemeService }, { token: i5.DateParserService }, { token: i0.NgZone }, { token: i6.MessageService }, { token: i7.MessageActionsService }], target: i0.ɵɵFactoryTarget.Component });
MessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: MessageComponent, selector: "stream-message", inputs: { message: "message", enabledMessageActions: "enabledMessageActions", isLastSentMessage: "isLastSentMessage", mode: "mode", isHighlighted: "isHighlighted", customActions: "customActions" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  #container\n  class=\"str-chat__message-simple str-chat__message str-chat__message--{{\n    message?.type\n  }} str-chat__message--{{ message?.status }} {{\n    message?.text ? 'str-chat__message--has-text' : 'has-no-text'\n  }}\"\n  [class.str-chat__message--me]=\"isSentByCurrentUser\"\n  [class.str-chat__message--other]=\"!isSentByCurrentUser\"\n  [class.str-chat__message-simple--me]=\"isSentByCurrentUser\"\n  [class.str-chat__message--has-attachment]=\"hasAttachment\"\n  [class.str-chat__message--with-reactions]=\"hasReactions\"\n  [class.str-chat__message--highlighted]=\"isHighlighted\"\n  [class.str-chat__message-with-thread-link]=\"shouldDisplayThreadLink\"\n  [class.str-chat__message-send-can-be-retried]=\"\n    (message?.status === 'failed' && message?.errorStatusCode !== 403) ||\n    (message?.type === 'error' && message?.moderation_details)\n  \"\n  data-testid=\"message-container\"\n>\n  <ng-container *ngIf=\"!message?.deleted_at; else deletedMessage\">\n    <ng-container *ngIf=\"message?.type !== 'system'; else systemMessage\">\n      <ng-container *ngIf=\"themeVersion === '1'\">\n        <ng-container *ngTemplateOutlet=\"messageStatus\"></ng-container>\n      </ng-container>\n      <stream-avatar-placeholder\n        data-testid=\"avatar\"\n        class=\"str-chat-angular__avatar-host str-chat__message-sender-avatar\"\n        [imageUrl]=\"message?.user?.image\"\n        [name]=\"message?.user?.name || message?.user?.id\"\n        type=\"user\"\n        location=\"message-sender\"\n        [user]=\"message?.user || undefined\"\n      ></stream-avatar-placeholder>\n      <div class=\"str-chat__message-inner\">\n        <div\n          class=\"str-chat__message-simple__actions str-chat__message-options\"\n          data-testid=\"message-options\"\n          [class.str-chat__message-actions-open]=\"isActionBoxOpen\"\n          *ngIf=\"areOptionsVisible\"\n        >\n          <div\n            data-testid=\"message-actions-container\"\n            #messageActionsToggle\n            class=\"\n              str-chat__message-actions-container\n              str-chat__message-simple__actions__action\n              str-chat__message-simple__actions__action--options\n            \"\n            [popper]=\"popperContent\"\n            [popperTrigger]=\"popperTriggerClick\"\n            [popperPlacement]=\"popperPlacementAuto\"\n            [popperHideOnScroll]=\"false\"\n            [popperHideOnClickOutside]=\"true\"\n            [popperHideOnMouseLeave]=\"false\"\n            [popperDisableAnimation]=\"true\"\n            (popperOnHidden)=\"isActionBoxOpen = false\"\n          >\n            <popper-content #popperContent>\n              <ng-template\n                #defaultMessageActionsBox\n                let-isOpen=\"isOpen\"\n                let-isMine=\"isMine\"\n                let-enabledActions=\"enabledActions\"\n                let-messageInput=\"message\"\n                let-customActions=\"customActions\"\n              >\n                <stream-message-actions-box\n                  (click)=\"messageActionsBoxClicked(popperContent)\"\n                  *ngIf=\"isOpen\"\n                  [isOpen]=\"isOpen\"\n                  [isMine]=\"isMine\"\n                  [enabledActions]=\"enabledActions\"\n                  [customActions]=\"customActions\"\n                  [message]=\"messageInput\"\n                ></stream-message-actions-box>\n              </ng-template>\n              <ng-container\n                *ngTemplateOutlet=\"\n                  (customTemplatesService.messageActionsBoxTemplate$ | async) ||\n                    defaultMessageActionsBox;\n                  context: getMessageActionsBoxContext()\n                \"\n              >\n              </ng-container>\n            </popper-content>\n            <div\n              class=\"str-chat__message-actions-box-button\"\n              data-testid=\"action-icon\"\n              (click)=\"messageActionsClicked()\"\n              (keyup.enter)=\"messageActionsClicked()\"\n              *ngIf=\"visibleMessageActionsCount > 0\"\n            >\n              <stream-icon-placeholder\n                icon=\"action-icon\"\n                class=\"str-chat__message-action-icon\"\n              ></stream-icon-placeholder>\n            </div>\n          </div>\n          <div\n            *ngIf=\"\n              enabledMessageActions.indexOf('send-reply') !== -1 &&\n              mode === 'main'\n            \"\n            class=\"\n              str-chat__message-simple__actions__action\n              str-chat__message-simple__actions__action--thread\n              str-chat__message-reply-in-thread-button\n            \"\n            data-testid=\"reply-in-thread\"\n            (click)=\"setAsActiveParentMessage()\"\n            (keyup.enter)=\"setAsActiveParentMessage()\"\n          >\n            <stream-icon-placeholder\n              class=\"str-chat__message-action-icon\"\n              icon=\"reply-in-thread\"\n            ></stream-icon-placeholder>\n          </div>\n          <div\n            *ngIf=\"canReactToMessage\"\n            class=\"\n              str-chat__message-simple__actions__action\n              str-chat__message-simple__actions__action--reactions\n              str-chat__message-reactions-button\n            \"\n            data-testid=\"reaction-icon\"\n            (click)=\"isReactionSelectorOpen = !isReactionSelectorOpen\"\n            (keyup.enter)=\"isReactionSelectorOpen = !isReactionSelectorOpen\"\n          >\n            <stream-icon-placeholder\n              class=\"str-chat__message-action-icon\"\n              icon=\"reaction-icon\"\n            ></stream-icon-placeholder>\n          </div>\n        </div>\n        <div class=\"str-chat__message-reactions-host\">\n          <ng-template\n            #defaultMessageReactions\n            let-messageReactionCounts=\"messageReactionCounts\"\n            let-latestReactions=\"latestReactions\"\n            let-isSelectorOpen=\"isSelectorOpen\"\n            let-isSelectorOpenChangeHandler=\"isSelectorOpenChangeHandler\"\n            let-messageId=\"messageId\"\n            let-ownReactions=\"ownReactions\"\n          >\n            <stream-message-reactions\n              [messageReactionCounts]=\"messageReactionCounts\"\n              [latestReactions]=\"latestReactions\"\n              [isSelectorOpen]=\"isSelectorOpen\"\n              (isSelectorOpenChange)=\"isSelectorOpenChangeHandler($event)\"\n              [messageId]=\"messageId\"\n              [ownReactions]=\"ownReactions\"\n            ></stream-message-reactions>\n          </ng-template>\n          <ng-container\n            *ngTemplateOutlet=\"\n              (customTemplatesService.messageReactionsTemplate$ | async) ||\n                defaultMessageReactions;\n              context: getMessageReactionsContext()\n            \"\n          ></ng-container>\n        </div>\n        <div\n          class=\"str-chat__message-bubble str-chat-angular__message-bubble\"\n          [class.str-chat-angular__message-bubble--attachment-modal-open]=\"\n            imageAttachmentModalState === 'opened'\n          \"\n        >\n          <ng-container *ngIf=\"hasAttachment && !message?.quoted_message\">\n            <ng-container\n              *ngTemplateOutlet=\"attachmentsTemplate\"\n            ></ng-container>\n          </ng-container>\n          <div\n            class=\"str-chat__message-text\"\n            tabindex=\"0\"\n            *ngIf=\"message?.text || (message?.quoted_message && hasAttachment)\"\n            [class.str-chat__message-text--pointer-cursor]=\"\n              (message?.status === 'failed' &&\n                message?.errorStatusCode !== 403) ||\n              (this.message?.type === 'error' &&\n                this.message?.moderation_details) ||\n              message?.message_text_updated_at\n            \"\n            (click)=\"messageClicked()\"\n            (keyup.enter)=\"messageClicked()\"\n          >\n            <div\n              data-testid=\"inner-message\"\n              class=\"\n                str-chat__message-text-inner str-chat__message-simple-text-inner\n              \"\n              [class.str-chat__message-light-text-inner--has-attachment]=\"\n                hasAttachment\n              \"\n            >\n              <ng-container *ngTemplateOutlet=\"quotedMessage\"></ng-container>\n              <ng-container *ngIf=\"hasAttachment && message?.quoted_message\">\n                <ng-container\n                  *ngTemplateOutlet=\"attachmentsTemplate\"\n                ></ng-container>\n              </ng-container>\n              <div\n                data-testid=\"client-error-message\"\n                *ngIf=\"message?.type === 'error'\"\n                class=\"\n                  str-chat__simple-message--error-message\n                  str-chat__message--error-message\n                \"\n              >\n                <ng-container *ngIf=\"!message?.moderation_details\">{{\n                  \"streamChat.Error \u00B7 Unsent\" | translate\n                }}</ng-container>\n              </div>\n              <div\n                data-testid=\"error-message\"\n                *ngIf=\"message?.status === 'failed'\"\n                class=\"\n                  str-chat__simple-message--error-message\n                  str-chat__message--error-message\n                \"\n              >\n                {{\n                  (message?.errorStatusCode === 403\n                    ? \"streamChat.Message Failed \u00B7 Unauthorized\"\n                    : \"streamChat.Message Failed \u00B7 Click to try again\"\n                  ) | translate\n                }}\n              </div>\n              <div data-testid=\"text\">\n                <p>\n                  <ng-container *ngIf=\"messageTextParts; else defaultContent\">\n                    <!-- eslint-disable-next-line @angular-eslint/template/use-track-by-function -->\n                    <ng-container *ngFor=\"let part of messageTextParts\">\n                      <span\n                        *ngIf=\"part.type === 'text'; else mention\"\n                        [innerHTML]=\"part.content\"\n                      ></span>\n                      <ng-template #mention>\n                        <ng-template #defaultMention let-content=\"content\">\n                          <span class=\"str-chat__message-mention\">{{\n                            content\n                          }}</span>\n                        </ng-template>\n                        <ng-container\n                          *ngTemplateOutlet=\"\n                            (customTemplatesService.mentionTemplate$ | async) ||\n                              defaultMention;\n                            context: getMentionContext(part)\n                          \"\n                        ></ng-container>\n                      </ng-template>\n                    </ng-container>\n                  </ng-container>\n                  <ng-template #defaultContent>\n                    <ng-container *ngIf=\"displayAs === 'text'; else asHTML\">\n                      {{ messageText || \"\" }}\n                    </ng-container>\n                    <ng-template #asHTML\n                      ><span\n                        data-testid=\"html-content\"\n                        [innerHTML]=\"messageText\"\n                      ></span\n                    ></ng-template>\n                  </ng-template>\n                </p>\n              </div>\n            </div>\n          </div>\n          <stream-icon-placeholder\n            *ngIf=\"themeVersion === '2'\"\n            class=\"str-chat__message-error-icon\"\n            icon=\"error\"\n          ></stream-icon-placeholder>\n        </div>\n        <ng-container\n          *ngTemplateOutlet=\"\n            replyCountButton;\n            context: { position: 'inside-message-bubble' }\n          \"\n        ></ng-container>\n        <ng-container\n          *ngTemplateOutlet=\"\n            messageDateAndSender;\n            context: { position: 'inside-message-bubble' }\n          \"\n        ></ng-container>\n      </div>\n      <ng-container\n        *ngTemplateOutlet=\"\n          replyCountButton;\n          context: { position: 'outside-message-bubble', message: message }\n        \"\n      ></ng-container>\n\n      <ng-container\n        *ngTemplateOutlet=\"\n          messageDateAndSender;\n          context: { position: 'outside-message-bubble' }\n        \"\n      ></ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #deletedMessage>\n  <div data-testid=\"message-deleted-component\">\n    <div class=\"str-chat__message--deleted-inner\" translate>\n      streamChat.This message was deleted...\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #systemMessage>\n  <ng-container\n    *ngTemplateOutlet=\"\n      (customTemplatesService.systemMessageTemplate$ | async) ||\n        defaultSystemMessage;\n      context: getMessageContext()\n    \"\n  ></ng-container>\n  <ng-template #defaultSystemMessage let-messageInput=\"message\">\n    <div data-testid=\"system-message\" class=\"str-chat__message--system\">\n      <div class=\"str-chat__message--system__text\">\n        <div class=\"str-chat__message--system__line\"></div>\n        <p>{{ messageInput?.text }}</p>\n        <div class=\"str-chat__message--system__line\"></div>\n      </div>\n      <div class=\"str-chat__message--system__date\">\n        {{ parsedDate }}\n      </div>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #quotedMessage>\n  <div\n    *ngIf=\"message?.quoted_message\"\n    class=\"quoted-message str-chat__quoted-message-preview\"\n    data-testid=\"quoted-message-container\"\n    [class.mine]=\"isSentByCurrentUser\"\n    (click)=\"\n      jumpToMessage(\n        (message?.quoted_message)!.id,\n        message?.quoted_message?.parent_id\n      )\n    \"\n    (keyup.enter)=\"\n      jumpToMessage(\n        (message?.quoted_message)!.id,\n        message?.quoted_message?.parent_id\n      )\n    \"\n  >\n    <stream-avatar-placeholder\n      data-testid=\"qouted-message-avatar\"\n      class=\"str-chat-angular__avatar-host str-chat__message-sender-avatar\"\n      [imageUrl]=\"message?.quoted_message?.user?.image\"\n      [name]=\"\n        message?.quoted_message?.user?.name || message?.quoted_message?.user?.id\n      \"\n      [size]=\"20\"\n      type=\"user\"\n      location=\"quoted-message-sender\"\n      [user]=\"message?.quoted_message?.user || undefined\"\n    ></stream-avatar-placeholder>\n    <div class=\"quoted-message-inner str-chat__quoted-message-bubble\">\n      <ng-container\n        *ngIf=\"\n          message?.quoted_message?.attachments &&\n          message?.quoted_message?.attachments?.length\n        \"\n      >\n        <ng-template\n          #defaultAttachments\n          let-messageId=\"messageId\"\n          let-attachments=\"attachments\"\n          let-parentMessageId=\"parentMessageId\"\n          let-imageModalStateChangeHandler=\"imageModalStateChangeHandler\"\n        >\n          <stream-attachment-list\n            [messageId]=\"messageId\"\n            [attachments]=\"attachments\"\n            [parentMessageId]=\"parentMessageId\"\n            (imageModalStateChange)=\"imageModalStateChangeHandler($event)\"\n          ></stream-attachment-list>\n        </ng-template>\n        <ng-container\n          *ngTemplateOutlet=\"\n            (customTemplatesService.attachmentListTemplate$ | async) ||\n              defaultAttachments;\n            context: getQuotedMessageAttachmentListContext()\n          \"\n        ></ng-container>\n      </ng-container>\n      <div\n        data-testid=\"quoted-message-text\"\n        [innerHTML]=\"\n          message?.quoted_message?.translation ||\n          message?.quoted_message?.html ||\n          message?.quoted_message?.text\n        \"\n      ></div>\n    </div>\n  </div>\n</ng-template>\n\n<!-- We need these markups in slightly different positions in theme-v1 and theme-v2, this soultion makes that possible without duplicating the code -->\n<ng-template #messageDateAndSender let-position=\"position\">\n  <ng-container\n    *ngIf=\"\n      (position === 'inside-message-bubble' && themeVersion === '1') ||\n      (position === 'outside-message-bubble' && themeVersion === '2')\n    \"\n  >\n    <div\n      class=\"str-chat__translation-notice\"\n      *ngIf=\"shouldDisplayTranslationNotice\"\n      data-testid=\"translation-notice\"\n    >\n      <button\n        data-testid=\"see-original\"\n        *ngIf=\"displayedMessageTextContent === 'translation'\"\n        (click)=\"displayOriginalMessage()\"\n        (keyup.enter)=\"displayOriginalMessage()\"\n        translate\n      >\n        streamChat.See original (automatically translated)\n      </button>\n      <button\n        data-testid=\"see-translation\"\n        *ngIf=\"displayedMessageTextContent === 'original'\"\n        (click)=\"displayTranslatedMessage()\"\n        (keyup.enter)=\"displayTranslatedMessage()\"\n        translate\n      >\n        streamChat.See translation\n      </button>\n    </div>\n    <ng-container\n      *ngIf=\"customTemplatesService.customMessageMetadataTemplate$ | async\"\n    >\n      <div class=\"str-chat__custom-message-metadata\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            (customTemplatesService.customMessageMetadataTemplate$ | async)!;\n            context: getMessageMetadataContext()\n          \"\n        ></ng-container>\n      </div>\n    </ng-container>\n    <div\n      class=\"\n        str-chat__message-data\n        str-chat__message-simple-data\n        str-chat__message-metadata\n      \"\n    >\n      <ng-container *ngIf=\"themeVersion === '2'\">\n        <ng-container *ngTemplateOutlet=\"messageStatus\"></ng-container>\n      </ng-container>\n      <span\n        data-testid=\"sender\"\n        *ngIf=\"!isSentByCurrentUser\"\n        class=\"str-chat__message-simple-name str-chat__message-sender-name\"\n      >\n        {{ message?.user?.name ? message?.user?.name : message?.user?.id }}\n      </span>\n      <span\n        data-testid=\"date\"\n        class=\"str-chat__message-simple-timestamp str-chat__message-simple-time\"\n      >\n        {{ parsedDate }}\n      </span>\n      <ng-container *ngIf=\"message?.message_text_updated_at\">\n        <span\n          data-testid=\"edited-flag\"\n          class=\"str-chat__mesage-simple-edited\"\n          translate\n          >streamChat.Edited</span\n        >\n        <div\n          data-testid=\"edited-timestamp\"\n          class=\"str-chat__message-edited-timestamp\"\n          [ngClass]=\"{\n            'str-chat__message-edited-timestamp--open': isEditedFlagOpened,\n            'str-chat__message-edited-timestamp--collapsed': !isEditedFlagOpened\n          }\"\n        >\n          <span translate>streamChat.Edited</span>\n          <time\n            dateTime=\"{{ message?.message_text_updated_at }}\"\n            title=\"{{ message?.message_text_updated_at }}\"\n          >\n            {{ pasedEditedDate }}\n          </time>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #messageStatus>\n  <ng-container\n    *ngIf=\"\n      isSentByCurrentUser &&\n      ((isLastSentMessage && message?.status === 'received') ||\n        message?.status === 'sending')\n    \"\n  >\n    <ng-container *ngIf=\"message?.status === 'sending'; else sentStatus\">\n      <ng-container *ngTemplateOutlet=\"sendingStatus\"></ng-container>\n    </ng-container>\n    <ng-template #sentStatus>\n      <ng-container\n        *ngIf=\"\n          mode === 'main' && isMessageDeliveredAndRead && canDisplayReadStatus;\n          else deliveredStatus\n        \"\n      >\n        <ng-container *ngTemplateOutlet=\"readStatus\"></ng-container>\n      </ng-container>\n    </ng-template>\n    <ng-template #deliveredStatus>\n      <ng-container\n        *ngTemplateOutlet=\"\n          (customTemplatesService.deliveredStatusTemplate$ | async) ||\n            defaultDeliveredStatus;\n          context: getDeliveredStatusContext()\n        \"\n      ></ng-container>\n    </ng-template>\n    <ng-template #defaultDeliveredStatus>\n      <span\n        *ngIf=\"mode === 'main'\"\n        class=\"\n          str-chat__message-simple-status\n          str-chat__message-simple-status-angular\n          str-chat__message-status\n        \"\n        data-testid=\"delivered-indicator\"\n        tabindex=\"0\"\n        [popper]=\"popperContent\"\n        [popperTrigger]=\"popperTriggerHover\"\n        [popperPlacement]=\"popperPlacementTop\"\n        [popperHideOnScroll]=\"false\"\n        [popperHideOnClickOutside]=\"false\"\n        (hover)=\"$event.stopPropagation()\"\n      >\n        <popper-content #popperContent>\n          <div class=\"str-chat__tooltip str-chat__tooltip-angular\">\n            {{ \"streamChat.Delivered\" | translate }}\n          </div>\n        </popper-content>\n        <stream-icon-placeholder\n          data-testid=\"delivered-icon\"\n          icon=\"delivered-icon\"\n        ></stream-icon-placeholder>\n      </span>\n    </ng-template>\n    <ng-template #sendingStatus>\n      <ng-container\n        *ngTemplateOutlet=\"\n          (customTemplatesService.sendingStatusTemplate$ | async) ||\n            defaultSendingStatus;\n          context: getSendingStatusContext()\n        \"\n      ></ng-container>\n    </ng-template>\n    <ng-template #defaultSendingStatus>\n      <span\n        class=\"\n          str-chat__message-simple-status\n          str-chat__message-simple-status-angular\n          str-chat__message-status\n        \"\n        data-testid=\"sending-indicator\"\n        tabindex=\"0\"\n        [popper]=\"popperContent\"\n        [popperTrigger]=\"popperTriggerHover\"\n        [popperPlacement]=\"popperPlacementTop\"\n        [popperHideOnScroll]=\"false\"\n        [popperHideOnClickOutside]=\"false\"\n        (hover)=\"$event.stopPropagation()\"\n      >\n        <popper-content #popperContent>\n          <div class=\"str-chat__tooltip str-chat__tooltip-angular\">\n            {{ \"streamChat.Sending...\" | translate }}\n          </div>\n        </popper-content>\n        <stream-loading-indicator-placeholder\n          data-testid=\"loading-indicator\"\n        ></stream-loading-indicator-placeholder>\n      </span>\n    </ng-template>\n    <ng-template #readStatus>\n      <ng-container\n        *ngTemplateOutlet=\"\n          (customTemplatesService.readStatusTemplate$ | async) ||\n            defaultReadStatus;\n          context: getReadStatusContext()\n        \"\n      ></ng-container>\n    </ng-template>\n    <ng-template #defaultReadStatus let-readByText=\"readByText\">\n      <span\n        class=\"\n          str-chat__message-simple-status\n          str-chat__message-simple-status-angular\n          str-chat__message-status\n        \"\n        data-testid=\"read-indicator\"\n        tabindex=\"0\"\n        [popper]=\"popperContent\"\n        [popperTrigger]=\"popperTriggerHover\"\n        [popperPlacement]=\"popperPlacementTop\"\n        [popperHideOnScroll]=\"false\"\n        [popperHideOnClickOutside]=\"false\"\n        (hover)=\"$event.stopPropagation()\"\n      >\n        <popper-content #popperContent>\n          <div\n            class=\"str-chat__tooltip str-chat__tooltip-angular\"\n            data-testid=\"read-by-tooltip\"\n          >\n            {{ readByText }}\n          </div>\n        </popper-content>\n        <stream-icon-placeholder icon=\"read-icon\"></stream-icon-placeholder>\n      </span>\n    </ng-template>\n  </ng-container>\n</ng-template>\n\n<ng-template #replyCountButton let-position=\"position\">\n  <div\n    *ngIf=\"\n      (position === 'inside-message-bubble' && themeVersion === '1') ||\n      (position === 'outside-message-bubble' && themeVersion === '2')\n    \"\n    class=\"\n      str-chat__message-simple-reply-button\n      str-chat__message-replies-count-button-wrapper\n    \"\n  >\n    <button\n      *ngIf=\"shouldDisplayThreadLink\"\n      class=\"str-chat__message-replies-count-button\"\n      data-testid=\"reply-count-button\"\n      (click)=\"setAsActiveParentMessage()\"\n    >\n      <stream-icon-placeholder\n        *ngIf=\"themeVersion === '1'\"\n        stream-icon-placeholder\n        icon=\"reply\"\n      ></stream-icon-placeholder>\n      {{message?.reply_count === 1 ? ('streamChat.1 reply' | translate) : ('streamChat.{{ replyCount }}\n      replies' | translate:replyCountParam)}}\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #attachmentsTemplate>\n  <ng-template\n    #defaultAttachments\n    let-messageId=\"messageId\"\n    let-attachments=\"attachments\"\n    let-parentMessageId=\"parentMessageId\"\n    let-imageModalStateChangeHandler=\"imageModalStateChangeHandler\"\n  >\n    <stream-attachment-list\n      [messageId]=\"messageId\"\n      [attachments]=\"attachments\"\n      [parentMessageId]=\"parentMessageId\"\n      (imageModalStateChange)=\"imageModalStateChangeHandler($event)\"\n    ></stream-attachment-list>\n  </ng-template>\n  <ng-container\n    *ngTemplateOutlet=\"\n      (customTemplatesService.attachmentListTemplate$ | async) ||\n        defaultAttachments;\n      context: getAttachmentListContext()\n    \"\n  ></ng-container>\n</ng-template>\n", components: [{ type: i8.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "size", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }, { type: i9.NgxPopperjsContentComponent, selector: "popper-content", exportAs: ["ngxPopperjsContent"] }, { type: i10.MessageActionsBoxComponent, selector: "stream-message-actions-box", inputs: ["isOpen", "isMine", "message", "enabledActions", "customActions"], outputs: ["displayedActionsCount", "isEditing"] }, { type: i11.IconPlaceholderComponent, selector: "stream-icon-placeholder", inputs: ["icon", "size"] }, { type: i12.MessageReactionsComponent, selector: "stream-message-reactions", inputs: ["messageId", "messageReactionCounts", "isSelectorOpen", "latestReactions", "ownReactions"], outputs: ["isSelectorOpenChange"] }, { type: i13.AttachmentListComponent, selector: "stream-attachment-list", inputs: ["messageId", "parentMessageId", "attachments"], outputs: ["imageModalStateChange"] }, { type: i14.LoadingIndicatorPlaceholderComponent, selector: "stream-loading-indicator-placeholder", inputs: ["size", "color"] }], directives: [{ type: i15.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i15.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.NgxPopperjsDirective, selector: "[popper]", inputs: ["popperTimeout", "popperTimeoutAfterShow", "popperApplyClass", "popper", "popperDisabled", "popperPlacement", "popperApplyArrowClass", "popperPreventOverflow", "popperHideOnClickOutside", "popperTrigger", "popperStyles", "popperAriaDescribeBy", "popperAriaRole", "popperBoundaries", "popperCloseOnClickOutside", "popperDisableAnimation", "popperDisableStyle", "popperHideOnMouseLeave", "popperHideOnScroll", "popperAppendTo", "popperModifiers", "popperPositionFixed", "popperDelay", "popperShowOnStart", "popperTarget"], outputs: ["popperOnHidden", "popperOnShown", "popperOnUpdate"], exportAs: ["popper"] }, { type: i15.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i16.TranslateDirective, selector: "[translate],[ngx-translate]", inputs: ["translate", "translateParams"] }, { type: i15.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i15.AsyncPipe, "translate": i16.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-message',
                    templateUrl: './message.component.html',
                    styles: [],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ChatClientService }, { type: i2.ChannelService }, { type: i3.CustomTemplatesService }, { type: i0.ChangeDetectorRef }, { type: i4.ThemeService }, { type: i5.DateParserService }, { type: i0.NgZone }, { type: i6.MessageService }, { type: i7.MessageActionsService }]; }, propDecorators: { message: [{
                type: Input
            }], enabledMessageActions: [{
                type: Input
            }], isLastSentMessage: [{
                type: Input
            }], mode: [{
                type: Input
            }], isHighlighted: [{
                type: Input
            }], customActions: [{
                type: Input
            }], container: [{
                type: ViewChild,
                args: ['container']
            }] } });
//# sourceMappingURL=data:application/json;base64,