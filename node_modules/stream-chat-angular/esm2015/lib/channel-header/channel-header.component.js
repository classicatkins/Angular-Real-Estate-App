import { Component, } from '@angular/core';
import { getChannelDisplayText } from '../get-channel-display-text';
import * as i0 from "@angular/core";
import * as i1 from "../channel.service";
import * as i2 from "../channel-list/channel-list-toggle.service";
import * as i3 from "../custom-templates.service";
import * as i4 from "../chat-client.service";
import * as i5 from "../icon-placeholder/icon-placeholder.component";
import * as i6 from "../avatar-placeholder/avatar-placeholder.component";
import * as i7 from "@angular/common";
import * as i8 from "@ngx-translate/core";
/**
 * The `ChannelHeader` component displays the avatar and name of the currently active channel along with member and watcher information. You can read about [the difference between members and watchers](https://getstream.io/chat/docs/javascript/watch_channel/?language=javascript#watchers-vs-members) in the platform documentation. Please note that number of watchers is only displayed if the user has [`connect-events` capability](https://getstream.io/chat/docs/javascript/channel_capabilities/?language=javascript)
 */
export class ChannelHeaderComponent {
    constructor(channelService, channelListToggleService, customTemplatesService, cdRef, chatClientService) {
        this.channelService = channelService;
        this.channelListToggleService = channelListToggleService;
        this.customTemplatesService = customTemplatesService;
        this.cdRef = cdRef;
        this.chatClientService = chatClientService;
        this.subscriptions = [];
        this.channelService.activeChannel$.subscribe((c) => {
            var _a, _b;
            this.activeChannel = c;
            const capabilities = (_b = (_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.own_capabilities;
            if (!capabilities) {
                return;
            }
            this.canReceiveConnectEvents =
                capabilities.indexOf('connect-events') !== -1;
        });
    }
    ngOnInit() {
        this.subscriptions.push(this.customTemplatesService.channelActionsTemplate$.subscribe((template) => {
            this.channelActionsTemplate = template;
            this.cdRef.detectChanges();
        }));
        this.subscriptions.push(this.customTemplatesService.channelHeaderInfoTemplate$.subscribe((template) => {
            this.channelHeaderInfoTemplate = template;
            this.cdRef.detectChanges();
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    toggleMenu(event) {
        event.stopPropagation();
        this.channelListToggleService.toggle();
    }
    getChannelActionsContext() {
        return { channel: this.activeChannel };
    }
    getChannelInfoContext() {
        return { channel: this.activeChannel };
    }
    get memberCountParam() {
        var _a, _b;
        return { memberCount: ((_b = (_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.member_count) || 0 };
    }
    get watcherCountParam() {
        var _a, _b;
        return { watcherCount: ((_b = (_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.watcher_count) || 0 };
    }
    get displayText() {
        if (!this.activeChannel) {
            return '';
        }
        return getChannelDisplayText(this.activeChannel, this.chatClientService.chatClient.user);
    }
    get avatarName() {
        var _a, _b;
        return (_b = (_a = this.activeChannel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.name;
    }
}
ChannelHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelHeaderComponent, deps: [{ token: i1.ChannelService }, { token: i2.ChannelListToggleService }, { token: i3.CustomTemplatesService }, { token: i0.ChangeDetectorRef }, { token: i4.ChatClientService }], target: i0.ɵɵFactoryTarget.Component });
ChannelHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: ChannelHeaderComponent, selector: "stream-channel-header", ngImport: i0, template: "<div class=\"str-chat__header-livestream str-chat__channel-header\">\n  <div\n    class=\"str-chat__header-hamburger\"\n    (click)=\"toggleMenu($event)\"\n    (keyup.enter)=\"toggleMenu($event)\"\n  >\n    <stream-icon-placeholder icon=\"menu\"></stream-icon-placeholder>\n  </div>\n  <ng-content></ng-content>\n  <stream-avatar-placeholder\n    imageUrl=\"{{ activeChannel?.data?.image }}\"\n    name=\"{{ avatarName }}\"\n    type=\"channel\"\n    location=\"channel-header\"\n    [channel]=\"activeChannel\"\n    [size]=\"40\"\n  ></stream-avatar-placeholder>\n  <div class=\"str-chat__header-livestream-left str-chat__channel-header-end\">\n    <p\n      data-testid=\"name\"\n      class=\"\n        str-chat__header-livestream-left--title str-chat__channel-header-title\n      \"\n    >\n      {{ displayText }}\n    </p>\n    <ng-container\n      *ngTemplateOutlet=\"\n        channelHeaderInfoTemplate || defaultChannelInfo;\n        context: getChannelInfoContext()\n      \"\n    ></ng-container>\n    <ng-template #defaultChannelInfo>\n      <p\n        data-testid=\"info\"\n        class=\"\n          str-chat__header-livestream-left--members\n          str-chat__channel-header-info\n        \"\n      >\n        {{'streamChat.{{ memberCount }} members' | translate:memberCountParam}}\n        {{canReceiveConnectEvents ? ('streamChat.{{ watcherCount }} online' |\n        translate:watcherCountParam) : ''}}\n      </p>\n    </ng-template>\n  </div>\n  <ng-container *ngIf=\"channelActionsTemplate\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        channelActionsTemplate;\n        context: getChannelActionsContext()\n      \"\n    ></ng-container>\n  </ng-container>\n</div>\n", components: [{ type: i5.IconPlaceholderComponent, selector: "stream-icon-placeholder", inputs: ["icon", "size"] }, { type: i6.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "size", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }], directives: [{ type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i8.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChannelHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-channel-header',
                    templateUrl: './channel-header.component.html',
                    styles: [],
                }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.ChannelListToggleService }, { type: i3.CustomTemplatesService }, { type: i0.ChangeDetectorRef }, { type: i4.ChatClientService }]; } });
//# sourceMappingURL=data:application/json;base64,