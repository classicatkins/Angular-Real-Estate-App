import { __awaiter } from "tslib";
import { Component, HostBinding } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../channel.service";
import * as i2 from "../custom-templates.service";
import * as i3 from "../message-actions.service";
import * as i4 from "../modal/modal.component";
import * as i5 from "@angular/common";
import * as i6 from "@ngx-translate/core";
/**
 * The component watches for the [`channelService.bouncedMessage$` stream](../../services/ChannelService/#bouncedmessage) and opens the bounce modal if a message is emitted.
 *
 * To bounce messages, you need to set up [semantic filters for moderation](https://getstream.io/automated-moderation/docs/automod_configuration/?q=semantic%20filters).
 */
export class MessageBouncePromptComponent {
    constructor(channelService, customTemplatesService, messageActionsService) {
        this.channelService = channelService;
        this.customTemplatesService = customTemplatesService;
        this.messageActionsService = messageActionsService;
        this.class = 'str-chat__message-bounce-prompt';
        this.isModalOpen = false;
        this.subscriptions = [];
        this.messageBounceModalOpenChanged = (isOpen) => {
            this.isModalOpen = isOpen;
            if (!isOpen) {
                this.message = undefined;
                this.channelService.bouncedMessage$.next(undefined);
            }
        };
        this.subscriptions.push(this.channelService.bouncedMessage$.subscribe((m) => {
            if (m !== this.message) {
                this.message = m;
                if (this.message) {
                    this.isModalOpen = true;
                }
            }
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    resendMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isModalOpen = false;
            yield this.channelService.resendMessage(this.message);
            this.message = undefined;
            this.channelService.bouncedMessage$.next(undefined);
        });
    }
    deleteMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.message) {
                return;
            }
            this.isModalOpen = false;
            yield this.channelService.deleteMessage(this.message, true);
            this.message = undefined;
            this.channelService.bouncedMessage$.next(undefined);
        });
    }
    editMessage() {
        this.isModalOpen = false;
        this.messageActionsService.messageToEdit$.next(this.message);
        this.message = undefined;
        this.channelService.bouncedMessage$.next(undefined);
    }
}
MessageBouncePromptComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageBouncePromptComponent, deps: [{ token: i1.ChannelService }, { token: i2.CustomTemplatesService }, { token: i3.MessageActionsService }], target: i0.ɵɵFactoryTarget.Component });
MessageBouncePromptComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: MessageBouncePromptComponent, selector: "stream-message-bounce-prompt", host: { properties: { "class": "this.class" } }, ngImport: i0, template: "<ng-container\n  *ngTemplateOutlet=\"\n    (customTemplatesService.modalTemplate$ | async) || defaultModal;\n    context: {\n      message: message,\n      isOpen: isModalOpen,\n      isOpenChangeHandler: messageBounceModalOpenChanged,\n      content: modalContent\n    }\n  \"\n></ng-container>\n\n<ng-template\n  #defaultModal\n  let-isOpen=\"isOpen\"\n  let-isOpenChangeHandler=\"isOpenChangeHandler\"\n  let-content=\"content\"\n>\n  <stream-modal\n    [isOpen]=\"isOpen\"\n    *ngIf=\"isOpen\"\n    (isOpenChange)=\"isOpenChangeHandler($event)\"\n    [content]=\"content\"\n  >\n  </stream-modal>\n</ng-template>\n\n<ng-template #modalContent>\n  <div\n    class=\"str-chat__message-bounce-prompt\"\n    data-testid=\"message-bounce-prompt\"\n  >\n    <div class=\"str-chat__message-bounce-prompt-header\">\n      {{\n        \"streamChat.This message did not meet our content guidelines\"\n          | translate\n      }}\n    </div>\n    <div class=\"str-chat__message-bounce-actions\">\n      <button\n        class=\"str-chat__message-bounce-edit\"\n        data-testid=\"message-bounce-edit\"\n        (click)=\"editMessage()\"\n        (keyup.enter)=\"editMessage()\"\n        type=\"button\"\n      >\n        {{ \"streamChat.Edit Message\" | translate }}\n      </button>\n      <button\n        class=\"str-chat__message-bounce-send\"\n        data-testid=\"message-bounce-send\"\n        (click)=\"resendMessage()\"\n        (keyup.enter)=\"resendMessage()\"\n      >\n        {{ \"streamChat.Send Anyway\" | translate }}\n      </button>\n      <button\n        class=\"str-chat__message-bounce-delete\"\n        data-testid=\"message-bounce-delete\"\n        (click)=\"deleteMessage()\"\n        (keyup.enter)=\"deleteMessage()\"\n      >\n        {{ \"streamChat.Delete\" | translate }}\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i4.ModalComponent, selector: "stream-modal", inputs: ["isOpen", "content"], outputs: ["isOpenChange"] }], directives: [{ type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe, "translate": i6.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageBouncePromptComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-message-bounce-prompt',
                    templateUrl: './message-bounce-prompt.component.html',
                    styles: [],
                }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.CustomTemplatesService }, { type: i3.MessageActionsService }]; }, propDecorators: { class: [{
                type: HostBinding
            }] } });
//# sourceMappingURL=data:application/json;base64,