import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { ChannelService } from '../channel.service';
import { NgxPopperjsTriggers, NgxPopperjsPlacements } from 'ngx-popperjs';
import * as i0 from "@angular/core";
import * as i1 from "../channel.service";
import * as i2 from "../message-reactions.service";
import * as i3 from "../custom-templates.service";
import * as i4 from "../theme.service";
import * as i5 from "../avatar-placeholder/avatar-placeholder.component";
import * as i6 from "../modal/modal.component";
import * as i7 from "../loading-indicator/loading-indicator.component";
import * as i8 from "@angular/common";
/**
 * The `MessageReactions` component displays the reactions of a message, the current user can add and remove reactions. You can read more about [message reactions](https://getstream.io/chat/docs/javascript/send_reaction/?language=javascript) in the platform documentation.
 */
export class MessageReactionsComponent {
    constructor(cdRef, channelService, messageReactionsService, customTemplatesService, themeService) {
        this.cdRef = cdRef;
        this.channelService = channelService;
        this.messageReactionsService = messageReactionsService;
        this.customTemplatesService = customTemplatesService;
        this.themeService = themeService;
        /**
         * The number of reactions grouped by [reaction types](https://github.com/GetStream/stream-chat-angular/tree/master/projects/stream-chat-angular/src/lib/message-reactions/message-reactions.component.ts)
         */
        this.messageReactionCounts = {};
        /**
         * Indicates if the selector should be opened or closed. Adding a UI element to open and close the selector is the parent's component responsibility.
         */
        this.isSelectorOpen = false;
        /**
         * List of reactions of a [message](../types/stream-message.mdx), used to display the users of a reaction type.
         */
        this.latestReactions = [];
        /**
         * List of the user's own reactions of a [message](../types/stream-message.mdx), used to display the users of a reaction type.
         */
        this.ownReactions = [];
        /**
         * Indicates if the selector should be opened or closed. Adding a UI element to open and close the selector is the parent's component responsibility.
         */
        this.isSelectorOpenChange = new EventEmitter();
        this.popperTriggerHover = NgxPopperjsTriggers.hover;
        this.popperPlacementAuto = NgxPopperjsPlacements.AUTO;
        this.isLoading = true;
        this.reactions = [];
        this.shouldHandleReactionClick = true;
        this.existingReactions = [];
        this.reactionsCount = 0;
        this.reactionOptions = [];
        this.subscriptions = [];
        this.isViewInited = false;
        this.isOpenChange = (isOpen) => {
            this.selectedReactionType = isOpen ? this.selectedReactionType : undefined;
        };
        this.eventHandler = (event) => {
            var _a;
            if (!((_a = this.selectorContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.contains(event.target))) {
                this.isSelectorOpenChange.emit(false);
            }
        };
    }
    ngOnInit() {
        this.subscriptions.push(this.messageReactionsService.reactions$.subscribe((reactions) => {
            this.reactionOptions = Object.keys(reactions);
            this.setExistingReactions();
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
    }
    ngOnChanges(changes) {
        if (changes.isSelectorOpen) {
            this.isSelectorOpen
                ? setTimeout(() => this.watchForOutsideClicks()) // setTimeout: wait for current click to bubble up, and only watch for clicks after that
                : this.stopWatchForOutsideClicks();
        }
        if (changes.messageReactionCounts) {
            this.setExistingReactions();
        }
        if (changes.messageReactionCounts && this.messageReactionCounts) {
            const reactionsCount = Object.keys(this.messageReactionCounts).reduce((acc, key) => acc + (this.messageReactionCounts[key] || 0), 0);
            this.shouldHandleReactionClick =
                reactionsCount <= ChannelService.MAX_MESSAGE_REACTIONS_TO_FETCH ||
                    !!this.messageReactionsService.customReactionClickHandler;
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
    }
    ngAfterViewChecked() {
        if (this.tooltipText && !this.tooltipPositions) {
            this.setTooltipPosition();
            this.cdRef.detectChanges();
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    getLatestUserByReaction(reactionType) {
        var _a;
        return (_a = this.latestReactions.find((r) => r.type === reactionType && r.user)) === null || _a === void 0 ? void 0 : _a.user;
    }
    getEmojiByReaction(reactionType) {
        return this.messageReactionsService.reactions[reactionType];
    }
    reactionSelected(reactionType) {
        if (!this.shouldHandleReactionClick) {
            return;
        }
        if (this.themeService.themeVersion === '1') {
            return;
        }
        if (!this.messageId) {
            return;
        }
        if (this.messageReactionsService.customReactionClickHandler) {
            this.messageReactionsService.customReactionClickHandler({
                messageId: this.messageId,
                reactionType: reactionType,
            });
        }
        else {
            this.selectedReactionType = reactionType;
            void this.fetchAllReactions();
        }
    }
    getUsersByReaction(reactionType) {
        return this.latestReactions
            .filter((r) => r.type === reactionType)
            .map((r) => { var _a, _b; return ((_a = r.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = r.user) === null || _b === void 0 ? void 0 : _b.id); })
            .filter((i) => !!i)
            .join(', ');
    }
    getAllUsersByReaction(reactionType) {
        if (!reactionType) {
            return [];
        }
        const users = this.reactions
            .filter((r) => r.type === reactionType)
            .map((r) => r.user)
            .filter((i) => !!i);
        users.sort((u1, u2) => {
            var _a, _b;
            const name1 = (_a = u1.name) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            const name2 = (_b = u2.name) === null || _b === void 0 ? void 0 : _b.toLowerCase();
            if (!name1) {
                return 1;
            }
            if (!name2) {
                return -1;
            }
            if (name1 === name2) {
                return 0;
            }
            if (name1 < name2) {
                return -1;
            }
            else {
                return 1;
            }
        });
        return users;
    }
    showTooltip(event, reactionType) {
        this.currentTooltipTarget = event.target;
        this.tooltipText = this.getUsersByReaction(reactionType);
    }
    hideTooltip() {
        this.tooltipText = undefined;
        this.currentTooltipTarget = undefined;
        this.tooltipPositions = undefined;
    }
    trackByMessageReaction(index, item) {
        return item;
    }
    trackByUserId(index, item) {
        return item.id;
    }
    react(type) {
        return __awaiter(this, void 0, void 0, function* () {
            this.ownReactions.find((r) => r.type === type)
                ? yield this.channelService.removeReaction(this.messageId, type)
                : yield this.channelService.addReaction(this.messageId, type);
            this.isSelectorOpenChange.emit(false);
        });
    }
    isOwnReaction(reactionType) {
        return !!this.ownReactions.find((r) => r.type === reactionType);
    }
    watchForOutsideClicks() {
        window.addEventListener('click', this.eventHandler);
    }
    stopWatchForOutsideClicks() {
        window.removeEventListener('click', this.eventHandler);
    }
    setTooltipPosition() {
        var _a, _b, _c;
        const tooltip = (_a = this.selectorTooltip) === null || _a === void 0 ? void 0 : _a.nativeElement.getBoundingClientRect();
        const target = (_b = this.currentTooltipTarget) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();
        const container = (_c = this.selectorContainer) === null || _c === void 0 ? void 0 : _c.nativeElement.getBoundingClientRect();
        if (!tooltip || !target || !container)
            return;
        const tooltipPosition = tooltip.width === container.width || tooltip.x < container.x
            ? 0
            : target.left + target.width / 2 - container.left - tooltip.width / 2;
        const arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;
        this.tooltipPositions = {
            tooltip: tooltipPosition,
            arrow: arrowPosition,
        };
    }
    fetchAllReactions() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.messageId) {
                return;
            }
            this.isLoading = true;
            try {
                this.reactions = yield this.channelService.getMessageReactions(this.messageId);
            }
            catch (error) {
                this.selectedReactionType = undefined;
            }
            finally {
                this.isLoading = false;
                this.cdRef.detectChanges();
            }
        });
    }
    setExistingReactions() {
        this.existingReactions = Object.keys(this.messageReactionCounts)
            .filter((k) => this.reactionOptions.indexOf(k) !== -1)
            .filter((k) => this.messageReactionCounts[k] > 0);
        this.reactionsCount = this.existingReactions.reduce((total, reaction) => total + this.messageReactionCounts[reaction], 0);
    }
}
MessageReactionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageReactionsComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.ChannelService }, { token: i2.MessageReactionsService }, { token: i3.CustomTemplatesService }, { token: i4.ThemeService }], target: i0.ɵɵFactoryTarget.Component });
MessageReactionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: MessageReactionsComponent, selector: "stream-message-reactions", inputs: { messageId: "messageId", messageReactionCounts: "messageReactionCounts", isSelectorOpen: "isSelectorOpen", latestReactions: "latestReactions", ownReactions: "ownReactions" }, outputs: { isSelectorOpenChange: "isSelectorOpenChange" }, viewQueries: [{ propertyName: "selectorContainer", first: true, predicate: ["selectorContainer"], descendants: true }, { propertyName: "selectorTooltip", first: true, predicate: ["selectorTooltip"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  *ngIf=\"existingReactions.length > 0\"\n  class=\"str-chat__reaction-list str-chat__message-reactions-container\"\n  [class.str-chat__reaction-list--reverse]=\"true\"\n  [class.str-chat__reaction-list-hidden]=\"isSelectorOpen\"\n  data-testid=\"reaction-list\"\n>\n  <ul class=\"str-chat__message-reactions\">\n    <li\n      class=\"str-chat__message-reaction\"\n      *ngFor=\"\n        let reactionType of existingReactions;\n        trackBy: trackByMessageReaction\n      \"\n      [ngStyle]=\"{ cursor: shouldHandleReactionClick ? 'pointer' : 'default' }\"\n      [class.str-chat__message-reaction-own]=\"isOwnReaction(reactionType)\"\n      data-testclass=\"emoji\"\n      (click)=\"reactionSelected(reactionType)\"\n      (keyup.enter)=\"reactionSelected(reactionType)\"\n    >\n      <span class=\"emoji str-chat__message-reaction-emoji\">\n        {{ getEmojiByReaction(reactionType) }}&nbsp;\n      </span>\n      <span\n        data-testclass=\"reaction-list-reaction-count\"\n        class=\"str-chat__message-reaction-count\"\n      >\n        {{ messageReactionCounts[reactionType] }}\n      </span>\n    </li>\n    <li>\n      <span\n        data-testid=\"reactions-count\"\n        class=\"str-chat__reaction-list--counter\"\n        >{{ reactionsCount }}</span\n      >\n    </li>\n  </ul>\n</div>\n\n<div\n  #selectorContainer\n  class=\"str-chat__reaction-selector str-chat__message-reaction-selector\"\n  *ngIf=\"isSelectorOpen\"\n  data-testid=\"reaction-selector\"\n>\n  <div\n    *ngIf=\"tooltipText\"\n    data-testid=\"tooltip\"\n    #selectorTooltip\n    class=\"str-chat__reaction-selector-tooltip\"\n    [ngStyle]=\"{\n      left: tooltipPositions?.tooltip + 'px',\n      visibility: tooltipPositions ? 'visible' : 'hidden'\n    }\"\n  >\n    <div\n      class=\"arrow\"\n      [ngStyle]=\"{ left: tooltipPositions?.arrow + 'px' }\"\n    ></div>\n    <span class=\"latest-user-username\">\n      {{ tooltipText }}\n    </span>\n  </div>\n  <ul\n    class=\"str-chat__message-reactions-list str-chat__message-reactions-options\"\n  >\n    <li\n      class=\"\n        str-chat__message-reactions-option\n        str-chat__message-reactions-list-item\n        str-chat__emoji\n      \"\n      *ngFor=\"\n        let reactionType of reactionOptions;\n        trackBy: trackByMessageReaction\n      \"\n      [class.str-chat__message-reactions-option-selected]=\"\n        isOwnReaction(reactionType)\n      \"\n      data-testclass=\"emoji-option\"\n      (click)=\"react(reactionType)\"\n      (keyup.enter)=\"react(reactionType)\"\n    >\n      <div\n        *ngIf=\"getLatestUserByReaction(reactionType) as user\"\n        class=\"latest-user str-chat__message-reactions-last-user\"\n        (click)=\"hideTooltip()\"\n        (keyup.enter)=\"hideTooltip()\"\n        (mouseenter)=\"showTooltip($event, reactionType)\"\n        (mouseleave)=\"hideTooltip()\"\n        attr.data-testid=\"{{ reactionType }}-last-user\"\n      >\n        <stream-avatar-placeholder\n          attr.data-testid=\"{{ reactionType }}-avatar\"\n          [imageUrl]=\"user.image\"\n          [name]=\"user.name || user.id\"\n          [size]=\"20\"\n          location=\"reaction\"\n        ></stream-avatar-placeholder>\n      </div>\n      <span\n        class=\"\n          emoji\n          str-chat__emoji-selector-emoji-angular\n          str-chat__message-reaction-emoji\n        \"\n      >\n        {{ getEmojiByReaction(reactionType) }}\n      </span>\n      <span\n        *ngIf=\"\n          messageReactionCounts[reactionType] &&\n          messageReactionCounts[reactionType]! > 0\n        \"\n        class=\"str-chat__message-reactions-list-item__count\"\n        attr.data-testid=\"{{ reactionType }}-reaction-count\"\n      >\n        {{ messageReactionCounts[reactionType] }}\n      </span>\n    </li>\n  </ul>\n</div>\n\n<ng-container *ngIf=\"selectedReactionType\">\n  <ng-container\n    *ngTemplateOutlet=\"\n      (customTemplatesService.modalTemplate$ | async) || defaultModal;\n      context: {\n        isOpen: !!selectedReactionType,\n        messageId: messageId,\n        reactionType: selectedReactionType,\n        isOpenChangeHandler: isOpenChange,\n        content: modalContent\n      }\n    \"\n  ></ng-container>\n</ng-container>\n\n<ng-template\n  #defaultModal\n  let-isOpen=\"isOpen\"\n  let-messageId=\"messageId\"\n  let-reactionType=\"reactionType\"\n  let-isOpenChangeHandler=\"isOpenChangeHandler\"\n  let-content=\"content\"\n>\n  <stream-modal\n    class=\"str-chat__message-reactions-details-modal\"\n    [isOpen]=\"isOpen\"\n    (isOpenChange)=\"isOpenChangeHandler($event)\"\n    [content]=\"content\"\n  >\n  </stream-modal>\n</ng-template>\n\n<ng-template #modalContent>\n  <div class=\"str-chat__message-reactions-details\">\n    <div class=\"str-chat__message-reactions-details-reaction-types\">\n      <div\n        class=\"str-chat__message-reactions-details-reaction-type\"\n        *ngFor=\"\n          let reactionType of existingReactions;\n          trackBy: trackByMessageReaction\n        \"\n        [ngStyle]=\"{\n          cursor: shouldHandleReactionClick ? 'pointer' : 'default'\n        }\"\n        attr.data-testid=\"reaction-details-selector-{{ reactionType }}\"\n        [class.str-chat__message-reactions-details-reaction-type--selected]=\"\n          reactionType === selectedReactionType\n        \"\n        (click)=\"selectedReactionType = reactionType; allUsers.scrollTop = 0\"\n        (keyup.enter)=\"\n          selectedReactionType = reactionType; allUsers.scrollTop = 0\n        \"\n      >\n        <span class=\"emoji str-chat__message-reaction-emoji\">\n          {{ getEmojiByReaction(reactionType) }}&nbsp;\n        </span>\n        <span class=\"str-chat__message-reaction-count\">\n          {{ messageReactionCounts[reactionType] }}\n        </span>\n      </div>\n    </div>\n    <div\n      class=\"\n        emoji\n        str-chat__message-reaction-emoji str-chat__message-reaction-emoji-big\n      \"\n    >\n      {{ getEmojiByReaction(selectedReactionType!) }}\n    </div>\n    <div\n      #allUsers\n      data-testid=\"all-reacting-users\"\n      class=\"str-chat__message-reactions-details-reacting-users\"\n    >\n      <stream-loading-indicator\n        *ngIf=\"isLoading; else reactions\"\n      ></stream-loading-indicator>\n      <ng-template #reactions>\n        <div\n          class=\"str-chat__message-reactions-details-reacting-user\"\n          *ngFor=\"\n            let user of getAllUsersByReaction(selectedReactionType);\n            trackBy: trackByUserId\n          \"\n        >\n          <stream-avatar-placeholder\n            data-testclass=\"avatar\"\n            class=\"str-chat__avatar str-chat__avatar--circle\"\n            [size]=\"30\"\n            [imageUrl]=\"user.image\"\n            [name]=\"user.name\"\n            type=\"user\"\n            location=\"reaction\"\n            [user]=\"user\"\n          ></stream-avatar-placeholder>\n          <span\n            data-testclass=\"reaction-user-username\"\n            class=\"str-chat__user-item--name\"\n            >{{ user.name }}</span\n          >\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i5.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "size", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }, { type: i6.ModalComponent, selector: "stream-modal", inputs: ["isOpen", "content"], outputs: ["isOpenChange"] }, { type: i7.LoadingIndicatorComponent, selector: "stream-loading-indicator", inputs: ["size", "color"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageReactionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-message-reactions',
                    templateUrl: './message-reactions.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.ChannelService }, { type: i2.MessageReactionsService }, { type: i3.CustomTemplatesService }, { type: i4.ThemeService }]; }, propDecorators: { messageId: [{
                type: Input
            }], messageReactionCounts: [{
                type: Input
            }], isSelectorOpen: [{
                type: Input
            }], latestReactions: [{
                type: Input
            }], ownReactions: [{
                type: Input
            }], isSelectorOpenChange: [{
                type: Output
            }], selectorContainer: [{
                type: ViewChild,
                args: ['selectorContainer']
            }], selectorTooltip: [{
                type: ViewChild,
                args: ['selectorTooltip']
            }] } });
//# sourceMappingURL=data:application/json;base64,