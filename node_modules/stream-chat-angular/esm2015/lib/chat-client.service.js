import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { StreamChat } from 'stream-chat';
import { version } from '../assets/version';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./notification.service";
/**
 * The `ChatClient` service connects the user to the Stream chat.
 */
export class ChatClientService {
    constructor(ngZone, notificationService) {
        this.ngZone = ngZone;
        this.notificationService = notificationService;
        this.notificationSubject = new ReplaySubject(1);
        this.connectionStateSubject = new ReplaySubject(1);
        this.appSettingsSubject = new BehaviorSubject(undefined);
        this.pendingInvitesSubject = new BehaviorSubject([]);
        this.userSubject = new ReplaySubject(1);
        this.subscriptions = [];
        this.events$ = this.notificationSubject.asObservable();
        this.connectionState$ = this.connectionStateSubject.asObservable();
        this.appSettings$ = this.appSettingsSubject.asObservable();
        this.pendingInvites$ = this.pendingInvitesSubject.asObservable();
        this.user$ = this.userSubject.asObservable();
    }
    /**
     * Creates a [`StreamChat`](https://github.com/GetStream/stream-chat-js/blob/668b3e5521339f4e14fc657834531b4c8bf8176b/src/client.ts#L124) instance using the provided `apiKey`, and connects a user with the given meta data and token. More info about [connecting users](https://getstream.io/chat/docs/javascript/init_and_users/?language=javascript) can be found in the platform documentation.
     * @param apiKey
     * @param userOrId you can emit this for anonymous logins
     * @param userTokenOrProvider You can provide:<ul>
     *  <li> a token, </li>
     *  <li> a token provider, a method that returns `Promise<string>`, which can be called when the previous token expires (recommended setup for production applications)</li>
     *  <li> the keyword 'guest' to connect as [guest user](https://getstream.io/chat/docs/javascript/authless_users/?language=javascript#guest-users) </li>
     *  <li> the keyword 'anonymous' to connect as [anonymous user](https://getstream.io/chat/docs/javascript/authless_users/?language=javascript#anonymous-users) </li>
     *  </ul>
     * @param clientOptions Setting to provide to the Stream client instance
     */
    init(apiKey, userOrId, userTokenOrProvider, clientOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.chatClient = StreamChat.getInstance(apiKey, clientOptions);
            this.chatClient.recoverStateOnReconnect = false;
            this.chatClient.devToken;
            let result;
            yield this.ngZone.runOutsideAngular(() => __awaiter(this, void 0, void 0, function* () {
                var _b;
                const user = typeof userOrId === 'string' ? { id: userOrId } : userOrId;
                try {
                    result = yield ((_b = {
                        guest: () => this.chatClient.setGuestUser(user),
                        anonymous: () => this.chatClient.connectAnonymousUser(),
                        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                    }[`${userTokenOrProvider}`]) !== null && _b !== void 0 ? _b : (() => this.chatClient.connectUser(user, userTokenOrProvider)))();
                }
                catch (error) {
                    this.notificationService.addPermanentNotification('streamChat.Error connecting to chat, refresh the page to try again.', 'error');
                    throw error;
                }
                this.userSubject.next(this.chatClient.user ? Object.assign({}, this.chatClient.user) : undefined);
                const sdkPrefix = 'stream-chat-angular';
                if (!this.chatClient.getUserAgent().includes(sdkPrefix)) {
                    this.chatClient.setUserAgent(`${sdkPrefix}-${version}-${this.chatClient.getUserAgent()}`);
                }
            }));
            const channels = yield this.chatClient.queryChannels({ invite: 'pending' }, // TODO: find out why we need this typecast
            {}, { user_id: (_a = this.chatClient.user) === null || _a === void 0 ? void 0 : _a.id });
            this.pendingInvitesSubject.next(channels);
            this.appSettingsSubject.next(undefined);
            this.subscriptions.push(this.chatClient.on((e) => {
                this.updateUser(e);
                this.updatePendingInvites(e);
                this.notificationSubject.next({
                    eventType: e.type,
                    event: e,
                });
            }));
            let removeNotification;
            this.subscriptions.push(this.chatClient.on('connection.changed', (e) => {
                this.ngZone.run(() => {
                    const isOnline = e.online;
                    if (isOnline) {
                        if (removeNotification) {
                            removeNotification();
                        }
                    }
                    else {
                        removeNotification =
                            this.notificationService.addPermanentNotification('streamChat.Connection failure, reconnecting now...');
                    }
                    this.connectionStateSubject.next(isOnline ? 'online' : 'offline');
                });
            }));
            return result;
        });
    }
    /**
     * Disconnects the current user, and closes the WebSocket connection. Useful when disconnecting a chat user, use in combination with [`reset`](./ChannelService.mdx/#reset).
     */
    disconnectUser() {
        return __awaiter(this, void 0, void 0, function* () {
            this.pendingInvitesSubject.next([]);
            yield this.chatClient.disconnectUser();
            this.userSubject.next(undefined);
            this.subscriptions.forEach((s) => s.unsubscribe());
        });
    }
    /**
     * Loads the current [application settings](https://getstream.io/chat/docs/javascript/app_setting_overview/?language=javascript), if the application settings have already been loaded, it does nothing.
     */
    getAppSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.appSettingsSubject.getValue()) {
                return;
            }
            const settings = yield this.chatClient.getAppSettings();
            this.appSettingsSubject.next(settings.app || {});
        });
    }
    /**
     * Flag the message with the given ID. If you want to know [more about flags](https://getstream.io/chat/docs/javascript/moderation/?language=javascript) check out the platform documentation.
     * @param messageId
     */
    flagMessage(messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.chatClient.flagMessage(messageId);
        });
    }
    /**
     * Searches for users in the application that have ID or name matching the provided search term
     * @param searchTerm
     * @returns The users matching the search
     */
    autocompleteUsers(searchTerm) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!searchTerm) {
                return [];
            }
            const result = yield this.chatClient.queryUsers({
                $or: [
                    { id: { $autocomplete: searchTerm } },
                    { name: { $autocomplete: searchTerm } },
                ],
                id: { $ne: this.chatClient.userID },
            }); // TODO: find out why we need this typecast
            return result.users;
        });
    }
    updatePendingInvites(e) {
        var _a, _b, _c;
        if (((_b = (_a = e.member) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id) === ((_c = this.chatClient.user) === null || _c === void 0 ? void 0 : _c.id) && e.channel) {
            const pendingInvites = this.pendingInvitesSubject.getValue();
            if (e.type === 'notification.invited') {
                this.pendingInvitesSubject.next([...pendingInvites, e.channel]);
            }
            else if (e.type === 'notification.invite_accepted' ||
                e.type === 'notification.invite_rejected') {
                const index = pendingInvites.findIndex((i) => { var _a; return (i === null || i === void 0 ? void 0 : i.cid) === ((_a = e.channel) === null || _a === void 0 ? void 0 : _a.cid); });
                if (index !== -1) {
                    pendingInvites.splice(index, 1);
                    this.pendingInvitesSubject.next([...pendingInvites]);
                }
            }
        }
    }
    updateUser(e) {
        var _a;
        if (typeof e.total_unread_count !== 'undefined') {
            let user;
            this.userSubject.pipe(take(1)).subscribe((u) => {
                user = u;
            });
            if (user && user.total_unread_count !== e.total_unread_count) {
                this.userSubject.next(Object.assign(Object.assign({}, user), { total_unread_count: e.total_unread_count }));
            }
        }
        if (typeof e.unread_channels !== 'undefined') {
            let user;
            this.userSubject.pipe(take(1)).subscribe((u) => {
                user = u;
            });
            if (user && user.unread_channels !== e.unread_channels) {
                this.userSubject.next(Object.assign(Object.assign({}, user), { unread_channels: e.unread_channels }));
            }
        }
        if (typeof e.unread_count !== 'undefined') {
            let user;
            this.userSubject.pipe(take(1)).subscribe((u) => {
                user = u;
            });
            if (user && user.unread_count !== e.unread_count) {
                this.userSubject.next(Object.assign(Object.assign({}, user), { unread_count: e.unread_count }));
            }
        }
        if (e.type === 'user.updated' &&
            this.chatClient.user &&
            ((_a = e.user) === null || _a === void 0 ? void 0 : _a.id) === this.chatClient.user.id) {
            this.userSubject.next(Object.assign({}, this.chatClient.user));
        }
    }
}
ChatClientService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChatClientService, deps: [{ token: i0.NgZone }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ChatClientService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChatClientService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: ChatClientService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,