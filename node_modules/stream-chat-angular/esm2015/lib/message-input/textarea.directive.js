import { EventEmitter, Input, Output, } from '@angular/core';
import { Directive } from '@angular/core';
import * as i0 from "@angular/core";
export class TextareaDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
        this.value = '';
        this.valueChange = new EventEmitter();
        this.send = new EventEmitter();
        this.userMentions = new EventEmitter();
        this.subscriptions = [];
        this.unpropagatedChanges = [];
    }
    ngOnChanges(changes) {
        var _a, _b;
        this.unpropagatedChanges.push(changes);
        if (!this.componentRef) {
            return;
        }
        if (changes.componentRef) {
            this.subscriptions.forEach((s) => s.unsubscribe());
            if (this.componentRef) {
                this.subscriptions.push(this.componentRef.instance.valueChange.subscribe((value) => this.valueChange.next(value)));
                this.subscriptions.push(this.componentRef.instance.send.subscribe((value) => this.send.next(value)));
                if (this.componentRef.instance.userMentions) {
                    this.subscriptions.push(this.componentRef.instance.userMentions.subscribe((value) => this.userMentions.next(value)));
                }
                this.componentRef.instance.areMentionsEnabled = this.areMentionsEnabled;
                this.componentRef.instance.mentionScope = this.mentionScope;
                this.componentRef.instance.value = this.value;
                this.componentRef.instance.placeholder = this.placeholder;
                this.componentRef.instance.inputMode = this.inputMode;
                this.componentRef.instance.autoFocus = this.autoFocus;
            }
        }
        if (changes.areMentionsEnabled) {
            this.componentRef.instance.areMentionsEnabled = this.areMentionsEnabled;
        }
        if (changes.mentionScope) {
            this.componentRef.instance.mentionScope = this.mentionScope;
        }
        if (changes.value) {
            this.componentRef.instance.value = this.value;
        }
        if (changes.placeholder) {
            this.componentRef.instance.placeholder = this.placeholder;
        }
        if (changes.inputMode) {
            this.componentRef.instance.inputMode = this.inputMode;
        }
        if (changes.autoFocus) {
            this.componentRef.instance.autoFocus = this.autoFocus;
        }
        // ngOnChanges not called for dynamic components since we don't use template binding
        let changesToPropagate = {};
        this.unpropagatedChanges.forEach((c) => (changesToPropagate = Object.assign(Object.assign({}, changesToPropagate), c)));
        // eslint-disable-next-line @angular-eslint/no-lifecycle-call
        (_b = (_a = this.componentRef.instance).ngOnChanges) === null || _b === void 0 ? void 0 : _b.call(_a, changesToPropagate);
        this.unpropagatedChanges = [];
    }
}
TextareaDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: TextareaDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
TextareaDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.5", type: TextareaDirective, selector: "[streamTextarea]", inputs: { componentRef: "componentRef", areMentionsEnabled: "areMentionsEnabled", mentionScope: "mentionScope", inputMode: "inputMode", value: "value", placeholder: "placeholder", autoFocus: "autoFocus" }, outputs: { valueChange: "valueChange", send: "send", userMentions: "userMentions" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: TextareaDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[streamTextarea]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { componentRef: [{
                type: Input
            }], areMentionsEnabled: [{
                type: Input
            }], mentionScope: [{
                type: Input
            }], inputMode: [{
                type: Input
            }], value: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], send: [{
                type: Output
            }], userMentions: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,