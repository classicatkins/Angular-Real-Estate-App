import { __awaiter } from "tslib";
import { Component, EventEmitter, HostBinding, Input, Output, ViewChild, } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../channel.service";
import * as i2 from "../../chat-client.service";
import * as i3 from "../../transliteration.service";
import * as i4 from "../emoji-input.service";
import * as i5 from "../../custom-templates.service";
import * as i6 from "../../theme.service";
import * as i7 from "../../avatar-placeholder/avatar-placeholder.component";
import * as i8 from "angular-mentions";
import * as i9 from "@angular/common";
import * as i10 from "@ngx-translate/core";
/**
 * The `AutocompleteTextarea` component is used by the [`MessageInput`](./MessageInputComponent.mdx) component to display the input HTML element where users can type their message.
 */
export class AutocompleteTextareaComponent {
    constructor(channelService, chatClientService, transliterationService, emojiInputService, customTemplatesService, themeService, cdRef) {
        this.channelService = channelService;
        this.chatClientService = chatClientService;
        this.transliterationService = transliterationService;
        this.emojiInputService = emojiInputService;
        this.customTemplatesService = customTemplatesService;
        this.themeService = themeService;
        this.cdRef = cdRef;
        this.class = 'str-chat__textarea str-chat__message-textarea-angular-host';
        /**
         * The value of the input HTML element.
         */
        this.value = '';
        /**
         * Placeholder of the textarea
         */
        this.placeholder = '';
        /**
         * If true, users can mention other users in messages. You can also set this input on the [`MessageInput`](./MessageInputComponent.mdx/#inputs-and-outputs) component.
         */
        this.areMentionsEnabled = true;
        /**
         * The scope for user mentions, either members of the current channel of members of the application. You can also set this input on the [`MessageInput`](./MessageInputComponent.mdx/#inputs-and-outputs) component.
         */
        this.mentionScope = 'channel';
        /**
         * Enables or disables auto focus on the textarea element
         */
        this.autoFocus = true;
        /**
         * Emits the current value of the input element when a user types.
         */
        this.valueChange = new EventEmitter();
        /**
         * Emits when a user triggers a message send event (this happens when they hit the `Enter` key).
         */
        this.send = new EventEmitter();
        /**
         * Emits the array of users that are mentioned in the message, it is updated when a user mentions a new user or deletes a mention.
         */
        this.userMentions = new EventEmitter();
        this.autocompleteKey = 'autocompleteLabel';
        this.mentionTriggerChar = '@';
        this.commandTriggerChar = '/';
        this.autocompleteConfig = {
            mentions: [],
        };
        this.subscriptions = [];
        this.mentionedUsers = [];
        this.userMentionConfig = {
            triggerChar: this.mentionTriggerChar,
            dropUp: true,
            labelKey: this.autocompleteKey,
            returnTrigger: true,
            mentionFilter: (searchString, items) => this.filter(searchString, items),
            mentionSelect: (item, triggerChar) => this.itemSelectedFromAutocompleteList(item, triggerChar),
        };
        this.slashCommandConfig = {
            triggerChar: this.commandTriggerChar,
            dropUp: true,
            labelKey: 'name',
            returnTrigger: true,
            mentionFilter: (searchString, items) => this.filter(searchString, items),
            mentionSelect: (item, triggerChar) => this.itemSelectedFromAutocompleteList(item, triggerChar),
        };
        this.searchTerm$ = new BehaviorSubject('');
        this.searchTerm$.pipe(debounceTime(300)).subscribe((searchTerm) => {
            if (searchTerm.startsWith(this.mentionTriggerChar)) {
                void this.updateMentionOptions(searchTerm);
            }
        });
        this.subscriptions.push(this.channelService.activeChannel$.subscribe((channel) => {
            var _a;
            const commands = ((_a = channel === null || channel === void 0 ? void 0 : channel.getConfig()) === null || _a === void 0 ? void 0 : _a.commands) || [];
            this.slashCommandConfig.items = commands.map((c) => (Object.assign(Object.assign({}, c), { [this.autocompleteKey]: c.name, type: 'command' })));
            this.mentionedUsers = [];
            this.userMentions.next([...this.mentionedUsers]);
            void this.updateMentionOptions(this.searchTerm$.getValue());
        }));
        this.subscriptions.push(this.emojiInputService.emojiInput$.subscribe((emoji) => {
            this.messageInput.nativeElement.focus();
            const { selectionStart } = this.messageInput.nativeElement;
            this.messageInput.nativeElement.setRangeText(emoji);
            this.messageInput.nativeElement.selectionStart =
                selectionStart + emoji.length;
            this.messageInput.nativeElement.selectionEnd =
                selectionStart + emoji.length;
            this.inputChanged();
        }));
        this.subscriptions.push(this.customTemplatesService.mentionAutocompleteItemTemplate$.subscribe((template) => (this.mentionAutocompleteItemTemplate = template)));
        this.subscriptions.push(this.customTemplatesService.commandAutocompleteItemTemplate$.subscribe((template) => (this.commandAutocompleteItemTemplate = template)));
        this.autocompleteConfig.mentions = [
            this.userMentionConfig,
            this.slashCommandConfig,
        ];
        this.themeVersion = this.themeService.themeVersion;
    }
    ngOnChanges(changes) {
        if (changes.areMentionsEnabled) {
            if (this.areMentionsEnabled) {
                this.autocompleteConfig.mentions = [
                    this.userMentionConfig,
                    this.slashCommandConfig,
                ];
                this.autocompleteConfig = Object.assign({}, this.autocompleteConfig);
            }
            else {
                this.autocompleteConfig.mentions = [this.slashCommandConfig];
                this.autocompleteConfig = Object.assign({}, this.autocompleteConfig);
            }
        }
        if (changes.mentionScope) {
            void this.updateMentionOptions(this.searchTerm$.getValue());
        }
        if (changes.value && !this.value && this.messageInput) {
            this.messageInput.nativeElement.style.height = 'auto';
            this.updateMentionedUsersFromText();
        }
    }
    ngAfterViewInit() {
        if (this.messageInput.nativeElement.scrollHeight > 0) {
            this.adjustTextareaHeight();
        }
    }
    filter(searchString, items) {
        return items.filter((item) => this.transliterate(item.autocompleteLabel.toLowerCase()).includes(this.transliterate(searchString.toLowerCase())));
    }
    itemSelectedFromAutocompleteList(item, triggerChar = '') {
        if (triggerChar === this.mentionTriggerChar) {
            this.mentionedUsers.push((item.user ? item.user : item));
            this.userMentions.next([...this.mentionedUsers]);
        }
        return (triggerChar +
            item.autocompleteLabel +
            (triggerChar === this.commandTriggerChar ? ' ' : ''));
    }
    autcompleteSearchTermChanged(searchTerm) {
        if (searchTerm === this.mentionTriggerChar) {
            void this.updateMentionOptions();
        }
        else {
            this.searchTerm$.next(searchTerm);
        }
    }
    inputChanged() {
        this.valueChange.emit(this.messageInput.nativeElement.value);
        this.adjustTextareaHeight();
    }
    inputLeft() {
        this.updateMentionedUsersFromText();
    }
    enterHit(event) {
        if (this.inputMode === 'desktop') {
            event.preventDefault();
            this.updateMentionedUsersFromText();
            this.send.next();
        }
    }
    adjustTextareaHeight() {
        if (this.themeVersion === '2') {
            this.messageInput.nativeElement.style.height = '';
            this.messageInput.nativeElement.style.height = `${this.messageInput.nativeElement.scrollHeight}px`;
        }
    }
    transliterate(s) {
        if (this.transliterationService) {
            return this.transliterationService.transliterate(s);
        }
        else {
            return s;
        }
    }
    updateMentionOptions(searchTerm) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.areMentionsEnabled) {
                return;
            }
            searchTerm = searchTerm === null || searchTerm === void 0 ? void 0 : searchTerm.replace(this.mentionTriggerChar, '');
            const request = this.mentionScope === 'application'
                ? (s) => this.chatClientService.autocompleteUsers(s)
                : (s) => this.channelService.autocompleteMembers(s);
            const result = yield request(searchTerm || '');
            const items = this.filter(searchTerm || '', result.map((i) => {
                const user = (i.user ? i.user : i);
                return Object.assign(Object.assign({}, i), { autocompleteLabel: user.name || user.id, type: 'mention' });
            }));
            this.userMentionConfig.items = items;
            this.autocompleteConfig.mentions = [
                this.userMentionConfig,
                this.slashCommandConfig,
            ];
            this.autocompleteConfig = Object.assign({}, this.autocompleteConfig);
            this.cdRef.detectChanges();
        });
    }
    updateMentionedUsersFromText() {
        const updatedMentionedUsers = [];
        this.mentionedUsers.forEach((u) => {
            const key = u.name || u.id;
            if (this.value.includes(`${this.mentionTriggerChar}${key}`)) {
                updatedMentionedUsers.push(u);
            }
        });
        if (updatedMentionedUsers.length !== this.mentionedUsers.length) {
            this.userMentions.next([...updatedMentionedUsers]);
            this.mentionedUsers = updatedMentionedUsers;
        }
    }
}
AutocompleteTextareaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AutocompleteTextareaComponent, deps: [{ token: i1.ChannelService }, { token: i2.ChatClientService }, { token: i3.TransliterationService }, { token: i4.EmojiInputService }, { token: i5.CustomTemplatesService }, { token: i6.ThemeService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AutocompleteTextareaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: AutocompleteTextareaComponent, selector: "stream-autocomplete-textarea", inputs: { value: "value", placeholder: "placeholder", areMentionsEnabled: "areMentionsEnabled", inputMode: "inputMode", mentionScope: "mentionScope", autoFocus: "autoFocus" }, outputs: { valueChange: "valueChange", send: "send", userMentions: "userMentions" }, host: { properties: { "class": "this.class" } }, viewQueries: [{ propertyName: "messageInput", first: true, predicate: ["input"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<textarea\n  [value]=\"value || ''\"\n  [autofocus]=\"autoFocus\"\n  data-testid=\"textarea\"\n  #input\n  placeholder=\"{{ placeholder | translate }}\"\n  class=\"\n    rta__textarea\n    str-chat__textarea__textarea\n    str-chat__angular-textarea\n    str-chat__message-textarea\n  \"\n  rows=\"1\"\n  (input)=\"inputChanged()\"\n  (keydown.enter)=\"enterHit($event)\"\n  [mentionConfig]=\"autocompleteConfig\"\n  (searchTerm)=\"autcompleteSearchTermChanged($event)\"\n  [mentionListTemplate]=\"autocompleteItem\"\n  (blur)=\"inputLeft()\"\n></textarea>\n<ng-template #autocompleteItem let-item=\"item\">\n  <div class=\"rta rta__item str-chat__emojisearch__item\" [ngSwitch]=\"item.type\">\n    <div class=\"rta__entity\" *ngSwitchCase=\"'mention'\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          mentionAutocompleteItemTemplate || defaultMentionTemplate;\n          context: { item: item }\n        \"\n      ></ng-container>\n    </div>\n    <div class=\"rta__entity\" *ngSwitchCase=\"'command'\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          commandAutocompleteItemTemplate || defaultCommandTemplate;\n          context: { item: item }\n        \"\n      ></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #defaultCommandTemplate let-item=\"item\">\n  <div class=\"str-chat__slash-command\">\n    <span class=\"str-chat__slash-command-header\">\n      <strong\n        class=\"str-chat__slash-command-name\"\n        data-testclass=\"command-name\"\n        >{{ item.name }}</strong\n      >\n      <span class=\"str-chat__slash-command-args\"\n        >/{{ item.name }} {{ item.args }}</span\n      >\n    </span>\n    <br />\n  </div>\n</ng-template>\n\n<ng-template #defaultMentionTemplate let-item=\"item\">\n  <div class=\"str-chat__user-item\">\n    <stream-avatar-placeholder\n      data-testclass=\"avatar\"\n      class=\"str-chat__avatar str-chat__avatar--circle\"\n      [ngStyle]=\"{ height: themeVersion === '2' ? 30 : 20 + 'px' }\"\n      [size]=\"themeVersion === '2' ? 30 : 20\"\n      [imageUrl]=\"item.image || item.user?.image\"\n      [name]=\"item.autocompleteLabel\"\n      type=\"user\"\n      location=\"autocomplete-item\"\n      [user]=\"item.user || item\"\n    ></stream-avatar-placeholder>\n    <span data-testclass=\"username\" class=\"str-chat__user-item--name\">{{\n      item.autocompleteLabel\n    }}</span>\n  </div>\n</ng-template>\n", components: [{ type: i7.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "size", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }], directives: [{ type: i8.MentionDirective, selector: "[mention], [mentionConfig]", inputs: ["mentionConfig", "mention", "mentionListTemplate"], outputs: ["searchTerm", "itemSelected", "opened", "closed"] }, { type: i9.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i9.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], pipes: { "translate": i10.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: AutocompleteTextareaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-autocomplete-textarea',
                    templateUrl: './autocomplete-textarea.component.html',
                    styles: [],
                }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.ChatClientService }, { type: i3.TransliterationService }, { type: i4.EmojiInputService }, { type: i5.CustomTemplatesService }, { type: i6.ThemeService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { class: [{
                type: HostBinding
            }], value: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], areMentionsEnabled: [{
                type: Input
            }], inputMode: [{
                type: Input
            }], mentionScope: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], send: [{
                type: Output
            }], userMentions: [{
                type: Output
            }], messageInput: [{
                type: ViewChild,
                args: ['input']
            }] } });
//# sourceMappingURL=data:application/json;base64,