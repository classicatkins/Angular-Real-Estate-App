import { __awaiter } from "tslib";
import { Component, EventEmitter, HostBinding, Inject, Input, Output, ViewChild, } from '@angular/core';
import { combineLatest, Subject, timer } from 'rxjs';
import { first, map, take, tap } from 'rxjs/operators';
import { AttachmentService } from '../attachment.service';
import { textareaInjectionToken } from '../injection-tokens';
import { TextareaDirective } from './textarea.directive';
import { isImageFile } from '../is-image-file';
import { EmojiInputService } from './emoji-input.service';
import { v4 as uuidv4 } from 'uuid';
import * as i0 from "@angular/core";
import * as i1 from "../channel.service";
import * as i2 from "../notification.service";
import * as i3 from "../attachment.service";
import * as i4 from "./message-input-config.service";
import * as i5 from "../chat-client.service";
import * as i6 from "./emoji-input.service";
import * as i7 from "../custom-templates.service";
import * as i8 from "../theme.service";
import * as i9 from "../icon-placeholder/icon-placeholder.component";
import * as i10 from "../avatar-placeholder/avatar-placeholder.component";
import * as i11 from "../attachment-list/attachment-list.component";
import * as i12 from "../attachment-preview-list/attachment-preview-list.component";
import * as i13 from "@angular/common";
import * as i14 from "./textarea.directive";
import * as i15 from "@ngx-translate/core";
/**
 * The `MessageInput` component displays an input where users can type their messages and upload files, and sends the message to the active channel. The component can be used to compose new messages or update existing ones. To send messages, the chat user needs to have the necessary [channel capability](https://getstream.io/chat/docs/javascript/channel_capabilities/?language=javascript).
 */
export class MessageInputComponent {
    constructor(channelService, notificationService, attachmentService, configService, textareaType, componentFactoryResolver, cdRef, chatClient, emojiInputService, customTemplatesService, themeService) {
        this.channelService = channelService;
        this.notificationService = notificationService;
        this.attachmentService = attachmentService;
        this.configService = configService;
        this.textareaType = textareaType;
        this.componentFactoryResolver = componentFactoryResolver;
        this.cdRef = cdRef;
        this.chatClient = chatClient;
        this.emojiInputService = emojiInputService;
        this.customTemplatesService = customTemplatesService;
        /**
         * Determines if the message is being dispalyed in a channel or in a [thread](https://getstream.io/chat/docs/javascript/threads/?language=javascript).
         */
        this.mode = 'main';
        /**
         * Enables or disables auto focus on the textarea element
         */
        this.autoFocus = true;
        /**
         * Emits when a message was successfuly sent or updated
         */
        this.messageUpdate = new EventEmitter();
        this.class = 'str-chat__message-input-angular-host';
        this.textareaValue = '';
        this.mentionedUsers = [];
        this.typingStart$ = new Subject();
        this.isCooldownInProgress = false;
        this.fileInputId = uuidv4();
        this.subscriptions = [];
        this.isViewInited = false;
        this.defaultTextareaPlaceholder = 'streamChat.Type your message';
        this.slowModeTextareaPlaceholder = 'streamChat.Slow Mode ON';
        this.themeVersion = themeService.themeVersion;
        this.textareaPlaceholder = this.defaultTextareaPlaceholder;
        this.subscriptions.push(this.attachmentService.attachmentUploadInProgressCounter$.subscribe((counter) => {
            if (counter === 0 && this.hideNotification) {
                this.hideNotification();
                this.hideNotification = undefined;
            }
        }));
        this.subscriptions.push(this.channelService.activeChannel$.subscribe((channel) => {
            var _a;
            if (channel && this.channel && channel.id !== this.channel.id) {
                this.textareaValue = '';
                this.attachmentService.resetAttachmentUploads();
            }
            const capabilities = (_a = channel === null || channel === void 0 ? void 0 : channel.data) === null || _a === void 0 ? void 0 : _a.own_capabilities;
            if (capabilities) {
                this.isFileUploadAuthorized =
                    capabilities.indexOf('upload-file') !== -1;
                this.canSendLinks = capabilities.indexOf('send-links') !== -1;
                this.channel = channel;
                this.setCanSendMessages();
            }
        }));
        this.subscriptions.push(this.chatClient.appSettings$.subscribe((appSettings) => (this.appSettings = appSettings)));
        this.subscriptions.push(this.channelService.messageToQuote$.subscribe((m) => {
            const isThreadReply = m && m.parent_id;
            if ((this.mode === 'thread' && isThreadReply) ||
                (this.mode === 'thread' && this.quotedMessage && !m) ||
                (this.mode === 'main' && !isThreadReply)) {
                this.quotedMessage = m;
            }
        }));
        this.attachmentUploads$ = this.attachmentService.attachmentUploads$;
        this.attachmentUploadInProgressCounter$ =
            this.attachmentService.attachmentUploadInProgressCounter$;
        this.isFileUploadEnabled = this.configService.isFileUploadEnabled;
        this.isMultipleFileUploadEnabled =
            this.configService.isMultipleFileUploadEnabled;
        this.areMentionsEnabled = this.configService.areMentionsEnabled;
        this.mentionScope = this.configService.mentionScope;
        this.inputMode = this.configService.inputMode;
        this.subscriptions.push(this.typingStart$.subscribe(() => void this.channelService.typingStarted(this.parentMessageId)));
        this.subscriptions.push(combineLatest([
            this.channelService.latestMessageDateByUserByChannels$,
            this.channelService.activeChannel$,
        ])
            .pipe(map(([latestMessages, channel]) => [latestMessages[(channel === null || channel === void 0 ? void 0 : channel.cid) || ''], channel]))
            .subscribe(([latestMessageDate, channel]) => {
            var _a, _b, _c;
            const cooldown = ((_a = channel === null || channel === void 0 ? void 0 : channel.data) === null || _a === void 0 ? void 0 : _a.cooldown) &&
                latestMessageDate &&
                Math.round(((_b = channel === null || channel === void 0 ? void 0 : channel.data) === null || _b === void 0 ? void 0 : _b.cooldown) -
                    (new Date().getTime() - latestMessageDate.getTime()) / 1000);
            if (cooldown &&
                cooldown > 0 &&
                ((_c = channel === null || channel === void 0 ? void 0 : channel.data) === null || _c === void 0 ? void 0 : _c.own_capabilities).includes('slow-mode')) {
                this.startCooldown(cooldown);
            }
            else if (this.isCooldownInProgress) {
                this.stopCooldown();
            }
        }));
    }
    ngOnInit() {
        this.subscriptions.push(this.customTemplatesService.emojiPickerTemplate$.subscribe((template) => {
            this.emojiPickerTemplate = template;
            this.cdRef.detectChanges();
        }));
        this.subscriptions.push(this.customTemplatesService.attachmentPreviewListTemplate$.subscribe((template) => {
            this.attachmentPreviewListTemplate = template;
            this.cdRef.detectChanges();
        }));
        this.subscriptions.push(this.customTemplatesService.customAttachmentUploadTemplate$.subscribe((template) => {
            this.customAttachmentUploadTemplate = template;
            this.cdRef.detectChanges();
        }));
    }
    ngAfterViewInit() {
        this.isViewInited = true;
        this.initTextarea();
    }
    ngOnChanges(changes) {
        if (changes.message) {
            this.attachmentService.resetAttachmentUploads();
            if (this.isUpdate) {
                this.attachmentService.createFromAttachments(this.message.attachments || []);
                this.textareaValue = this.message.text || '';
            }
        }
        if (changes.isFileUploadEnabled) {
            this.configService.isFileUploadEnabled = this.isFileUploadEnabled;
        }
        if (changes.isMultipleFileUploadEnabled) {
            this.configService.isMultipleFileUploadEnabled =
                this.isMultipleFileUploadEnabled;
        }
        if (changes.areMentionsEnabled) {
            this.configService.areMentionsEnabled = this.areMentionsEnabled;
        }
        if (changes.mentionScope) {
            this.configService.mentionScope = this.mentionScope;
        }
        if (changes.mode) {
            this.setCanSendMessages();
        }
        if (changes.inputMode) {
            this.configService.inputMode = this.inputMode;
        }
        if (changes.sendMessage$) {
            if (this.sendMessageSubcription) {
                this.sendMessageSubcription.unsubscribe();
            }
            if (this.sendMessage$) {
                this.sendMessageSubcription = this.sendMessage$.subscribe(() => void this.messageSent());
            }
        }
    }
    ngOnDestroy() {
        if (this.sendMessageSubcription) {
            this.sendMessageSubcription.unsubscribe();
        }
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    messageSent() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isCooldownInProgress) {
                return;
            }
            let attachmentUploadInProgressCounter;
            this.attachmentService.attachmentUploadInProgressCounter$
                .pipe(first())
                .subscribe((counter) => (attachmentUploadInProgressCounter = counter));
            if (attachmentUploadInProgressCounter > 0) {
                if (!this.hideNotification) {
                    this.hideNotification =
                        this.notificationService.addPermanentNotification('streamChat.Wait until all attachments have uploaded');
                }
                return;
            }
            const attachments = this.attachmentService.mapToAttachments();
            let text = this.textareaValue;
            text = text.replace(/^\n+/g, ''); // leading empty lines
            text = text.replace(/\n+$/g, ''); // ending empty lines
            const textContainsOnlySpaceChars = !text.replace(/ /g, ''); //spcae
            if ((!text || textContainsOnlySpaceChars) &&
                (!attachments || attachments.length === 0)) {
                return;
            }
            if (textContainsOnlySpaceChars) {
                text = '';
            }
            if (this.containsLinks && !this.canSendLinks) {
                this.notificationService.addTemporaryNotification('streamChat.Sending links is not allowed in this conversation');
                return;
            }
            if (!this.isUpdate) {
                this.textareaValue = '';
            }
            try {
                const message = yield (this.isUpdate
                    ? this.channelService.updateMessage(Object.assign(Object.assign({}, this.message), { text: text, attachments: attachments }))
                    : this.channelService.sendMessage(text, attachments, this.mentionedUsers, this.parentMessageId, (_a = this.quotedMessage) === null || _a === void 0 ? void 0 : _a.id));
                this.messageUpdate.emit({ message });
                if (!this.isUpdate) {
                    this.attachmentService.resetAttachmentUploads();
                }
            }
            catch (error) {
                if (this.isUpdate) {
                    this.notificationService.addTemporaryNotification('streamChat.Edit message request failed');
                }
            }
            void this.channelService.typingStopped(this.parentMessageId);
            if (this.quotedMessage) {
                this.deselectMessageToQuote();
            }
        });
    }
    get containsLinks() {
        return /(?:(?:https?|ftp):\/\/)?[\w/\-?=%.]+\.[\w/\-&?=%.]+/.test(this.textareaValue);
    }
    get quotedMessageAttachments() {
        var _a;
        const originalAttachments = (_a = this.quotedMessage) === null || _a === void 0 ? void 0 : _a.attachments;
        return originalAttachments && originalAttachments.length
            ? [originalAttachments[0]]
            : [];
    }
    get disabledTextareaText() {
        if (!this.canSendMessages) {
            return this.mode === 'thread'
                ? "streamChat.You can't send thread replies in this channel"
                : "streamChat.You can't send messages in this channel";
        }
        return '';
    }
    filesSelected(fileList) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.areAttachemntsValid(fileList))) {
                return;
            }
            yield this.attachmentService.filesSelected(fileList);
            this.clearFileInput();
        });
    }
    deselectMessageToQuote() {
        this.channelService.selectMessageToQuote(undefined);
    }
    getEmojiPickerContext() {
        return {
            emojiInput$: this.emojiInputService.emojiInput$,
        };
    }
    getAttachmentPreviewListContext() {
        return {
            attachmentUploads$: this.attachmentService.attachmentUploads$,
            deleteUploadHandler: this.deleteUpload.bind(this),
            retryUploadHandler: this.retryUpload.bind(this),
        };
    }
    getAttachmentUploadContext() {
        return {
            isMultipleFileUploadEnabled: this.isMultipleFileUploadEnabled,
            attachmentService: this.attachmentService,
        };
    }
    deleteUpload(upload) {
        if (this.isUpdate) {
            // Delay delete to avoid modal detecting this click as outside click
            setTimeout(() => {
                void this.attachmentService.deleteAttachment(upload);
            });
        }
        else {
            void this.attachmentService.deleteAttachment(upload);
        }
    }
    retryUpload(file) {
        void this.attachmentService.retryAttachmentUpload(file);
    }
    clearFileInput() {
        this.fileInput.nativeElement.value = '';
    }
    get isUpdate() {
        return !!this.message;
    }
    initTextarea() {
        // cleanup previously built textarea
        if (!this.canSendMessages) {
            this.textareaRef = undefined;
        }
        if (!this.canSendMessages || this.textareaRef || !this.textareaAnchor) {
            return;
        }
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.textareaType);
        this.textareaRef =
            this.textareaAnchor.viewContainerRef.createComponent(componentFactory);
        this.cdRef.detectChanges();
    }
    areAttachemntsValid(fileList) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!fileList) {
                return true;
            }
            if (!this.appSettings) {
                yield this.chatClient.getAppSettings();
            }
            let isValid = true;
            Array.from(fileList).forEach((f) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11;
                let hasBlockedExtension;
                let hasBlockedMimeType;
                let hasNotAllowedExtension;
                let hasNotAllowedMimeType;
                if (isImageFile(f)) {
                    hasBlockedExtension =
                        !!((_c = (_b = (_a = this.appSettings) === null || _a === void 0 ? void 0 : _a.image_upload_config) === null || _b === void 0 ? void 0 : _b.blocked_file_extensions) === null || _c === void 0 ? void 0 : _c.find((ext) => f.name.endsWith(ext)));
                    hasBlockedMimeType =
                        !!((_f = (_e = (_d = this.appSettings) === null || _d === void 0 ? void 0 : _d.image_upload_config) === null || _e === void 0 ? void 0 : _e.blocked_mime_types) === null || _f === void 0 ? void 0 : _f.find((type) => f.type === type));
                    hasNotAllowedExtension =
                        !!((_j = (_h = (_g = this.appSettings) === null || _g === void 0 ? void 0 : _g.image_upload_config) === null || _h === void 0 ? void 0 : _h.allowed_file_extensions) === null || _j === void 0 ? void 0 : _j.length) &&
                            !((_m = (_l = (_k = this.appSettings) === null || _k === void 0 ? void 0 : _k.image_upload_config) === null || _l === void 0 ? void 0 : _l.allowed_file_extensions) === null || _m === void 0 ? void 0 : _m.find((ext) => f.name.endsWith(ext)));
                    hasNotAllowedMimeType =
                        !!((_q = (_p = (_o = this.appSettings) === null || _o === void 0 ? void 0 : _o.image_upload_config) === null || _p === void 0 ? void 0 : _p.allowed_mime_types) === null || _q === void 0 ? void 0 : _q.length) &&
                            !((_t = (_s = (_r = this.appSettings) === null || _r === void 0 ? void 0 : _r.image_upload_config) === null || _s === void 0 ? void 0 : _s.allowed_mime_types) === null || _t === void 0 ? void 0 : _t.find((type) => f.type === type));
                }
                else {
                    hasBlockedExtension =
                        !!((_w = (_v = (_u = this.appSettings) === null || _u === void 0 ? void 0 : _u.file_upload_config) === null || _v === void 0 ? void 0 : _v.blocked_file_extensions) === null || _w === void 0 ? void 0 : _w.find((ext) => f.name.endsWith(ext)));
                    hasBlockedMimeType =
                        !!((_z = (_y = (_x = this.appSettings) === null || _x === void 0 ? void 0 : _x.file_upload_config) === null || _y === void 0 ? void 0 : _y.blocked_mime_types) === null || _z === void 0 ? void 0 : _z.find((type) => f.type === type));
                    hasNotAllowedExtension =
                        !!((_2 = (_1 = (_0 = this.appSettings) === null || _0 === void 0 ? void 0 : _0.file_upload_config) === null || _1 === void 0 ? void 0 : _1.allowed_file_extensions) === null || _2 === void 0 ? void 0 : _2.length) &&
                            !((_5 = (_4 = (_3 = this.appSettings) === null || _3 === void 0 ? void 0 : _3.file_upload_config) === null || _4 === void 0 ? void 0 : _4.allowed_file_extensions) === null || _5 === void 0 ? void 0 : _5.find((ext) => f.name.endsWith(ext)));
                    hasNotAllowedMimeType =
                        !!((_8 = (_7 = (_6 = this.appSettings) === null || _6 === void 0 ? void 0 : _6.file_upload_config) === null || _7 === void 0 ? void 0 : _7.allowed_mime_types) === null || _8 === void 0 ? void 0 : _8.length) &&
                            !((_11 = (_10 = (_9 = this.appSettings) === null || _9 === void 0 ? void 0 : _9.file_upload_config) === null || _10 === void 0 ? void 0 : _10.allowed_mime_types) === null || _11 === void 0 ? void 0 : _11.find((type) => f.type === type));
                }
                if (hasBlockedExtension ||
                    hasBlockedMimeType ||
                    hasNotAllowedExtension ||
                    hasNotAllowedMimeType) {
                    this.notificationService.addTemporaryNotification('streamChat.Error uploading file, extension not supported', undefined, undefined, { name: f.name, ext: f.type });
                    isValid = false;
                }
            });
            return isValid;
        });
    }
    setCanSendMessages() {
        var _a, _b;
        const capabilities = (_b = (_a = this.channel) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.own_capabilities;
        if (!capabilities) {
            this.canSendMessages = false;
        }
        else {
            this.canSendMessages =
                capabilities.indexOf(this.mode === 'main' ? 'send-message' : 'send-reply') !== -1;
        }
        if (this.isViewInited) {
            this.cdRef.detectChanges();
            this.initTextarea();
        }
    }
    get parentMessageId() {
        let parentMessageId = undefined;
        if (this.mode === 'thread') {
            this.channelService.activeParentMessageId$
                .pipe(first())
                .subscribe((id) => (parentMessageId = id));
        }
        return parentMessageId;
    }
    startCooldown(cooldown) {
        this.textareaPlaceholder = this.slowModeTextareaPlaceholder;
        this.isCooldownInProgress = true;
        this.cooldown$ = timer(0, 1000).pipe(take(cooldown + 1), map((v) => cooldown - v), tap((v) => {
            if (v === 0) {
                this.stopCooldown();
            }
        }));
    }
    stopCooldown() {
        this.cooldown$ = undefined;
        this.isCooldownInProgress = false;
        this.textareaPlaceholder = this.defaultTextareaPlaceholder;
    }
}
MessageInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageInputComponent, deps: [{ token: i1.ChannelService }, { token: i2.NotificationService }, { token: i3.AttachmentService }, { token: i4.MessageInputConfigService }, { token: textareaInjectionToken }, { token: i0.ComponentFactoryResolver }, { token: i0.ChangeDetectorRef }, { token: i5.ChatClientService }, { token: i6.EmojiInputService }, { token: i7.CustomTemplatesService }, { token: i8.ThemeService }], target: i0.ɵɵFactoryTarget.Component });
MessageInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.5", type: MessageInputComponent, selector: "stream-message-input", inputs: { isFileUploadEnabled: "isFileUploadEnabled", areMentionsEnabled: "areMentionsEnabled", mentionScope: "mentionScope", mode: "mode", isMultipleFileUploadEnabled: "isMultipleFileUploadEnabled", message: "message", sendMessage$: "sendMessage$", inputMode: "inputMode", autoFocus: "autoFocus" }, outputs: { messageUpdate: "messageUpdate" }, host: { properties: { "class": "this.class" } }, providers: [AttachmentService, EmojiInputService], viewQueries: [{ propertyName: "fileInput", first: true, predicate: ["fileInput"], descendants: true }, { propertyName: "textareaAnchor", first: true, predicate: TextareaDirective, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  *ngIf=\"themeVersion !== '2'\"\n  class=\"{{\n    mode === 'main' ? 'str-chat__input-flat' : 'str-chat__small-message-input'\n  }}\"\n  [class.str-chat__input-flat-has-attachments]=\"\n    (attachmentUploads$ | async)!.length > 0\n  \"\n  [class.str-chat__input-flat-quoted]=\"!!quotedMessage\"\n>\n  <div class=\"quoted-message-preview\" *ngIf=\"quotedMessage\">\n    <div class=\"quoted-message-preview-header\">\n      <div>{{ \"streamChat.Reply to Message\" | translate }}</div>\n      <button\n        class=\"str-chat__square-button\"\n        data-testid=\"remove-quote\"\n        (click)=\"deselectMessageToQuote()\"\n        (keyup.enter)=\"deselectMessageToQuote()\"\n      >\n        <stream-icon-placeholder\n          icon=\"close-no-outline\"\n        ></stream-icon-placeholder>\n      </button>\n    </div>\n    <div class=\"quoted-message-preview-content\">\n      <stream-avatar-placeholder\n        data-testid=\"qouted-message-avatar\"\n        class=\"str-chat-angular__avatar-host\"\n        [imageUrl]=\"quotedMessage?.user?.image\"\n        [name]=\"quotedMessage?.user?.name || quotedMessage?.user?.id\"\n        [size]=\"20\"\n        type=\"user\"\n        location=\"quoted-message-sender\"\n        [user]=\"quotedMessage?.user || undefined\"\n      ></stream-avatar-placeholder>\n      <div class=\"quoted-message-preview-content-inner\">\n        <stream-attachment-list\n          *ngIf=\"\n            quotedMessage?.attachments && quotedMessage?.attachments?.length\n          \"\n          [attachments]=\"quotedMessageAttachments\"\n          [messageId]=\"quotedMessage?.id\"\n        ></stream-attachment-list>\n        <div\n          data-testid=\"quoted-message-text\"\n          [innerHTML]=\"\n            message?.quoted_message?.translation ||\n            quotedMessage?.html ||\n            quotedMessage?.text\n          \"\n        ></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"str-chat__input-flat-wrapper\">\n    <div\n      class=\"{{\n        mode === 'main'\n          ? 'str-chat__input-flat--textarea-wrapper'\n          : 'str-chat__small-message-input--textarea-wrapper'\n      }}\"\n    >\n      <ng-template\n        #defaultAttachmentsPreview\n        let-attachmentUploads$=\"attachmentUploads$\"\n        let-retryUploadHandler=\"retryUploadHandler\"\n        let-deleteUploadHandler=\"deleteUploadHandler\"\n      >\n        <stream-attachment-preview-list\n          [attachmentUploads$]=\"attachmentUploads$\"\n          (retryAttachmentUpload)=\"retryUploadHandler($event)\"\n          (deleteAttachment)=\"deleteUploadHandler($event)\"\n          class=\"rfu-image-previewer-angular-host\"\n        ></stream-attachment-preview-list>\n      </ng-template>\n      <ng-container\n        *ngTemplateOutlet=\"\n          attachmentPreviewListTemplate || defaultAttachmentsPreview;\n          context: getAttachmentPreviewListContext()\n        \"\n      ></ng-container>\n      <div class=\"rta str-chat__textarea str-chat-angular__textarea\">\n        <ng-container *ngIf=\"emojiPickerTemplate\" data-testid=\"emoji-picker\">\n          <div\n            class=\"\n              str-chat__input-flat-emojiselect\n              str-chat-angular__emojiselect\n            \"\n          >\n            <ng-container\n              *ngTemplateOutlet=\"\n                emojiPickerTemplate;\n                context: getEmojiPickerContext()\n              \"\n            ></ng-container>\n          </div>\n        </ng-container>\n        <ng-container *ngIf=\"canSendMessages; else disabledTextarea\">\n          <ng-container\n            streamTextarea\n            [(value)]=\"textareaValue\"\n            (valueChange)=\"typingStart$.next()\"\n            (send)=\"messageSent()\"\n            [componentRef]=\"textareaRef\"\n            (userMentions)=\"mentionedUsers = $event\"\n            [areMentionsEnabled]=\"areMentionsEnabled\"\n            [mentionScope]=\"mentionScope\"\n            [placeholder]=\"textareaPlaceholder\"\n            [inputMode]=\"inputMode\"\n            [autoFocus]=\"autoFocus\"\n          ></ng-container>\n        </ng-container>\n        <ng-template #disabledTextarea>\n          <textarea\n            disabled\n            rows=\"1\"\n            [value]=\"disabledTextareaText | translate\"\n            class=\"rta__textarea str-chat__textarea__textarea\"\n            data-testid=\"disabled-textarea\"\n          ></textarea>\n        </ng-template>\n      </div>\n      <ng-container\n        *ngIf=\"isFileUploadEnabled && isFileUploadAuthorized && canSendMessages\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            customAttachmentUploadTemplate || defaultAttachmentUpload;\n            context: getAttachmentUploadContext()\n          \"\n        ></ng-container>\n        <ng-template #defaultAttachmentUpload>\n          <div\n            class=\"str-chat__fileupload-wrapper\"\n            data-testid=\"file-upload-button\"\n          >\n            <div class=\"str-chat__tooltip\">\n              {{ \"streamChat.Attach files\" | translate }}\n            </div>\n            <div class=\"rfu-file-upload-button\">\n              <label>\n                <input\n                  #fileInput\n                  type=\"file\"\n                  class=\"rfu-file-input\"\n                  data-testid=\"file-input\"\n                  [multiple]=\"isMultipleFileUploadEnabled\"\n                  (change)=\"filesSelected(fileInput.files)\"\n                />\n                <span class=\"str-chat__input-flat-fileupload\">\n                  <stream-icon-placeholder\n                    icon=\"file-upload\"\n                  ></stream-icon-placeholder>\n                </span>\n              </label>\n            </div>\n          </div>\n        </ng-template>\n      </ng-container>\n    </div>\n    <button\n      *ngIf=\"canSendMessages && !isCooldownInProgress\"\n      data-testid=\"send-button\"\n      class=\"str-chat__send-button\"\n      (click)=\"messageSent()\"\n      (keyup.enter)=\"messageSent()\"\n    >\n      <stream-icon-placeholder\n        class=\"str-chat__send-button-angular\"\n        icon=\"send\"\n      ></stream-icon-placeholder>\n    </button>\n    <div\n      class=\"str-chat__input-flat-cooldown\"\n      *ngIf=\"isCooldownInProgress\"\n      data-testid=\"cooldown-timer\"\n    >\n      <div class=\"str-chat__message-input-cooldown-text\">\n        {{ cooldown$ | async }}\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  *ngIf=\"themeVersion === '2'\"\n  class=\"str-chat__message-input str-chat-angular__message-input\"\n>\n  <div *ngIf=\"quotedMessage\" class=\"str-chat__quoted-message-preview-header\">\n    <div class=\"str-chat__quoted-message-reply-to-message\">\n      {{ \"streamChat.Reply to Message\" | translate }}\n    </div>\n    <button\n      class=\"str-chat__quoted-message-remove\"\n      data-testid=\"remove-quote\"\n      (click)=\"deselectMessageToQuote()\"\n      (keyup.enter)=\"deselectMessageToQuote()\"\n    >\n      <stream-icon-placeholder\n        icon=\"close-no-outline\"\n      ></stream-icon-placeholder>\n    </button>\n  </div>\n  <ng-container *ngIf=\"canSendMessages; else notAllowed\">\n    <div\n      class=\"\n        str-chat__message-input-inner\n        str-chat-angular__message-input-inner\n      \"\n    >\n      <ng-container\n        *ngIf=\"isFileUploadEnabled && isFileUploadAuthorized && canSendMessages\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            customAttachmentUploadTemplate || defaultAttachmentUpload;\n            context: getAttachmentUploadContext()\n          \"\n        ></ng-container>\n        <ng-template #defaultAttachmentUpload>\n          <div\n            class=\"str-chat__file-input-container\"\n            data-testid=\"file-upload-button\"\n          >\n            <input\n              #fileInput\n              type=\"file\"\n              class=\"str-chat__file-input\"\n              data-testid=\"file-input\"\n              [multiple]=\"isMultipleFileUploadEnabled\"\n              (change)=\"filesSelected(fileInput.files)\"\n              id=\"{{ fileInputId }}\"\n            />\n            <label class=\"str-chat__file-input-label\" for=\"{{ fileInputId }}\">\n              <stream-icon-placeholder icon=\"attach\"></stream-icon-placeholder>\n            </label>\n          </div>\n        </ng-template>\n      </ng-container>\n      <div class=\"str-chat__message-textarea-container\">\n        <div\n          data-testid=\"quoted-message-container\"\n          class=\"str-chat__quoted-message-preview\"\n          *ngIf=\"quotedMessage\"\n        >\n          <stream-avatar-placeholder\n            data-testid=\"qouted-message-avatar\"\n            class=\"\n              str-chat-angular__avatar-host\n              str-chat__message-sender-avatar\n            \"\n            [imageUrl]=\"quotedMessage?.user?.image\"\n            [name]=\"quotedMessage?.user?.name || quotedMessage?.user?.id\"\n            [size]=\"20\"\n            type=\"user\"\n            location=\"quoted-message-sender\"\n            [user]=\"quotedMessage?.user || undefined\"\n          ></stream-avatar-placeholder>\n          <div\n            class=\"\n              quoted-message-preview-content-inner\n              str-chat__quoted-message-bubble\n            \"\n          >\n            <stream-attachment-list\n              *ngIf=\"\n                quotedMessage?.attachments && quotedMessage?.attachments?.length\n              \"\n              [attachments]=\"quotedMessageAttachments\"\n              [messageId]=\"quotedMessage?.id\"\n            ></stream-attachment-list>\n            <div\n              class=\"str-chat__quoted-message-text\"\n              data-testid=\"quoted-message-text\"\n              [innerHTML]=\"\n                quotedMessage?.translation ||\n                quotedMessage?.html ||\n                quotedMessage?.text\n              \"\n            ></div>\n          </div>\n        </div>\n        <ng-template\n          #defaultAttachmentsPreview\n          let-attachmentUploads$=\"attachmentUploads$\"\n          let-retryUploadHandler=\"retryUploadHandler\"\n          let-deleteUploadHandler=\"deleteUploadHandler\"\n        >\n          <stream-attachment-preview-list\n            [attachmentUploads$]=\"attachmentUploads$\"\n            (retryAttachmentUpload)=\"retryUploadHandler($event)\"\n            (deleteAttachment)=\"deleteUploadHandler($event)\"\n            class=\"str-chat__attachment-preview-list-angular-host\"\n          ></stream-attachment-preview-list>\n        </ng-template>\n        <ng-container\n          *ngTemplateOutlet=\"\n            attachmentPreviewListTemplate || defaultAttachmentsPreview;\n            context: getAttachmentPreviewListContext()\n          \"\n        ></ng-container>\n        <div class=\"str-chat__message-textarea-with-emoji-picker\">\n          <ng-container\n            streamTextarea\n            [(value)]=\"textareaValue\"\n            (valueChange)=\"typingStart$.next()\"\n            (send)=\"messageSent()\"\n            [componentRef]=\"textareaRef\"\n            (userMentions)=\"mentionedUsers = $event\"\n            [areMentionsEnabled]=\"areMentionsEnabled\"\n            [mentionScope]=\"mentionScope\"\n            [inputMode]=\"inputMode\"\n            [autoFocus]=\"autoFocus\"\n            [placeholder]=\"textareaPlaceholder\"\n          ></ng-container>\n          <ng-container *ngIf=\"emojiPickerTemplate\" data-testid=\"emoji-picker\">\n            <ng-container\n              *ngTemplateOutlet=\"\n                emojiPickerTemplate;\n                context: getEmojiPickerContext()\n              \"\n            ></ng-container>\n          </ng-container>\n        </div>\n      </div>\n      <button\n        *ngIf=\"canSendMessages && !isCooldownInProgress && !message\"\n        [disabled]=\"\n          (attachmentUploadInProgressCounter$ | async)! > 0 ||\n          (!textareaValue && (attachmentUploads$ | async)!.length === 0)\n        \"\n        data-testid=\"send-button\"\n        class=\"str-chat__send-button\"\n        (click)=\"messageSent()\"\n        (keyup.enter)=\"messageSent()\"\n      >\n        <stream-icon-placeholder icon=\"send\"></stream-icon-placeholder>\n      </button>\n      <div\n        class=\"str-chat__message-input-cooldown\"\n        *ngIf=\"isCooldownInProgress\"\n        data-testid=\"cooldown-timer\"\n      >\n        {{ cooldown$ | async }}\n      </div>\n    </div>\n  </ng-container>\n  <ng-template #notAllowed>\n    <div\n      class=\"str-chat__message-input-not-allowed\"\n      data-testid=\"disabled-textarea\"\n    >\n      {{ disabledTextareaText | translate }}\n    </div>\n  </ng-template>\n</div>\n", components: [{ type: i9.IconPlaceholderComponent, selector: "stream-icon-placeholder", inputs: ["icon", "size"] }, { type: i10.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "size", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }, { type: i11.AttachmentListComponent, selector: "stream-attachment-list", inputs: ["messageId", "parentMessageId", "attachments"], outputs: ["imageModalStateChange"] }, { type: i12.AttachmentPreviewListComponent, selector: "stream-attachment-preview-list", inputs: ["attachmentUploads$"], outputs: ["retryAttachmentUpload", "deleteAttachment"] }], directives: [{ type: i13.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i13.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14.TextareaDirective, selector: "[streamTextarea]", inputs: ["componentRef", "areMentionsEnabled", "mentionScope", "inputMode", "value", "placeholder", "autoFocus"], outputs: ["valueChange", "send", "userMentions"] }], pipes: { "async": i13.AsyncPipe, "translate": i15.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageInputComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'stream-message-input',
                    templateUrl: './message-input.component.html',
                    styles: [],
                    providers: [AttachmentService, EmojiInputService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.NotificationService }, { type: i3.AttachmentService }, { type: i4.MessageInputConfigService }, { type: i0.Type, decorators: [{
                    type: Inject,
                    args: [textareaInjectionToken]
                }] }, { type: i0.ComponentFactoryResolver }, { type: i0.ChangeDetectorRef }, { type: i5.ChatClientService }, { type: i6.EmojiInputService }, { type: i7.CustomTemplatesService }, { type: i8.ThemeService }]; }, propDecorators: { isFileUploadEnabled: [{
                type: Input
            }], areMentionsEnabled: [{
                type: Input
            }], mentionScope: [{
                type: Input
            }], mode: [{
                type: Input
            }], isMultipleFileUploadEnabled: [{
                type: Input
            }], message: [{
                type: Input
            }], sendMessage$: [{
                type: Input
            }], inputMode: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], messageUpdate: [{
                type: Output
            }], class: [{
                type: HostBinding
            }], fileInput: [{
                type: ViewChild,
                args: ['fileInput']
            }], textareaAnchor: [{
                type: ViewChild,
                args: [TextareaDirective, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,