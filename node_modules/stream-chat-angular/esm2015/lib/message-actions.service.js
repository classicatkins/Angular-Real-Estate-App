import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./chat-client.service";
import * as i2 from "./notification.service";
import * as i3 from "./channel.service";
/**
 * The message actions service provides customization options for the [message actions](../../components/MessageActionsBoxComponent)
 */
export class MessageActionsService {
    constructor(chatClientService, notificationService, channelService) {
        this.chatClientService = chatClientService;
        this.notificationService = notificationService;
        this.channelService = channelService;
        /**
         * Default actions - these are the actions that are handled by the built-in component
         */
        this.defaultActions = [
            {
                actionName: 'mark-unread',
                actionLabelOrTranslationKey: 'streamChat.Mark as unread',
                actionHandler: (message) => this.channelService.markMessageUnread(message.id),
                isVisible: (enabledActions, isMine, message) => enabledActions.indexOf('read-events') !== -1 && !message.parent_id,
            },
            {
                actionName: 'quote',
                actionLabelOrTranslationKey: 'streamChat.Reply',
                actionHandler: (message) => this.channelService.selectMessageToQuote(message),
                isVisible: (enabledActions) => enabledActions.indexOf('quote-message') !== -1,
            },
            {
                actionName: 'pin',
                actionLabelOrTranslationKey: (message) => message.pinned ? 'streamChat.Unpin' : 'streamChat.Pin',
                actionHandler: (message) => message.pinned
                    ? this.channelService.unpinMessage(message)
                    : this.channelService.pinMessage(message),
                isVisible: (enabledActions) => enabledActions.indexOf('pin-message') !== -1,
            },
            {
                actionName: 'flag',
                actionLabelOrTranslationKey: 'streamChat.Flag',
                actionHandler: (message) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield this.chatClientService.flagMessage(message.id);
                        this.notificationService.addTemporaryNotification('streamChat.Message has been successfully flagged', 'success');
                    }
                    catch (err) {
                        this.notificationService.addTemporaryNotification('streamChat.Error adding flag');
                    }
                }),
                isVisible: (enabledActions, isMine) => enabledActions.indexOf('flag-message') !== -1 && !isMine,
            },
            {
                actionName: 'edit',
                actionLabelOrTranslationKey: 'streamChat.Edit Message',
                actionHandler: (message) => {
                    this.messageToEdit$.next(message);
                },
                isVisible: (enabledActions, isMine) => (enabledActions.indexOf('update-own-message') !== -1 && isMine) ||
                    enabledActions.indexOf('update-any-message') !== -1,
            },
            {
                actionName: 'delete',
                actionLabelOrTranslationKey: 'streamChat.Delete',
                actionHandler: (message) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield this.channelService.deleteMessage(message);
                    }
                    catch (error) {
                        this.notificationService.addTemporaryNotification('streamChat.Error deleting message');
                    }
                }),
                isVisible: (enabledActions, isMine) => ((enabledActions.indexOf('delete') !== -1 ||
                    enabledActions.indexOf('delete-own-message') !== -1) &&
                    isMine) ||
                    enabledActions.indexOf('delete-any') !== -1 ||
                    enabledActions.indexOf('delete-any-message') !== -1,
            },
        ];
        /**
         * The built-in components will handle changes to this observable.
         */
        this.messageToEdit$ = new BehaviorSubject(undefined);
        /**
         * You can pass your own custom actions that will be displayed inside the built-in message actions component
         */
        this.customActions$ = new BehaviorSubject([]);
    }
    /**
     * This method returns how many authorized actions are available to the given message
     *
     * @param message
     * @param enabledActions
     * @returns the count
     */
    getAuthorizedMessageActionsCount(message, enabledActions) {
        var _a;
        const customActions = this.customActions$.getValue() || [];
        const allActions = [...this.defaultActions, ...customActions];
        const currentUserId = (_a = this.chatClientService.chatClient.user) === null || _a === void 0 ? void 0 : _a.id;
        const isMine = message.user_id === currentUserId;
        return allActions.filter((item) => item.isVisible(enabledActions, isMine, message)).length;
    }
}
MessageActionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageActionsService, deps: [{ token: i1.ChatClientService }, { token: i2.NotificationService }, { token: i3.ChannelService }], target: i0.ɵɵFactoryTarget.Injectable });
MessageActionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageActionsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageActionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ChatClientService }, { type: i2.NotificationService }, { type: i3.ChannelService }]; } });
//# sourceMappingURL=data:application/json;base64,